
xI2C_ACCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007da8  08007da8  00017da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef8  08007ef8  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f00  08007f00  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08007f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000360  08008268  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  08008268  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ebf  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033bb  00000000  00000000  0003824f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d04  00000000  00000000  0003d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018008  00000000  00000000  000565f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091502  00000000  00000000  0006e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffafe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000524c  00000000  00000000  000ffb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000360 	.word	0x20000360
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d8c 	.word	0x08007d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000364 	.word	0x20000364
 80001dc:	08007d8c 	.word	0x08007d8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <uart_Print_accel>:
int16_t accel_buffer_output[3] = { 0, 0, 1060 };

int16_t update_angle_buffer_output[2] = { 0, 0 };
int16_t update_accel_buffer_output[3] = { 0, 0, 1060 };

static void uart_Print_accel() {
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af04      	add	r7, sp, #16
	sprintf(print_Buffer_accel,
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <uart_Print_accel+0x5c>)
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <uart_Print_accel+0x60>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	461c      	mov	r4, r3
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <uart_Print_accel+0x64>)
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <uart_Print_accel+0x68>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <uart_Print_accel+0x6c>)
 8000f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	9101      	str	r1, [sp, #4]
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	4623      	mov	r3, r4
 8000f34:	4602      	mov	r2, r0
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <uart_Print_accel+0x70>)
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <uart_Print_accel+0x74>)
 8000f3a:	f005 f96d 	bl	8006218 <siprintf>
			"AX: %5d; AY: %5d; AZ: %5d; TX: %5d; TY: %5d \n", AX, AY, AZ, TX,
			TY);
	HAL_UART_Transmit(&huart2, (uint8_t*) print_Buffer_accel,
			strlen(print_Buffer_accel),
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <uart_Print_accel+0x74>)
 8000f40:	f7ff f94e 	bl	80001e0 <strlen>
 8000f44:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart2, (uint8_t*) print_Buffer_accel,
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	4909      	ldr	r1, [pc, #36]	; (8000f74 <uart_Print_accel+0x74>)
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <uart_Print_accel+0x78>)
 8000f50:	f004 fe67 	bl	8005c22 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

}
 8000f54:	bf00      	nop
 8000f56:	3704      	adds	r7, #4
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	200009b6 	.word	0x200009b6
 8000f60:	200009a0 	.word	0x200009a0
 8000f64:	200009ac 	.word	0x200009ac
 8000f68:	200009b4 	.word	0x200009b4
 8000f6c:	200009aa 	.word	0x200009aa
 8000f70:	08007da8 	.word	0x08007da8
 8000f74:	2000037c 	.word	0x2000037c
 8000f78:	200008bc 	.word	0x200008bc

08000f7c <accel_average>:

static int16_t accel_average(int16_t *buffer) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	int16_t counter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	82fb      	strh	r3, [r7, #22]
	int16_t result;
	for (int j = 0; j < sizeof(buffer); j++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e00d      	b.n	8000faa <accel_average+0x2e>
		counter = counter + buffer[j];
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	8afb      	ldrh	r3, [r7, #22]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	82fb      	strh	r3, [r7, #22]
	for (int j = 0; j < sizeof(buffer); j++) {
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d9ee      	bls.n	8000f8e <accel_average+0x12>
	}

	result = counter / sizeof(buffer);
 8000fb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	81fb      	strh	r3, [r7, #14]
	return result;
 8000fb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <update_buffer>:

static void update_buffer(int16_t AX, int16_t AY, int16_t AZ, int16_t TX,
		int16_t TY) {
 8000fc8:	b490      	push	{r4, r7}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80bb      	strh	r3, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	803b      	strh	r3, [r7, #0]
	update_accel_buffer_output[0] = accel_buffer_output[0];
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <update_buffer+0x78>)
 8000fe8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <update_buffer+0x7c>)
 8000fee:	801a      	strh	r2, [r3, #0]
	update_accel_buffer_output[1] = accel_buffer_output[1];
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <update_buffer+0x78>)
 8000ff2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <update_buffer+0x7c>)
 8000ff8:	805a      	strh	r2, [r3, #2]
	update_accel_buffer_output[2] = accel_buffer_output[2];
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <update_buffer+0x78>)
 8000ffc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <update_buffer+0x7c>)
 8001002:	809a      	strh	r2, [r3, #4]

	update_angle_buffer_output[0] = angle_buffer_output[0];
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <update_buffer+0x80>)
 8001006:	f9b3 2000 	ldrsh.w	r2, [r3]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <update_buffer+0x84>)
 800100c:	801a      	strh	r2, [r3, #0]
	update_angle_buffer_output[1] = angle_buffer_output[1];
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <update_buffer+0x80>)
 8001010:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <update_buffer+0x84>)
 8001016:	805a      	strh	r2, [r3, #2]

	accel_buffer_output[0] = AX;
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <update_buffer+0x78>)
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	8013      	strh	r3, [r2, #0]
	accel_buffer_output[1] = AY;
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <update_buffer+0x78>)
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	8053      	strh	r3, [r2, #2]
	accel_buffer_output[2] = AZ;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <update_buffer+0x78>)
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	8093      	strh	r3, [r2, #4]

	angle_buffer_output[0] = TX;
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <update_buffer+0x80>)
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	8013      	strh	r3, [r2, #0]
	angle_buffer_output[1] = TY;
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <update_buffer+0x80>)
 8001032:	8a3b      	ldrh	r3, [r7, #16]
 8001034:	8053      	strh	r3, [r2, #2]

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bc90      	pop	{r4, r7}
 800103e:	4770      	bx	lr
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000490 	.word	0x20000490
 800104c:	20000494 	.word	0x20000494

08001050 <counting_average>:

static void counting_average(void) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b085      	sub	sp, #20
 8001054:	af02      	add	r7, sp, #8
	for (int i = 0; i < DATA_AMOUNT; i++) {
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e029      	b.n	80010b0 <counting_average+0x60>
		MPU6050_read_accel();
 800105c:	f001 fca6 	bl	80029ac <MPU6050_read_accel>
		MPU6050_tilt_angle();
 8001060:	f001 fd22 	bl	8002aa8 <MPU6050_tilt_angle>
		buffer_accel_X[i] = AX;
 8001064:	4b3d      	ldr	r3, [pc, #244]	; (800115c <counting_average+0x10c>)
 8001066:	f9b3 1000 	ldrsh.w	r1, [r3]
 800106a:	4a3d      	ldr	r2, [pc, #244]	; (8001160 <counting_average+0x110>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buffer_accel_Y[i] = AY;
 8001072:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <counting_average+0x114>)
 8001074:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001078:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <counting_average+0x118>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buffer_accel_Z[i] = AZ;
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <counting_average+0x11c>)
 8001082:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001086:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <counting_average+0x120>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buffer_angle_x[i] = TX;
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <counting_average+0x124>)
 8001090:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001094:	4a38      	ldr	r2, [pc, #224]	; (8001178 <counting_average+0x128>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buffer_angle_y[i] = TY;
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <counting_average+0x12c>)
 800109e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80010a2:	4a37      	ldr	r2, [pc, #220]	; (8001180 <counting_average+0x130>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DATA_AMOUNT; i++) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b13      	cmp	r3, #19
 80010b4:	ddd2      	ble.n	800105c <counting_average+0xc>
	}

	AX_final = accel_average(buffer_accel_X);
 80010b6:	482a      	ldr	r0, [pc, #168]	; (8001160 <counting_average+0x110>)
 80010b8:	f7ff ff60 	bl	8000f7c <accel_average>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <counting_average+0x134>)
 80010c2:	801a      	strh	r2, [r3, #0]
	AY_final = accel_average(buffer_accel_Y);
 80010c4:	4828      	ldr	r0, [pc, #160]	; (8001168 <counting_average+0x118>)
 80010c6:	f7ff ff59 	bl	8000f7c <accel_average>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <counting_average+0x138>)
 80010d0:	801a      	strh	r2, [r3, #0]
	AZ_final = accel_average(buffer_accel_Z);
 80010d2:	4827      	ldr	r0, [pc, #156]	; (8001170 <counting_average+0x120>)
 80010d4:	f7ff ff52 	bl	8000f7c <accel_average>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <counting_average+0x13c>)
 80010de:	801a      	strh	r2, [r3, #0]
	TX_final = accel_average(buffer_angle_x);
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <counting_average+0x128>)
 80010e2:	f7ff ff4b 	bl	8000f7c <accel_average>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <counting_average+0x140>)
 80010ec:	801a      	strh	r2, [r3, #0]
	TY_final = accel_average(buffer_angle_y);
 80010ee:	4824      	ldr	r0, [pc, #144]	; (8001180 <counting_average+0x130>)
 80010f0:	f7ff ff44 	bl	8000f7c <accel_average>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <counting_average+0x144>)
 80010fa:	801a      	strh	r2, [r3, #0]

	AX = AX_final;
 80010fc:	4b21      	ldr	r3, [pc, #132]	; (8001184 <counting_average+0x134>)
 80010fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <counting_average+0x10c>)
 8001104:	801a      	strh	r2, [r3, #0]
	AY = AY_final;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <counting_average+0x138>)
 8001108:	f9b3 2000 	ldrsh.w	r2, [r3]
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <counting_average+0x114>)
 800110e:	801a      	strh	r2, [r3, #0]
	AZ = AZ_final;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <counting_average+0x13c>)
 8001112:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <counting_average+0x11c>)
 8001118:	801a      	strh	r2, [r3, #0]
	TX = TX_final;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <counting_average+0x140>)
 800111c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <counting_average+0x124>)
 8001122:	801a      	strh	r2, [r3, #0]
	TY = TY_final;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <counting_average+0x144>)
 8001126:	f9b3 2000 	ldrsh.w	r2, [r3]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <counting_average+0x12c>)
 800112c:	801a      	strh	r2, [r3, #0]

	update_buffer(AX, AY, AZ, TX, TY);
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <counting_average+0x10c>)
 8001130:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <counting_average+0x114>)
 8001136:	f9b3 1000 	ldrsh.w	r1, [r3]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <counting_average+0x11c>)
 800113c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <counting_average+0x124>)
 8001142:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <counting_average+0x12c>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4623      	mov	r3, r4
 8001150:	f7ff ff3a 	bl	8000fc8 <update_buffer>
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	200009b6 	.word	0x200009b6
 8001160:	200003bc 	.word	0x200003bc
 8001164:	200009a0 	.word	0x200009a0
 8001168:	200003e4 	.word	0x200003e4
 800116c:	200009ac 	.word	0x200009ac
 8001170:	2000040c 	.word	0x2000040c
 8001174:	200009b4 	.word	0x200009b4
 8001178:	20000434 	.word	0x20000434
 800117c:	200009aa 	.word	0x200009aa
 8001180:	2000045c 	.word	0x2000045c
 8001184:	20000484 	.word	0x20000484
 8001188:	20000486 	.word	0x20000486
 800118c:	20000488 	.word	0x20000488
 8001190:	2000048a 	.word	0x2000048a
 8001194:	2000048c 	.word	0x2000048c

08001198 <app_init>:

void app_init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	MPU6050_init();
 800119c:	f001 fb5c 	bl	8002858 <MPU6050_init>
	timer_init();
 80011a0:	f002 f9e8 	bl	8003574 <timer_init>
	timer_register(uart_Print_accel, PRINT_MESSAGE_DLY);
 80011a4:	21c8      	movs	r1, #200	; 0xc8
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <app_init+0x24>)
 80011a8:	f002 f9ec 	bl	8003584 <timer_register>
	LCD_Init();
 80011ac:	f000 feba 	bl	8001f24 <LCD_Init>
	LCD_CleanBoard();
 80011b0:	f000 ff1a 	bl	8001fe8 <LCD_CleanBoard>
	intialise_ball_starting_pos();
 80011b4:	f000 fbaa 	bl	800190c <intialise_ball_starting_pos>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	08000f01 	.word	0x08000f01

080011c0 <app_game>:

void app_game(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	LCD_CleanBoard();
 80011c4:	f000 ff10 	bl	8001fe8 <LCD_CleanBoard>
	intialise_ball_starting_pos();
 80011c8:	f000 fba0 	bl	800190c <intialise_ball_starting_pos>
	playgame(level);
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <app_game+0x1c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fd81 	bl	8002cd8 <playgame>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000089c 	.word	0x2000089c

080011e0 <app_loop>:

void app_loop(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	counting_average();
 80011e4:	f7ff ff34 	bl	8001050 <counting_average>
	gameRunning();
 80011e8:	f001 fd8a 	bl	8002d00 <gameRunning>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LCD_draw_dot>:
/**
 *  col: 0 ~ 127
 *  raw: 0 ~ 64
 *  color: 1(on) 0(off )
 */
void LCD_draw_dot(uint8_t col, uint8_t raw, uint8_t color) {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	460b      	mov	r3, r1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	717b      	strb	r3, [r7, #5]
	uint8_t data;
	if ((col >= COL_MAX) || (raw >= RAW_MAX)) {
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db5b      	blt.n	80012c2 <LCD_draw_dot+0xd2>
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b3f      	cmp	r3, #63	; 0x3f
 800120e:	d858      	bhi.n	80012c2 <LCD_draw_dot+0xd2>
		return;
	}

	LCD_Set_Position(col, cal_Page_address(raw));
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 ff4e 	bl	80020b4 <cal_Page_address>
 8001218:	4603      	mov	r3, r0
 800121a:	b2da      	uxtb	r2, r3
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f000 ff09 	bl	8002038 <LCD_Set_Position>

	if (color == 1) {
 8001226:	797b      	ldrb	r3, [r7, #5]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d124      	bne.n	8001276 <LCD_draw_dot+0x86>
		data = RAM_buffer[col][cal_Page_address(raw)];
 800122c:	79fc      	ldrb	r4, [r7, #7]
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 ff3f 	bl	80020b4 <cal_Page_address>
 8001236:	4602      	mov	r2, r0
 8001238:	4924      	ldr	r1, [pc, #144]	; (80012cc <LCD_draw_dot+0xdc>)
 800123a:	00e3      	lsls	r3, r4, #3
 800123c:	440b      	add	r3, r1
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	73fb      	strb	r3, [r7, #15]

		data = cal_adding_previous_pixel_position(data, raw);
 8001244:	79ba      	ldrb	r2, [r7, #6]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f000 ff67 	bl	800211e <cal_adding_previous_pixel_position>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]

		LCD_WriteData(data);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe82 	bl	8001f60 <LCD_WriteData>

		RAM_buffer[col][cal_Page_address(raw)] = data;
 800125c:	79fc      	ldrb	r4, [r7, #7]
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 ff27 	bl	80020b4 <cal_Page_address>
 8001266:	4602      	mov	r2, r0
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <LCD_draw_dot+0xdc>)
 800126a:	00e3      	lsls	r3, r4, #3
 800126c:	440b      	add	r3, r1
 800126e:	4413      	add	r3, r2
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e026      	b.n	80012c4 <LCD_draw_dot+0xd4>
	} else if (color == 0) {
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d123      	bne.n	80012c4 <LCD_draw_dot+0xd4>
		data = RAM_buffer[col][cal_Page_address(raw)];
 800127c:	79fc      	ldrb	r4, [r7, #7]
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 ff17 	bl	80020b4 <cal_Page_address>
 8001286:	4602      	mov	r2, r0
 8001288:	4910      	ldr	r1, [pc, #64]	; (80012cc <LCD_draw_dot+0xdc>)
 800128a:	00e3      	lsls	r3, r4, #3
 800128c:	440b      	add	r3, r1
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	73fb      	strb	r3, [r7, #15]

		data = cal_vanish_previous_pixel_position(data);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 ff5b 	bl	8002152 <cal_vanish_previous_pixel_position>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]

		LCD_WriteData(data);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fe5c 	bl	8001f60 <LCD_WriteData>

		RAM_buffer[col][cal_Page_address(raw)] = data;
 80012a8:	79fc      	ldrb	r4, [r7, #7]
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 ff01 	bl	80020b4 <cal_Page_address>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4905      	ldr	r1, [pc, #20]	; (80012cc <LCD_draw_dot+0xdc>)
 80012b6:	00e3      	lsls	r3, r4, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	4413      	add	r3, r2
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e000      	b.n	80012c4 <LCD_draw_dot+0xd4>
		return;
 80012c2:	bf00      	nop
	}
}
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000498 	.word	0x20000498

080012d0 <create_diff_ball_size>:

static void create_diff_ball_size(int start_col, int start_raw, int ballsize) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	for (uint8_t i = start_col; i <= (ballsize + start_col); i++) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e014      	b.n	800130c <create_diff_ball_size+0x3c>

		for (uint8_t j = start_raw; j <= (ballsize + start_raw); j++) {
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	75bb      	strb	r3, [r7, #22]
 80012e6:	e008      	b.n	80012fa <create_diff_ball_size+0x2a>

			LCD_draw_dot(i, j, 1);
 80012e8:	7db9      	ldrb	r1, [r7, #22]
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff7e 	bl	80011f0 <LCD_draw_dot>
		for (uint8_t j = start_raw; j <= (ballsize + start_raw); j++) {
 80012f4:	7dbb      	ldrb	r3, [r7, #22]
 80012f6:	3301      	adds	r3, #1
 80012f8:	75bb      	strb	r3, [r7, #22]
 80012fa:	7dba      	ldrb	r2, [r7, #22]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	440b      	add	r3, r1
 8001302:	429a      	cmp	r2, r3
 8001304:	ddf0      	ble.n	80012e8 <create_diff_ball_size+0x18>
	for (uint8_t i = start_col; i <= (ballsize + start_col); i++) {
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	3301      	adds	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	7dfa      	ldrb	r2, [r7, #23]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	440b      	add	r3, r1
 8001314:	429a      	cmp	r2, r3
 8001316:	dde4      	ble.n	80012e2 <create_diff_ball_size+0x12>

		}
	}
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <clean_diff_ball_size>:

static void clean_diff_ball_size(int start_col, int start_raw, int ballsize) {
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	for (uint8_t i = start_col; i <= (ballsize + start_col); i++) {
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	75fb      	strb	r3, [r7, #23]
 8001332:	e014      	b.n	800135e <clean_diff_ball_size+0x3c>

		for (uint8_t j = start_raw; j <= (ballsize + start_raw); j++) {
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	75bb      	strb	r3, [r7, #22]
 8001338:	e008      	b.n	800134c <clean_diff_ball_size+0x2a>

			LCD_draw_dot(i, j, 0);
 800133a:	7db9      	ldrb	r1, [r7, #22]
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	2200      	movs	r2, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff55 	bl	80011f0 <LCD_draw_dot>
		for (uint8_t j = start_raw; j <= (ballsize + start_raw); j++) {
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	3301      	adds	r3, #1
 800134a:	75bb      	strb	r3, [r7, #22]
 800134c:	7dba      	ldrb	r2, [r7, #22]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	440b      	add	r3, r1
 8001354:	429a      	cmp	r2, r3
 8001356:	ddf0      	ble.n	800133a <clean_diff_ball_size+0x18>
	for (uint8_t i = start_col; i <= (ballsize + start_col); i++) {
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	3301      	adds	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	7dfa      	ldrb	r2, [r7, #23]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	440b      	add	r3, r1
 8001366:	429a      	cmp	r2, r3
 8001368:	dde4      	ble.n	8001334 <clean_diff_ball_size+0x12>

		}
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <LCD_Create_Ball>:

/**
 * create a pixel ball
 */
void LCD_Create_Ball(int start_col, int start_raw, int ballsize) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]

	write_display_data();
 8001380:	f000 ff44 	bl	800220c <write_display_data>

	if (ballsize > 4 || ballsize < 0) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b04      	cmp	r3, #4
 8001388:	dc02      	bgt.n	8001390 <LCD_Create_Ball+0x1c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	da01      	bge.n	8001394 <LCD_Create_Ball+0x20>
		ballsize = 2;
 8001390:	2302      	movs	r3, #2
 8001392:	607b      	str	r3, [r7, #4]
	}

	create_diff_ball_size(start_col, start_raw, ballsize);
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff ff99 	bl	80012d0 <create_diff_ball_size>

	record_coord[0] = start_col;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <LCD_Create_Ball+0x64>)
 80013a4:	701a      	strb	r2, [r3, #0]
	record_coord[1] = start_raw;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <LCD_Create_Ball+0x64>)
 80013ac:	705a      	strb	r2, [r3, #1]
	record_coord[2] = (start_col + ballsize);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <LCD_Create_Ball+0x64>)
 80013bc:	709a      	strb	r2, [r3, #2]
	record_coord[3] = (start_raw + ballsize);
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <LCD_Create_Ball+0x64>)
 80013cc:	70da      	strb	r2, [r3, #3]
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000898 	.word	0x20000898

080013dc <LCD_Clean_Ball>:

/**
 * cleaning the previous position of the ball
 */
void LCD_Clean_Ball(int start_col, int start_raw, int ballsize) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]

	write_display_data();
 80013e8:	f000 ff10 	bl	800220c <write_display_data>

	if (ballsize > 4 || ballsize < 0) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	dc02      	bgt.n	80013f8 <LCD_Clean_Ball+0x1c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da01      	bge.n	80013fc <LCD_Clean_Ball+0x20>
		ballsize = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
	}

	clean_diff_ball_size(start_col, start_raw, ballsize);
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff ff8e 	bl	8001322 <clean_diff_ball_size>

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <moving_ball_horizontal_left>:

/**
 * moving ball to left
 */
void moving_ball_horizontal_left(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <moving_ball_horizontal_left+0x58>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	60bb      	str	r3, [r7, #8]
	int start_raw = record_coord[1];
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <moving_ball_horizontal_left+0x58>)
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	607b      	str	r3, [r7, #4]

	int CountingBlock = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	603b      	str	r3, [r7, #0]
	int new_col = start_col - CountingBlock;
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	60fb      	str	r3, [r7, #12]

	if (new_col < COL_MIN) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da07      	bge.n	8001444 <moving_ball_horizontal_left+0x34>
		new_col = start_col;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60fb      	str	r3, [r7, #12]

		LCD_Create_Ball(new_col, start_raw, BALL_SIZE);
 8001438:	2202      	movs	r2, #2
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff ff99 	bl	8001374 <LCD_Create_Ball>
 8001442:	e004      	b.n	800144e <moving_ball_horizontal_left+0x3e>

	} else {

		LCD_Create_Ball(new_col, start_raw, BALL_SIZE);
 8001444:	2202      	movs	r2, #2
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff ff93 	bl	8001374 <LCD_Create_Ball>

	}
	record_coord[0] = new_col;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <moving_ball_horizontal_left+0x58>)
 8001454:	701a      	strb	r2, [r3, #0]
	record_coord[1] = start_raw;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <moving_ball_horizontal_left+0x58>)
 800145c:	705a      	strb	r2, [r3, #1]

}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000898 	.word	0x20000898

0800146c <moving_ball_horizontal_right>:

/**
 * moving ball to right
 */
void moving_ball_horizontal_right(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <moving_ball_horizontal_right+0x64>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
	int start_raw = record_coord[1];
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <moving_ball_horizontal_right+0x64>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	60fb      	str	r3, [r7, #12]
	int end_col = record_coord[2];
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <moving_ball_horizontal_right+0x64>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	60bb      	str	r3, [r7, #8]

	int CountingBlock = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
	int new_end_col = end_col + CountingBlock;
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	603b      	str	r3, [r7, #0]
	int new_start_col = start_col + CountingBlock;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

	if (new_end_col >= COL_MAX) {
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b7f      	cmp	r3, #127	; 0x7f
 800149c:	dd07      	ble.n	80014ae <moving_ball_horizontal_right+0x42>
		new_start_col = start_col;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	617b      	str	r3, [r7, #20]

		LCD_Create_Ball(new_start_col, start_raw, BALL_SIZE);
 80014a2:	2202      	movs	r2, #2
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff64 	bl	8001374 <LCD_Create_Ball>
 80014ac:	e004      	b.n	80014b8 <moving_ball_horizontal_right+0x4c>

	} else {

		LCD_Create_Ball(new_start_col, start_raw, BALL_SIZE);
 80014ae:	2202      	movs	r2, #2
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff5e 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = new_start_col;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <moving_ball_horizontal_right+0x64>)
 80014be:	701a      	strb	r2, [r3, #0]
	record_coord[1] = start_raw;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <moving_ball_horizontal_right+0x64>)
 80014c6:	705a      	strb	r2, [r3, #1]

}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000898 	.word	0x20000898

080014d4 <moving_ball_vertical_up>:

/**
 *  moving ball to up
 */
void moving_ball_vertical_up(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <moving_ball_vertical_up+0x58>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	60bb      	str	r3, [r7, #8]
	int start_raw = record_coord[1];
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <moving_ball_vertical_up+0x58>)
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	607b      	str	r3, [r7, #4]

	int CountingBlock = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	603b      	str	r3, [r7, #0]
	int new_raw = start_raw - CountingBlock;
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	60fb      	str	r3, [r7, #12]

	if (new_raw < RAW_MIN) {
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da07      	bge.n	8001508 <moving_ball_vertical_up+0x34>
		new_raw = start_raw;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60fb      	str	r3, [r7, #12]

		LCD_Create_Ball(start_col, new_raw, BALL_SIZE);
 80014fc:	2202      	movs	r2, #2
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff ff37 	bl	8001374 <LCD_Create_Ball>
 8001506:	e004      	b.n	8001512 <moving_ball_vertical_up+0x3e>

	} else {

		LCD_Create_Ball(start_col, new_raw, BALL_SIZE);
 8001508:	2202      	movs	r2, #2
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	68b8      	ldr	r0, [r7, #8]
 800150e:	f7ff ff31 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = start_col;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <moving_ball_vertical_up+0x58>)
 8001518:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_raw;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b03      	ldr	r3, [pc, #12]	; (800152c <moving_ball_vertical_up+0x58>)
 8001520:	705a      	strb	r2, [r3, #1]

}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000898 	.word	0x20000898

08001530 <moving_ball_vertical_down>:

/**
 *  moving ball to down
 */
void moving_ball_vertical_down(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
	int start_col = record_coord[0];
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <moving_ball_vertical_down+0x64>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
	int start_raw = record_coord[1];
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <moving_ball_vertical_down+0x64>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	60fb      	str	r3, [r7, #12]
	int end_raw = record_coord[3];
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <moving_ball_vertical_down+0x64>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	60bb      	str	r3, [r7, #8]

	int CountingBlock = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	607b      	str	r3, [r7, #4]

	int new_start_raw = start_raw + CountingBlock;
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
	int new_end_raw = end_raw + CountingBlock;
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	603b      	str	r3, [r7, #0]

	if (new_end_raw >= RAW_MAX) {
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b3f      	cmp	r3, #63	; 0x3f
 8001560:	dd07      	ble.n	8001572 <moving_ball_vertical_down+0x42>

		new_start_raw = start_raw;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	617b      	str	r3, [r7, #20]

		LCD_Create_Ball(start_col, new_start_raw, BALL_SIZE);
 8001566:	2202      	movs	r2, #2
 8001568:	6979      	ldr	r1, [r7, #20]
 800156a:	6938      	ldr	r0, [r7, #16]
 800156c:	f7ff ff02 	bl	8001374 <LCD_Create_Ball>
 8001570:	e004      	b.n	800157c <moving_ball_vertical_down+0x4c>

	} else {

		LCD_Create_Ball(start_col, new_start_raw, BALL_SIZE);
 8001572:	2202      	movs	r2, #2
 8001574:	6979      	ldr	r1, [r7, #20]
 8001576:	6938      	ldr	r0, [r7, #16]
 8001578:	f7ff fefc 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = start_col;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <moving_ball_vertical_down+0x64>)
 8001582:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_start_raw;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <moving_ball_vertical_down+0x64>)
 800158a:	705a      	strb	r2, [r3, #1]

}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000898 	.word	0x20000898

08001598 <moving_ball_left_top>:

/**
 * moving to left-top
 */
void moving_ball_left_top(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
	int start_col = record_coord[0];
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <moving_ball_left_top+0x68>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
	int start_raw = record_coord[1];
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <moving_ball_left_top+0x68>)
 80015a6:	785b      	ldrb	r3, [r3, #1]
 80015a8:	60bb      	str	r3, [r7, #8]

	int CountingBlock = 1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
	int new_col = start_col - CountingBlock;
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
	int new_raw = start_raw - CountingBlock;
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	613b      	str	r3, [r7, #16]

	if ((new_col < COL_MIN) || (new_raw < RAW_MIN)) {
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db02      	blt.n	80015ca <moving_ball_left_top+0x32>
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da09      	bge.n	80015de <moving_ball_left_top+0x46>

		new_col = start_col;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	617b      	str	r3, [r7, #20]
		new_raw = start_raw;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	613b      	str	r3, [r7, #16]

		LCD_Create_Ball(new_col, new_raw, BALL_SIZE);
 80015d2:	2202      	movs	r2, #2
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff fecc 	bl	8001374 <LCD_Create_Ball>
 80015dc:	e004      	b.n	80015e8 <moving_ball_left_top+0x50>

	} else {

		LCD_Create_Ball(new_col, new_raw, BALL_SIZE);
 80015de:	2202      	movs	r2, #2
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff fec6 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = new_col;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <moving_ball_left_top+0x68>)
 80015ee:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_raw;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <moving_ball_left_top+0x68>)
 80015f6:	705a      	strb	r2, [r3, #1]

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000898 	.word	0x20000898

08001604 <moving_ball_left_bottom>:

/**
 * moving ball to left bottom
 */
void moving_ball_left_bottom(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <moving_ball_left_bottom+0x78>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	617b      	str	r3, [r7, #20]
	int start_raw = record_coord[1];
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <moving_ball_left_bottom+0x78>)
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	613b      	str	r3, [r7, #16]
	int end_raw = record_coord[3];
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <moving_ball_left_bottom+0x78>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	60fb      	str	r3, [r7, #12]

	int CountingBlock = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
	int new_start_col = start_col - CountingBlock;
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	61fb      	str	r3, [r7, #28]
	int new_start_raw = start_raw + CountingBlock;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
	int new_end_raw = end_raw + CountingBlock;
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	607b      	str	r3, [r7, #4]

	if ((new_start_col < COL_MIN) || (new_end_raw >= RAW_MAX)) {
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db02      	blt.n	8001644 <moving_ball_left_bottom+0x40>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b3f      	cmp	r3, #63	; 0x3f
 8001642:	dd09      	ble.n	8001658 <moving_ball_left_bottom+0x54>
		new_start_col = start_col;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	61fb      	str	r3, [r7, #28]
		new_start_raw = start_raw;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	61bb      	str	r3, [r7, #24]

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 800164c:	2202      	movs	r2, #2
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	69f8      	ldr	r0, [r7, #28]
 8001652:	f7ff fe8f 	bl	8001374 <LCD_Create_Ball>
 8001656:	e004      	b.n	8001662 <moving_ball_left_bottom+0x5e>

	} else {

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 8001658:	2202      	movs	r2, #2
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	69f8      	ldr	r0, [r7, #28]
 800165e:	f7ff fe89 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = new_start_col;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <moving_ball_left_bottom+0x78>)
 8001668:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_start_raw;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <moving_ball_left_bottom+0x78>)
 8001670:	705a      	strb	r2, [r3, #1]

}
 8001672:	bf00      	nop
 8001674:	3720      	adds	r7, #32
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000898 	.word	0x20000898

08001680 <moving_ball_right_top>:

/**
 * moving ball to right top
 */
void moving_ball_right_top(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <moving_ball_right_top+0x78>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	617b      	str	r3, [r7, #20]
	int start_raw = record_coord[1];
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <moving_ball_right_top+0x78>)
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	613b      	str	r3, [r7, #16]
	int end_col = record_coord[2];
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <moving_ball_right_top+0x78>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	60fb      	str	r3, [r7, #12]

	int CountingBlock = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	60bb      	str	r3, [r7, #8]

	int new_start_col = start_col + CountingBlock;
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	61fb      	str	r3, [r7, #28]
	int new_start_raw = start_raw - CountingBlock;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	61bb      	str	r3, [r7, #24]
	int new_end_col = end_col + CountingBlock;
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4413      	add	r3, r2
 80016b2:	607b      	str	r3, [r7, #4]

	if ((new_end_col >= COL_MAX) || (new_start_raw < RAW_MIN)) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b7f      	cmp	r3, #127	; 0x7f
 80016b8:	dc02      	bgt.n	80016c0 <moving_ball_right_top+0x40>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da09      	bge.n	80016d4 <moving_ball_right_top+0x54>

		new_start_col = start_col;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	61fb      	str	r3, [r7, #28]
		new_start_raw = start_raw;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	61bb      	str	r3, [r7, #24]

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 80016c8:	2202      	movs	r2, #2
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	69f8      	ldr	r0, [r7, #28]
 80016ce:	f7ff fe51 	bl	8001374 <LCD_Create_Ball>
 80016d2:	e004      	b.n	80016de <moving_ball_right_top+0x5e>

	} else {

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 80016d4:	2202      	movs	r2, #2
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	69f8      	ldr	r0, [r7, #28]
 80016da:	f7ff fe4b 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = new_start_col;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <moving_ball_right_top+0x78>)
 80016e4:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_start_raw;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <moving_ball_right_top+0x78>)
 80016ec:	705a      	strb	r2, [r3, #1]

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000898 	.word	0x20000898

080016fc <moving_ball_right_bottom>:

/**
 * moving ball to right bottom
 */
void moving_ball_right_bottom(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0

	int start_col = record_coord[0];
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <moving_ball_right_bottom+0x84>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	61fb      	str	r3, [r7, #28]
	int start_raw = record_coord[1];
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <moving_ball_right_bottom+0x84>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	61bb      	str	r3, [r7, #24]
	int end_col = record_coord[2];
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <moving_ball_right_bottom+0x84>)
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	617b      	str	r3, [r7, #20]
	int end_raw = record_coord[3];
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <moving_ball_right_bottom+0x84>)
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	613b      	str	r3, [r7, #16]

	int CountingBlock = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]

	int new_start_col = start_col + CountingBlock;
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
	int new_start_raw = start_raw + CountingBlock;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	623b      	str	r3, [r7, #32]
	int new_end_col = end_col + CountingBlock;
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60bb      	str	r3, [r7, #8]
	int new_end_raw = end_raw + CountingBlock;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	607b      	str	r3, [r7, #4]

	if ((new_end_col >= COL_MAX) || (new_end_raw >= RAW_MAX)) {
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b7f      	cmp	r3, #127	; 0x7f
 8001742:	dc02      	bgt.n	800174a <moving_ball_right_bottom+0x4e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b3f      	cmp	r3, #63	; 0x3f
 8001748:	dd09      	ble.n	800175e <moving_ball_right_bottom+0x62>
		new_start_col = start_col;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
		new_start_raw = start_raw;
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	623b      	str	r3, [r7, #32]

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 8001752:	2202      	movs	r2, #2
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001758:	f7ff fe0c 	bl	8001374 <LCD_Create_Ball>
 800175c:	e004      	b.n	8001768 <moving_ball_right_bottom+0x6c>

	} else {

		LCD_Create_Ball(new_start_col, new_start_raw, BALL_SIZE);
 800175e:	2202      	movs	r2, #2
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001764:	f7ff fe06 	bl	8001374 <LCD_Create_Ball>

	}

	record_coord[0] = new_start_col;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <moving_ball_right_bottom+0x84>)
 800176e:	701a      	strb	r2, [r3, #0]
	record_coord[1] = new_start_raw;
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <moving_ball_right_bottom+0x84>)
 8001776:	705a      	strb	r2, [r3, #1]

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000898 	.word	0x20000898

08001784 <Is_One_G>:
#include <stdlib.h>

/**
 *  checking if the accelerometer is on the 1g circumstance.
 */
static int Is_One_G(void) {
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
	int data_gravity = 1050;
 800178a:	f240 431a 	movw	r3, #1050	; 0x41a
 800178e:	613b      	str	r3, [r7, #16]
	int range_bias_min = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
	int range_bias_max = 15;
 8001794:	230f      	movs	r3, #15
 8001796:	60bb      	str	r3, [r7, #8]
	int bias_az = abs(accel_buffer_output[2] - data_gravity);
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <Is_One_G+0x50>)
 800179a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bfb8      	it	lt
 80017a8:	425b      	neglt	r3, r3
 80017aa:	607b      	str	r3, [r7, #4]
	int one_g = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

	if (((bias_az >= range_bias_min) && (bias_az <= range_bias_max))) {
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	db05      	blt.n	80017c4 <Is_One_G+0x40>
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dc01      	bgt.n	80017c4 <Is_One_G+0x40>
		one_g = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
	}
	return one_g;
 80017c4:	697b      	ldr	r3, [r7, #20]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000

080017d8 <IsNotMoving>:

/**
 * checking if the accelerometer is standstill or not.
 */
static int IsNotMoving(void) {
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
	int Notmove = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
	int Tx = abs(angle_buffer_output[0]);
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <IsNotMoving+0x48>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bfb8      	it	lt
 80017ec:	425b      	neglt	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	60bb      	str	r3, [r7, #8]
	int Ty = abs(angle_buffer_output[1]);
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <IsNotMoving+0x48>)
 80017f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfb8      	it	lt
 80017fc:	425b      	neglt	r3, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	607b      	str	r3, [r7, #4]
	if (Tx < 50 && Ty < 50) {
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b31      	cmp	r3, #49	; 0x31
 8001806:	dc04      	bgt.n	8001812 <IsNotMoving+0x3a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b31      	cmp	r3, #49	; 0x31
 800180c:	dc01      	bgt.n	8001812 <IsNotMoving+0x3a>
		Notmove = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
	}
	return Notmove;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000490 	.word	0x20000490

08001824 <Istitlingdirection>:
 * flag = 3, bottom
 * flag = 4, left-top
 * flag = 5, left-bottom
 * flag = 6, right-top
 */
static int Istitlingdirection(void) {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0

	int flag = 8;
 800182a:	2308      	movs	r3, #8
 800182c:	60fb      	str	r3, [r7, #12]
	int Tx = angle_buffer_output[0];
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <Istitlingdirection+0xe4>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	60bb      	str	r3, [r7, #8]
	int Ty = angle_buffer_output[1];
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <Istitlingdirection+0xe4>)
 8001838:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800183c:	607b      	str	r3, [r7, #4]

	if ((Tx > 200) && (-200 < Ty) && (Ty < 200)) {  //left
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2bc8      	cmp	r3, #200	; 0xc8
 8001842:	dd09      	ble.n	8001858 <Istitlingdirection+0x34>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800184a:	db05      	blt.n	8001858 <Istitlingdirection+0x34>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2bc7      	cmp	r3, #199	; 0xc7
 8001850:	dc02      	bgt.n	8001858 <Istitlingdirection+0x34>
		flag = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e04f      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((Tx < -150) && (Ty < 200) && (Ty > -200)) {  // right
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800185e:	da09      	bge.n	8001874 <Istitlingdirection+0x50>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2bc7      	cmp	r3, #199	; 0xc7
 8001864:	dc06      	bgt.n	8001874 <Istitlingdirection+0x50>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800186c:	db02      	blt.n	8001874 <Istitlingdirection+0x50>
		flag = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e041      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((-150 < Tx) && (Tx < 200) && (Ty < -200)) {  // top
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800187a:	db09      	blt.n	8001890 <Istitlingdirection+0x6c>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2bc7      	cmp	r3, #199	; 0xc7
 8001880:	dc06      	bgt.n	8001890 <Istitlingdirection+0x6c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8001888:	da02      	bge.n	8001890 <Istitlingdirection+0x6c>
		flag = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e033      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((-150 < Tx) && (Tx < 200) && (Ty > 200)) {  // bottom
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8001896:	db08      	blt.n	80018aa <Istitlingdirection+0x86>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2bc7      	cmp	r3, #199	; 0xc7
 800189c:	dc05      	bgt.n	80018aa <Istitlingdirection+0x86>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2bc8      	cmp	r3, #200	; 0xc8
 80018a2:	dd02      	ble.n	80018aa <Istitlingdirection+0x86>
		flag = 3;
 80018a4:	2303      	movs	r3, #3
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e026      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((Tx > 200) && (Ty < -200)) {    // left-top
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2bc8      	cmp	r3, #200	; 0xc8
 80018ae:	dd06      	ble.n	80018be <Istitlingdirection+0x9a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80018b6:	da02      	bge.n	80018be <Istitlingdirection+0x9a>
		flag = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e01c      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((Tx > 200) && (Ty > 200)) { // left - bottom
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2bc8      	cmp	r3, #200	; 0xc8
 80018c2:	dd05      	ble.n	80018d0 <Istitlingdirection+0xac>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2bc8      	cmp	r3, #200	; 0xc8
 80018c8:	dd02      	ble.n	80018d0 <Istitlingdirection+0xac>
		flag = 5;
 80018ca:	2305      	movs	r3, #5
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e013      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((Tx < -150) && (Ty < -200)) {    //right - top
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80018d6:	da06      	bge.n	80018e6 <Istitlingdirection+0xc2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80018de:	da02      	bge.n	80018e6 <Istitlingdirection+0xc2>
		flag = 6;
 80018e0:	2306      	movs	r3, #6
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e008      	b.n	80018f8 <Istitlingdirection+0xd4>
	} else if ((Tx < -150) && (Ty > 200)) { // right -bottom
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f113 0f96 	cmn.w	r3, #150	; 0x96
 80018ec:	da04      	bge.n	80018f8 <Istitlingdirection+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2bc8      	cmp	r3, #200	; 0xc8
 80018f2:	dd01      	ble.n	80018f8 <Istitlingdirection+0xd4>
		flag = 7;
 80018f4:	2307      	movs	r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
	}

	return flag;
 80018f8:	68fb      	ldr	r3, [r7, #12]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000490 	.word	0x20000490

0800190c <intialise_ball_starting_pos>:

/**
 * initialise a ball position and create it when the sensor is lay still
 * the sensor is in the 1 G circumstance
 */
void intialise_ball_starting_pos(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	uint8_t startingPosition[2] = { START_POSITION_COL, START_POSITION_RAW };
 8001912:	2300      	movs	r3, #0
 8001914:	80bb      	strh	r3, [r7, #4]
	if (Is_One_G() && IsNotMoving()) {
 8001916:	f7ff ff35 	bl	8001784 <Is_One_G>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <intialise_ball_starting_pos+0x2c>
 8001920:	f7ff ff5a 	bl	80017d8 <IsNotMoving>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <intialise_ball_starting_pos+0x2c>
		LCD_Create_Ball(startingPosition[0], startingPosition[1], BALL_SIZE);
 800192a:	793b      	ldrb	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	797b      	ldrb	r3, [r7, #5]
 8001930:	2202      	movs	r2, #2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff fd1e 	bl	8001374 <LCD_Create_Ball>
	}
	record_coord[0] = START_POSITION_COL;
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <intialise_ball_starting_pos+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	record_coord[1] = START_POSITION_RAW;
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <intialise_ball_starting_pos+0x40>)
 8001940:	2200      	movs	r2, #0
 8001942:	705a      	strb	r2, [r3, #1]
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000898 	.word	0x20000898

08001950 <tilting>:

/**
 * moving ball
 */
void tilting(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	if (Istitlingdirection() == 0) {
 8001954:	f7ff ff66 	bl	8001824 <Istitlingdirection>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10e      	bne.n	800197c <tilting+0x2c>
		moving_ball_horizontal_left();
 800195e:	f7ff fd57 	bl	8001410 <moving_ball_horizontal_left>
		HAL_Delay(BALL_DELAY);
 8001962:	2032      	movs	r0, #50	; 0x32
 8001964:	f001 ff3a 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001968:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <tilting+0x174>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <tilting+0x174>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	2202      	movs	r2, #2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff fd31 	bl	80013dc <LCD_Clean_Ball>
	} else {
		LCD_Create_Ball(record_coord[0], record_coord[1], BALL_SIZE);
		HAL_Delay(BALL_DELAY);
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
	}
}
 800197a:	e0a0      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 1) {
 800197c:	f7ff ff52 	bl	8001824 <Istitlingdirection>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10e      	bne.n	80019a4 <tilting+0x54>
		moving_ball_horizontal_right();
 8001986:	f7ff fd71 	bl	800146c <moving_ball_horizontal_right>
		HAL_Delay(BALL_DELAY);
 800198a:	2032      	movs	r0, #50	; 0x32
 800198c:	f001 ff26 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <tilting+0x174>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <tilting+0x174>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2202      	movs	r2, #2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff fd1d 	bl	80013dc <LCD_Clean_Ball>
}
 80019a2:	e08c      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 2) {
 80019a4:	f7ff ff3e 	bl	8001824 <Istitlingdirection>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d10e      	bne.n	80019cc <tilting+0x7c>
		moving_ball_vertical_up();
 80019ae:	f7ff fd91 	bl	80014d4 <moving_ball_vertical_up>
		HAL_Delay(BALL_DELAY);
 80019b2:	2032      	movs	r0, #50	; 0x32
 80019b4:	f001 ff12 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <tilting+0x174>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <tilting+0x174>)
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff fd09 	bl	80013dc <LCD_Clean_Ball>
}
 80019ca:	e078      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 3) {
 80019cc:	f7ff ff2a 	bl	8001824 <Istitlingdirection>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d10e      	bne.n	80019f4 <tilting+0xa4>
		moving_ball_vertical_down();
 80019d6:	f7ff fdab 	bl	8001530 <moving_ball_vertical_down>
		HAL_Delay(BALL_DELAY);
 80019da:	2032      	movs	r0, #50	; 0x32
 80019dc:	f001 fefe 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <tilting+0x174>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <tilting+0x174>)
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff fcf5 	bl	80013dc <LCD_Clean_Ball>
}
 80019f2:	e064      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 4) {
 80019f4:	f7ff ff16 	bl	8001824 <Istitlingdirection>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d10e      	bne.n	8001a1c <tilting+0xcc>
		moving_ball_left_top();
 80019fe:	f7ff fdcb 	bl	8001598 <moving_ball_left_top>
		HAL_Delay(BALL_DELAY);
 8001a02:	2032      	movs	r0, #50	; 0x32
 8001a04:	f001 feea 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <tilting+0x174>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <tilting+0x174>)
 8001a10:	785b      	ldrb	r3, [r3, #1]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff fce1 	bl	80013dc <LCD_Clean_Ball>
}
 8001a1a:	e050      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 5) {
 8001a1c:	f7ff ff02 	bl	8001824 <Istitlingdirection>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d10e      	bne.n	8001a44 <tilting+0xf4>
		moving_ball_left_bottom();
 8001a26:	f7ff fded 	bl	8001604 <moving_ball_left_bottom>
		HAL_Delay(BALL_DELAY);
 8001a2a:	2032      	movs	r0, #50	; 0x32
 8001a2c:	f001 fed6 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <tilting+0x174>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <tilting+0x174>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fccd 	bl	80013dc <LCD_Clean_Ball>
}
 8001a42:	e03c      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 6) {
 8001a44:	f7ff feee 	bl	8001824 <Istitlingdirection>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d10e      	bne.n	8001a6c <tilting+0x11c>
		moving_ball_right_top();
 8001a4e:	f7ff fe17 	bl	8001680 <moving_ball_right_top>
		HAL_Delay(BALL_DELAY);
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f001 fec2 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <tilting+0x174>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <tilting+0x174>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff fcb9 	bl	80013dc <LCD_Clean_Ball>
}
 8001a6a:	e028      	b.n	8001abe <tilting+0x16e>
	} else if (Istitlingdirection() == 7) {
 8001a6c:	f7ff feda 	bl	8001824 <Istitlingdirection>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b07      	cmp	r3, #7
 8001a74:	d10e      	bne.n	8001a94 <tilting+0x144>
		moving_ball_right_bottom();
 8001a76:	f7ff fe41 	bl	80016fc <moving_ball_right_bottom>
		HAL_Delay(BALL_DELAY);
 8001a7a:	2032      	movs	r0, #50	; 0x32
 8001a7c:	f001 feae 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <tilting+0x174>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <tilting+0x174>)
 8001a88:	785b      	ldrb	r3, [r3, #1]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff fca5 	bl	80013dc <LCD_Clean_Ball>
}
 8001a92:	e014      	b.n	8001abe <tilting+0x16e>
		LCD_Create_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <tilting+0x174>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <tilting+0x174>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff fc67 	bl	8001374 <LCD_Create_Ball>
		HAL_Delay(BALL_DELAY);
 8001aa6:	2032      	movs	r0, #50	; 0x32
 8001aa8:	f001 fe98 	bl	80037dc <HAL_Delay>
		LCD_Clean_Ball(record_coord[0], record_coord[1], BALL_SIZE);
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <tilting+0x174>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <tilting+0x174>)
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff fc8f 	bl	80013dc <LCD_Clean_Ball>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000898 	.word	0x20000898

08001ac8 <delay_Init>:
 */
#include "main.h"

TIM_HandleTypeDef htim1;

void delay_Init(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <delay_Init+0x10>)
 8001ace:	f003 fdb1 	bl	8005634 <HAL_TIM_Base_Start>
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000900 	.word	0x20000900

08001adc <delay_us>:
 * each count takes 1 us, and therefore the counter will keep counting in microseconds until the input value has reached.
 * Once it happens, the control will come out of the loop, and we have had achieved the delay.
 *
 * from: https://controllerstech.com/create-1-microsecond-delay-stm32/
 */
void delay_us(uint16_t us) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <delay_us+0x30>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8001aee:	bf00      	nop
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <delay_us+0x30>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3f9      	bcc.n	8001af0 <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter

}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000900 	.word	0x20000900

08001b10 <isBallReachGoal>:
#include "delay.h"
#include "procedure.h"

UART_HandleTypeDef huart2;

int isBallReachGoal(int level) {
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

	int goal = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d87e      	bhi.n	8001c20 <isBallReachGoal+0x110>
 8001b22:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <isBallReachGoal+0x18>)
 8001b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b73 	.word	0x08001b73
 8001b30:	08001bad 	.word	0x08001bad
 8001b34:	08001be7 	.word	0x08001be7

	switch (level) {
	case 0:
		if ((record_coord[0] >= exit_1[0] && record_coord[0] <= exit_1[2]
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <isBallReachGoal+0x134>)
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <isBallReachGoal+0x138>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d370      	bcc.n	8001c26 <isBallReachGoal+0x116>
 8001b44:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <isBallReachGoal+0x134>)
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <isBallReachGoal+0x138>)
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d86a      	bhi.n	8001c26 <isBallReachGoal+0x116>
				&& record_coord[1] >= exit_1[1]
 8001b50:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <isBallReachGoal+0x134>)
 8001b52:	785a      	ldrb	r2, [r3, #1]
 8001b54:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <isBallReachGoal+0x138>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d364      	bcc.n	8001c26 <isBallReachGoal+0x116>
				&& record_coord[1] <= (exit_1[1] + 7))) {
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <isBallReachGoal+0x134>)
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <isBallReachGoal+0x138>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	3307      	adds	r3, #7
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dc5c      	bgt.n	8001c26 <isBallReachGoal+0x116>
			goal = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001b70:	e059      	b.n	8001c26 <isBallReachGoal+0x116>

	case 1:
		if ((record_coord[0] >= exit_2[0] && record_coord[0] <= exit_2[2]
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <isBallReachGoal+0x134>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <isBallReachGoal+0x13c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d355      	bcc.n	8001c2a <isBallReachGoal+0x11a>
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <isBallReachGoal+0x134>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <isBallReachGoal+0x13c>)
 8001b84:	789b      	ldrb	r3, [r3, #2]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d84f      	bhi.n	8001c2a <isBallReachGoal+0x11a>
				&& record_coord[1] >= exit_2[1]
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <isBallReachGoal+0x134>)
 8001b8c:	785a      	ldrb	r2, [r3, #1]
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <isBallReachGoal+0x13c>)
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d349      	bcc.n	8001c2a <isBallReachGoal+0x11a>
				&& record_coord[1] <= (exit_2[1] + 7))) {
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <isBallReachGoal+0x134>)
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <isBallReachGoal+0x13c>)
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	3307      	adds	r3, #7
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dc41      	bgt.n	8001c2a <isBallReachGoal+0x11a>
			goal = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001baa:	e03e      	b.n	8001c2a <isBallReachGoal+0x11a>

	case 2:
		if ((record_coord[0] >= exit_3[0] && record_coord[0] <= exit_3[2]
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <isBallReachGoal+0x134>)
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <isBallReachGoal+0x140>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d33a      	bcc.n	8001c2e <isBallReachGoal+0x11e>
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <isBallReachGoal+0x134>)
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <isBallReachGoal+0x140>)
 8001bbe:	789b      	ldrb	r3, [r3, #2]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d834      	bhi.n	8001c2e <isBallReachGoal+0x11e>
				&& record_coord[1] <= (exit_3[0] + 7)
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <isBallReachGoal+0x134>)
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <isBallReachGoal+0x140>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dc2c      	bgt.n	8001c2e <isBallReachGoal+0x11e>
				&& record_coord[1] >= exit_3[1])) {
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <isBallReachGoal+0x134>)
 8001bd6:	785a      	ldrb	r2, [r3, #1]
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <isBallReachGoal+0x140>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d326      	bcc.n	8001c2e <isBallReachGoal+0x11e>
			goal = 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001be4:	e023      	b.n	8001c2e <isBallReachGoal+0x11e>

	case 3:
		if ((record_coord[0] >= exit_4[0] && record_coord[0] <= exit_4[2]
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <isBallReachGoal+0x134>)
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <isBallReachGoal+0x144>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d31f      	bcc.n	8001c32 <isBallReachGoal+0x122>
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <isBallReachGoal+0x134>)
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <isBallReachGoal+0x144>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d819      	bhi.n	8001c32 <isBallReachGoal+0x122>
				&& record_coord[1] >= exit_4[1]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <isBallReachGoal+0x134>)
 8001c00:	785a      	ldrb	r2, [r3, #1]
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <isBallReachGoal+0x144>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d313      	bcc.n	8001c32 <isBallReachGoal+0x122>
				&& record_coord[1] <= exit_4[1] + 7)) {
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <isBallReachGoal+0x134>)
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <isBallReachGoal+0x144>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	3307      	adds	r3, #7
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dc0b      	bgt.n	8001c32 <isBallReachGoal+0x122>
			goal = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
		}
		break;
 8001c1e:	e008      	b.n	8001c32 <isBallReachGoal+0x122>

	default:
		goal = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
		break;
 8001c24:	e006      	b.n	8001c34 <isBallReachGoal+0x124>
		break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <isBallReachGoal+0x124>
		break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <isBallReachGoal+0x124>
		break;
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <isBallReachGoal+0x124>
		break;
 8001c32:	bf00      	nop
	}

	return goal;
 8001c34:	68fb      	ldr	r3, [r7, #12]

}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000898 	.word	0x20000898
 8001c48:	200000f0 	.word	0x200000f0
 8001c4c:	200000f4 	.word	0x200000f4
 8001c50:	200000f8 	.word	0x200000f8
 8001c54:	200000fc 	.word	0x200000fc

08001c58 <checkingballCollision>:
/**
 *
 * maps[][] could be map_1 ,map_2, map_3, map_4
 * size = should be the size of the col of the current map.
 */
static int checkingballCollision(uint8_t maps[][4], int size) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	int collision = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	e094      	b.n	8001d96 <checkingballCollision+0x13e>
		if ((record_coord[0] >= maps[i][0] && record_coord[0] <= maps[i][2]
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <checkingballCollision+0x158>)
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	440b      	add	r3, r1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d31a      	bcc.n	8001cb4 <checkingballCollision+0x5c>
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <checkingballCollision+0x158>)
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	440b      	add	r3, r1
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d811      	bhi.n	8001cb4 <checkingballCollision+0x5c>
				&& record_coord[1] >= maps[i][1]
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <checkingballCollision+0x158>)
 8001c92:	785a      	ldrb	r2, [r3, #1]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d308      	bcc.n	8001cb4 <checkingballCollision+0x5c>
				&& record_coord[1] <= maps[i][3])
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <checkingballCollision+0x158>)
 8001ca4:	785a      	ldrb	r2, [r3, #1]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	440b      	add	r3, r1
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d96b      	bls.n	8001d8c <checkingballCollision+0x134>
				|| (record_coord[2] >= maps[i][0]
 8001cb4:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <checkingballCollision+0x158>)
 8001cb6:	789a      	ldrb	r2, [r3, #2]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	440b      	add	r3, r1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d31a      	bcc.n	8001cfc <checkingballCollision+0xa4>
						&& record_coord[2] <= maps[i][2]
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <checkingballCollision+0x158>)
 8001cc8:	789a      	ldrb	r2, [r3, #2]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	440b      	add	r3, r1
 8001cd2:	789b      	ldrb	r3, [r3, #2]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d811      	bhi.n	8001cfc <checkingballCollision+0xa4>
						&& record_coord[3] >= maps[i][1]
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <checkingballCollision+0x158>)
 8001cda:	78da      	ldrb	r2, [r3, #3]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d308      	bcc.n	8001cfc <checkingballCollision+0xa4>
						&& record_coord[3] <= maps[i][3])
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <checkingballCollision+0x158>)
 8001cec:	78da      	ldrb	r2, [r3, #3]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	440b      	add	r3, r1
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d947      	bls.n	8001d8c <checkingballCollision+0x134>
				|| (record_coord[0] >= maps[i][0]
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <checkingballCollision+0x158>)
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	440b      	add	r3, r1
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d31a      	bcc.n	8001d44 <checkingballCollision+0xec>
						&& record_coord[0] <= maps[i][2]
 8001d0e:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <checkingballCollision+0x158>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	440b      	add	r3, r1
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d811      	bhi.n	8001d44 <checkingballCollision+0xec>
						&& record_coord[3] >= maps[i][1]
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <checkingballCollision+0x158>)
 8001d22:	78da      	ldrb	r2, [r3, #3]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	440b      	add	r3, r1
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d308      	bcc.n	8001d44 <checkingballCollision+0xec>
						&& record_coord[3] <= maps[i][3])
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <checkingballCollision+0x158>)
 8001d34:	78da      	ldrb	r2, [r3, #3]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d923      	bls.n	8001d8c <checkingballCollision+0x134>
				|| (record_coord[2] >= maps[i][0]
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <checkingballCollision+0x158>)
 8001d46:	789a      	ldrb	r2, [r3, #2]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	440b      	add	r3, r1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d31c      	bcc.n	8001d90 <checkingballCollision+0x138>
						&& record_coord[2] <= maps[i][2]
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <checkingballCollision+0x158>)
 8001d58:	789a      	ldrb	r2, [r3, #2]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	440b      	add	r3, r1
 8001d62:	789b      	ldrb	r3, [r3, #2]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d813      	bhi.n	8001d90 <checkingballCollision+0x138>
						&& record_coord[1] >= maps[i][1]
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <checkingballCollision+0x158>)
 8001d6a:	785a      	ldrb	r2, [r3, #1]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	440b      	add	r3, r1
 8001d74:	785b      	ldrb	r3, [r3, #1]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d30a      	bcc.n	8001d90 <checkingballCollision+0x138>
						&& record_coord[1] <= maps[i][3])) {
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <checkingballCollision+0x158>)
 8001d7c:	785a      	ldrb	r2, [r3, #1]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	440b      	add	r3, r1
 8001d86:	78db      	ldrb	r3, [r3, #3]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d801      	bhi.n	8001d90 <checkingballCollision+0x138>
			collision = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++) {
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	f6ff af66 	blt.w	8001c6c <checkingballCollision+0x14>
		}
	}
	return collision;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000898 	.word	0x20000898

08001db4 <isTouchWall>:

int isTouchWall(int level) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	int Touch = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d822      	bhi.n	8001e0c <isTouchWall+0x58>
 8001dc6:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <isTouchWall+0x18>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001de9 	.word	0x08001de9
 8001dd4:	08001df5 	.word	0x08001df5
 8001dd8:	08001e01 	.word	0x08001e01

	switch (level) {
	case 0:
		Touch = checkingballCollision(map_1, LEN(map_1));
 8001ddc:	210c      	movs	r1, #12
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <isTouchWall+0x68>)
 8001de0:	f7ff ff3a 	bl	8001c58 <checkingballCollision>
 8001de4:	60f8      	str	r0, [r7, #12]
		break;
 8001de6:	e014      	b.n	8001e12 <isTouchWall+0x5e>
	case 1:
		Touch = checkingballCollision(map_2, LEN(map_2));
 8001de8:	210f      	movs	r1, #15
 8001dea:	480d      	ldr	r0, [pc, #52]	; (8001e20 <isTouchWall+0x6c>)
 8001dec:	f7ff ff34 	bl	8001c58 <checkingballCollision>
 8001df0:	60f8      	str	r0, [r7, #12]
		break;
 8001df2:	e00e      	b.n	8001e12 <isTouchWall+0x5e>
	case 2:
		Touch = checkingballCollision(map_3, LEN(map_3));
 8001df4:	210e      	movs	r1, #14
 8001df6:	480b      	ldr	r0, [pc, #44]	; (8001e24 <isTouchWall+0x70>)
 8001df8:	f7ff ff2e 	bl	8001c58 <checkingballCollision>
 8001dfc:	60f8      	str	r0, [r7, #12]
		break;
 8001dfe:	e008      	b.n	8001e12 <isTouchWall+0x5e>
	case 3:
		Touch = checkingballCollision(map_4, LEN(map_4));
 8001e00:	210e      	movs	r1, #14
 8001e02:	4809      	ldr	r0, [pc, #36]	; (8001e28 <isTouchWall+0x74>)
 8001e04:	f7ff ff28 	bl	8001c58 <checkingballCollision>
 8001e08:	60f8      	str	r0, [r7, #12]
		break;
 8001e0a:	e002      	b.n	8001e12 <isTouchWall+0x5e>
	default:
		Touch = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]

		break;
 8001e10:	bf00      	nop
	}

	return Touch;
 8001e12:	68fb      	ldr	r3, [r7, #12]

}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	20000044 	.word	0x20000044
 8001e24:	20000080 	.word	0x20000080
 8001e28:	200000b8 	.word	0x200000b8

08001e2c <allblack>:

void allblack(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

	for (int col = 0; col < 128; col++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e016      	b.n	8001e66 <allblack+0x3a>
		for (int raw = 0; raw < 64; raw++) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	e00d      	b.n	8001e5a <allblack+0x2e>

			LCD_draw_dot(col, raw, 1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	b2d1      	uxtb	r1, r2
 8001e46:	2201      	movs	r2, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f9d1 	bl	80011f0 <LCD_draw_dot>
			delay_us(50);
 8001e4e:	2032      	movs	r0, #50	; 0x32
 8001e50:	f7ff fe44 	bl	8001adc <delay_us>
		for (int raw = 0; raw < 64; raw++) {
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e5e:	ddee      	ble.n	8001e3e <allblack+0x12>
	for (int col = 0; col < 128; col++) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b7f      	cmp	r3, #127	; 0x7f
 8001e6a:	dde5      	ble.n	8001e38 <allblack+0xc>

		}
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <allwhite>:

void allwhite(void) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0

	for (int col = 0; col < 128; col++) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e016      	b.n	8001eb0 <allwhite+0x3a>
		for (int raw = 0; raw < 64; raw++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	e00d      	b.n	8001ea4 <allwhite+0x2e>

			LCD_draw_dot(col, raw, 0);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	b2d1      	uxtb	r1, r2
 8001e90:	2200      	movs	r2, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f9ac 	bl	80011f0 <LCD_draw_dot>
			delay_us(50);
 8001e98:	2032      	movs	r0, #50	; 0x32
 8001e9a:	f7ff fe1f 	bl	8001adc <delay_us>
		for (int raw = 0; raw < 64; raw++) {
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ea8:	ddee      	ble.n	8001e88 <allwhite+0x12>
	for (int col = 0; col < 128; col++) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3301      	adds	r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb4:	dde5      	ble.n	8001e82 <allwhite+0xc>

		}
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <ChangingScenery>:

void ChangingScenery(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	allblack();
 8001ec4:	f7ff ffb2 	bl	8001e2c <allblack>
	allwhite();
 8001ec8:	f7ff ffd5 	bl	8001e76 <allwhite>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <cal_score>:

int cal_score(int counter) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

	int minutes = counter / 1000;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <cal_score+0x4c>)
 8001edc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee0:	1192      	asrs	r2, r2, #6
 8001ee2:	17db      	asrs	r3, r3, #31
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	60fb      	str	r3, [r7, #12]

	if (minutes <= GAME_TIME_LIMIT) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b3c      	cmp	r3, #60	; 0x3c
 8001eec:	dc05      	bgt.n	8001efa <cal_score+0x2a>
		point = point + POINT_2;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <cal_score+0x50>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <cal_score+0x50>)
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e007      	b.n	8001f0a <cal_score+0x3a>
	} else if (minutes > GAME_TIME_LIMIT) {
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b3c      	cmp	r3, #60	; 0x3c
 8001efe:	dd04      	ble.n	8001f0a <cal_score+0x3a>
		point = point + POINT_1;
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <cal_score+0x50>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <cal_score+0x50>)
 8001f08:	6013      	str	r3, [r2, #0]
	}

	return point;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <cal_score+0x50>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	10624dd3 	.word	0x10624dd3
 8001f20:	200008a0 	.word	0x200008a0

08001f24 <LCD_Init>:
#define PAGE_ADDRESS 0xb8

// column (0~63) (0x40 ~ 0x7F)
#define COL_ADDRESS 0x40

void LCD_Init(void) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0

	RST_1();
 8001f28:	f000 f922 	bl	8002170 <RST_1>
	DI_0();
 8001f2c:	f000 f92c 	bl	8002188 <DI_0>
	RW_0();
 8001f30:	f000 f936 	bl	80021a0 <RW_0>
	EN_0();
 8001f34:	f000 f940 	bl	80021b8 <EN_0>
	delay_us(20);
 8001f38:	2014      	movs	r0, #20
 8001f3a:	f7ff fdcf 	bl	8001adc <delay_us>

	activate_CS1_CS2();
 8001f3e:	f000 f953 	bl	80021e8 <activate_CS1_CS2>
	LCD_WriteCommand(DIS_ON_REGISTER);
 8001f42:	203f      	movs	r0, #63	; 0x3f
 8001f44:	f000 f82e 	bl	8001fa4 <LCD_WriteCommand>
	LCD_WriteCommand(PAGE_ADDRESS);
 8001f48:	20b8      	movs	r0, #184	; 0xb8
 8001f4a:	f000 f82b 	bl	8001fa4 <LCD_WriteCommand>
	LCD_WriteCommand(COL_ADDRESS);
 8001f4e:	2040      	movs	r0, #64	; 0x40
 8001f50:	f000 f828 	bl	8001fa4 <LCD_WriteCommand>
	delay_us(20);
 8001f54:	2014      	movs	r0, #20
 8001f56:	f7ff fdc1 	bl	8001adc <delay_us>


}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	write_display_data();
 8001f6a:	f000 f94f 	bl	800220c <write_display_data>
	delay_us(20);
 8001f6e:	2014      	movs	r0, #20
 8001f70:	f7ff fdb4 	bl	8001adc <delay_us>

	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | data; //0xFF00 is the 1111 1111 0000 0000  Clean the lowest 8 bit
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <LCD_WriteData+0x40>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <LCD_WriteData+0x40>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	614b      	str	r3, [r1, #20]
											   // and store cmd data into output data register
	EN_1();
 8001f84:	f000 f924 	bl	80021d0 <EN_1>
	delay_us(20);
 8001f88:	2014      	movs	r0, #20
 8001f8a:	f7ff fda7 	bl	8001adc <delay_us>

	EN_0();
 8001f8e:	f000 f913 	bl	80021b8 <EN_0>
	delay_us(20);
 8001f92:	2014      	movs	r0, #20
 8001f94:	f7ff fda2 	bl	8001adc <delay_us>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020800 	.word	0x40020800

08001fa4 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t cmd) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]

	write_display_command();
 8001fae:	f000 f93f 	bl	8002230 <write_display_command>
	delay_us(20);
 8001fb2:	2014      	movs	r0, #20
 8001fb4:	f7ff fd92 	bl	8001adc <delay_us>

	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | cmd; //0xFF00 is the 1111 1111 0000 0000  Clean the lowest 8 bit
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <LCD_WriteCommand+0x40>)
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <LCD_WriteCommand+0x40>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	614b      	str	r3, [r1, #20]
											  // and store cmd data into output data register

	EN_1();
 8001fc8:	f000 f902 	bl	80021d0 <EN_1>
	delay_us(20);
 8001fcc:	2014      	movs	r0, #20
 8001fce:	f7ff fd85 	bl	8001adc <delay_us>

	EN_0();
 8001fd2:	f000 f8f1 	bl	80021b8 <EN_0>
	delay_us(20);
 8001fd6:	2014      	movs	r0, #20
 8001fd8:	f7ff fd80 	bl	8001adc <delay_us>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <LCD_CleanBoard>:

/**
 * Clear all the noise and set every pixel to 0.
 */
void LCD_CleanBoard(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	write_display_data();
 8001fee:	f000 f90d 	bl	800220c <write_display_data>
	for (int raw = 0; raw < 8; raw++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	e016      	b.n	8002026 <LCD_CleanBoard+0x3e>
		for (int col = 0; col < 128; col++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e00d      	b.n	800201a <LCD_CleanBoard+0x32>
			LCD_Set_Position(col, raw);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f815 	bl	8002038 <LCD_Set_Position>
			LCD_WriteData(ONE_PIXEL_OFF);
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff ffa6 	bl	8001f60 <LCD_WriteData>
		for (int col = 0; col < 128; col++) {
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b7f      	cmp	r3, #127	; 0x7f
 800201e:	ddee      	ble.n	8001ffe <LCD_CleanBoard+0x16>
	for (int raw = 0; raw < 8; raw++) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3301      	adds	r3, #1
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b07      	cmp	r3, #7
 800202a:	dde5      	ble.n	8001ff8 <LCD_CleanBoard+0x10>
		}
	}
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <LCD_Set_Position>:
/**
 * version 1: x: 0 ~ 127, y: 0 ~ 7
 * version 2: x: 0 ~ 127, y: 0 ~ 63 when the cal_page_address is being used.
 *
 */
void LCD_Set_Position(uint8_t col, uint8_t raw) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]

	if (col < 128 && raw < 64) {
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db21      	blt.n	8002094 <LCD_Set_Position+0x5c>
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	2b3f      	cmp	r3, #63	; 0x3f
 8002054:	d81e      	bhi.n	8002094 <LCD_Set_Position+0x5c>
		if (col >= 64) {
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b3f      	cmp	r3, #63	; 0x3f
 800205a:	d90c      	bls.n	8002076 <LCD_Set_Position+0x3e>
			rightSide_Screen();
 800205c:	f000 f90c 	bl	8002278 <rightSide_Screen>
			LCD_WriteCommand(PAGE_ADDRESS + raw); //Y Coordinate, page address
 8002060:	79bb      	ldrb	r3, [r7, #6]
 8002062:	3b48      	subs	r3, #72	; 0x48
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff9c 	bl	8001fa4 <LCD_WriteCommand>
			LCD_WriteCommand(COL_ADDRESS + (col - 64)); //X Coordinate,
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff98 	bl	8001fa4 <LCD_WriteCommand>
		if (col >= 64) {
 8002074:	e016      	b.n	80020a4 <LCD_Set_Position+0x6c>

		} else {
			leftSide_Screen();
 8002076:	f000 f8ed 	bl	8002254 <leftSide_Screen>
			LCD_WriteCommand(PAGE_ADDRESS + raw); //Y Coordinate, page address
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	3b48      	subs	r3, #72	; 0x48
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff8f 	bl	8001fa4 <LCD_WriteCommand>
			LCD_WriteCommand(COL_ADDRESS + col); //X Coordinate,
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	3340      	adds	r3, #64	; 0x40
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff89 	bl	8001fa4 <LCD_WriteCommand>
		if (col >= 64) {
 8002092:	e007      	b.n	80020a4 <LCD_Set_Position+0x6c>

		}
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "input out of range", 18,
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	2212      	movs	r2, #18
 800209a:	4904      	ldr	r1, [pc, #16]	; (80020ac <LCD_Set_Position+0x74>)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <LCD_Set_Position+0x78>)
 800209e:	f003 fdc0 	bl	8005c22 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
	}

}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	08007dd8 	.word	0x08007dd8
 80020b0:	200008bc 	.word	0x200008bc

080020b4 <cal_Page_address>:

/**
 * decide which raw
 *  0-63
 */
int cal_Page_address(int raw) {
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	int page = raw / 8;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da00      	bge.n	80020c4 <cal_Page_address+0x10>
 80020c2:	3307      	adds	r3, #7
 80020c4:	10db      	asrs	r3, r3, #3
 80020c6:	60fb      	str	r3, [r7, #12]
	return page;
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <cal_pixel_shifting>:

/**
 * decide how many shifting for one pixel
 */
static int cal_pixel_shifting(int raw) {
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	int shiftingnumber = raw % 8;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	425a      	negs	r2, r3
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	f002 0207 	and.w	r2, r2, #7
 80020ea:	bf58      	it	pl
 80020ec:	4253      	negpl	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
	return shiftingnumber;
 80020f0:	68fb      	ldr	r3, [r7, #12]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <cal_hex_of_shifting>:

/**
 * shifting one to the required position
 */
static uint8_t cal_hex_of_shifting(int shiftingnumber) {
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
	uint8_t data;
	data = 0x01 << shiftingnumber;
 8002106:	2201      	movs	r2, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	73fb      	strb	r3, [r7, #15]
	return data;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <cal_adding_previous_pixel_position>:

/**
 * add a new data of the position to the previous data
 */
uint8_t cal_adding_previous_pixel_position(uint8_t data, uint8_t raw) {
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	460a      	mov	r2, r1
 8002128:	71fb      	strb	r3, [r7, #7]
 800212a:	4613      	mov	r3, r2
 800212c:	71bb      	strb	r3, [r7, #6]
	data = data | cal_hex_of_shifting(cal_pixel_shifting(raw));
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ffd0 	bl	80020d6 <cal_pixel_shifting>
 8002136:	4603      	mov	r3, r0
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffe0 	bl	80020fe <cal_hex_of_shifting>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4313      	orrs	r3, r2
 8002146:	71fb      	strb	r3, [r7, #7]
	return data;
 8002148:	79fb      	ldrb	r3, [r7, #7]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <cal_vanish_previous_pixel_position>:

/**
 * vanish the previous position
 */
uint8_t cal_vanish_previous_pixel_position(uint8_t data) {
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
	data = data & ONE_PIXEL_OFF;
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
	return data;
 8002160:	79fb      	ldrb	r3, [r7, #7]
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <RST_1>:
#include "app.h"
#include "main.h"
/**
 *  reset =1
 */
void RST_1(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, RST_Pin, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217a:	4802      	ldr	r0, [pc, #8]	; (8002184 <RST_1+0x14>)
 800217c:	f001 fdbc 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020800 	.word	0x40020800

08002188 <DI_0>:

/**
 * 	DI = 0
 */
void DI_0(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, DI_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002192:	4802      	ldr	r0, [pc, #8]	; (800219c <DI_0+0x14>)
 8002194:	f001 fdb0 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40020800 	.word	0x40020800

080021a0 <RW_0>:

/**
 * RW = 0
 */
void RW_0(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, RW_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <RW_0+0x14>)
 80021ac:	f001 fda4 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40020800 	.word	0x40020800

080021b8 <EN_0>:

/**
 * EN = 0
 */
void EN_0(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, EN_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c2:	4802      	ldr	r0, [pc, #8]	; (80021cc <EN_0+0x14>)
 80021c4:	f001 fd98 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020800 	.word	0x40020800

080021d0 <EN_1>:

/**
 * EN = 1
 */
void EN_1(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, EN_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021da:	4802      	ldr	r0, [pc, #8]	; (80021e4 <EN_1+0x14>)
 80021dc:	f001 fd8c 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40020800 	.word	0x40020800

080021e8 <activate_CS1_CS2>:

/**
 * Activate CS1, CS2 Left and right side screen
 * CS1 = 1, CS2 = 1
 */
void activate_CS1_CS2(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, CS1_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <activate_CS1_CS2+0x20>)
 80021f4:	f001 fd80 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CS2_Pin, GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021fe:	4802      	ldr	r0, [pc, #8]	; (8002208 <activate_CS1_CS2+0x20>)
 8002200:	f001 fd7a 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020800 	.word	0x40020800

0800220c <write_display_data>:
 * DI = 1
 * RW = 0
 *
 * write display data operation
 */
void write_display_data(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, DI_Pin, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <write_display_data+0x20>)
 8002218:	f001 fd6e 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RW_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <write_display_data+0x20>)
 8002224:	f001 fd68 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020800 	.word	0x40020800

08002230 <write_display_command>:
 * DI = 0
 * RW = 0
 *
 * write display command operation
 */
void write_display_command(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, DI_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <write_display_command+0x20>)
 800223c:	f001 fd5c 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, RW_Pin, GPIO_PIN_RESET);
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002246:	4802      	ldr	r0, [pc, #8]	; (8002250 <write_display_command+0x20>)
 8002248:	f001 fd56 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40020800 	.word	0x40020800

08002254 <leftSide_Screen>:

/**
 * left side
 */
void leftSide_Screen(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, CS1_Pin, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <leftSide_Screen+0x20>)
 8002260:	f001 fd4a 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CS2_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226a:	4802      	ldr	r0, [pc, #8]	; (8002274 <leftSide_Screen+0x20>)
 800226c:	f001 fd44 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40020800 	.word	0x40020800

08002278 <rightSide_Screen>:

/**
 * right side
 */
void rightSide_Screen(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, CS1_Pin, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <rightSide_Screen+0x20>)
 8002284:	f001 fd38 	bl	8003cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CS2_Pin, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800228e:	4802      	ldr	r0, [pc, #8]	; (8002298 <rightSide_Screen+0x20>)
 8002290:	f001 fd32 	bl	8003cf8 <HAL_GPIO_WritePin>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40020800 	.word	0x40020800

0800229c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022a0:	f001 fa2a 	bl	80036f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022a4:	f000 f812 	bl	80022cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022a8:	f000 f924 	bl	80024f4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80022ac:	f000 f8f8 	bl	80024a0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80022b0:	f000 f878 	bl	80023a4 <MX_I2C1_Init>
	MX_TIM1_Init();
 80022b4:	f000 f8a4 	bl	8002400 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	delay_Init();
 80022b8:	f7ff fc06 	bl	8001ac8 <delay_Init>
	app_init();
 80022bc:	f7fe ff6c 	bl	8001198 <app_init>
	app_game();
 80022c0:	f7fe ff7e 	bl	80011c0 <app_game>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		app_loop();
 80022c4:	f7fe ff8c 	bl	80011e0 <app_loop>
 80022c8:	e7fc      	b.n	80022c4 <main+0x28>
	...

080022cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b094      	sub	sp, #80	; 0x50
 80022d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	2230      	movs	r2, #48	; 0x30
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 ff94 	bl	8006208 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	4b29      	ldr	r3, [pc, #164]	; (800239c <SystemClock_Config+0xd0>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <SystemClock_Config+0xd0>)
 80022fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <SystemClock_Config+0xd0>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <SystemClock_Config+0xd4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002318:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <SystemClock_Config+0xd4>)
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <SystemClock_Config+0xd4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800232c:	2302      	movs	r3, #2
 800232e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002330:	2301      	movs	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002334:	2310      	movs	r3, #16
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002338:	2302      	movs	r3, #2
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800233c:	2300      	movs	r3, #0
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002340:	2310      	movs	r3, #16
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002344:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800234a:	2304      	movs	r3, #4
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800234e:	2307      	movs	r3, #7
 8002350:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002352:	f107 0320 	add.w	r3, r7, #32
 8002356:	4618      	mov	r0, r3
 8002358:	f002 fca8 	bl	8004cac <HAL_RCC_OscConfig>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <SystemClock_Config+0x9a>
		Error_Handler();
 8002362:	f000 f93d 	bl	80025e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002366:	230f      	movs	r3, #15
 8002368:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236a:	2302      	movs	r3, #2
 800236c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002376:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f002 ff0a 	bl	800519c <HAL_RCC_ClockConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0xc6>
		Error_Handler();
 800238e:	f000 f927 	bl	80025e0 <Error_Handler>
	}
}
 8002392:	bf00      	nop
 8002394:	3750      	adds	r7, #80	; 0x50
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000

080023a4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <MX_I2C1_Init+0x54>)
 80023ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <MX_I2C1_Init+0x58>)
 80023b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023c6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_I2C1_Init+0x50>)
 80023e2:	f001 fca3 	bl	8003d2c <HAL_I2C_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80023ec:	f000 f8f8 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000948 	.word	0x20000948
 80023f8:	40005400 	.word	0x40005400
 80023fc:	000186a0 	.word	0x000186a0

08002400 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <MX_TIM1_Init+0x98>)
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <MX_TIM1_Init+0x9c>)
 8002420:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 84 - 1;
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <MX_TIM1_Init+0x98>)
 8002424:	2253      	movs	r2, #83	; 0x53
 8002426:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_TIM1_Init+0x98>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_TIM1_Init+0x98>)
 8002430:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002434:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <MX_TIM1_Init+0x98>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_TIM1_Init+0x98>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_TIM1_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002448:	4813      	ldr	r0, [pc, #76]	; (8002498 <MX_TIM1_Init+0x98>)
 800244a:	f003 f8a3 	bl	8005594 <HAL_TIM_Base_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM1_Init+0x58>
		Error_Handler();
 8002454:	f000 f8c4 	bl	80025e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	4619      	mov	r1, r3
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <MX_TIM1_Init+0x98>)
 8002466:	f003 f93f 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x74>
		Error_Handler();
 8002470:	f000 f8b6 	bl	80025e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_TIM1_Init+0x98>)
 8002482:	f003 fb13 	bl	8005aac <HAL_TIMEx_MasterConfigSynchronization>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800248c:	f000 f8a8 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000900 	.word	0x20000900
 800249c:	40010000 	.word	0x40010000

080024a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <MX_USART2_UART_Init+0x50>)
 80024a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024c6:	220c      	movs	r2, #12
 80024c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_USART2_UART_Init+0x4c>)
 80024d8:	f003 fb56 	bl	8005b88 <HAL_UART_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80024e2:	f000 f87d 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200008bc 	.word	0x200008bc
 80024f0:	40004400 	.word	0x40004400

080024f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <MX_GPIO_Init+0xe0>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <MX_GPIO_Init+0xe0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <MX_GPIO_Init+0xe0>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <MX_GPIO_Init+0xe0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800257a:	2200      	movs	r2, #0
 800257c:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8002580:	4815      	ldr	r0, [pc, #84]	; (80025d8 <MX_GPIO_Init+0xe4>)
 8002582:	f001 fbb9 	bl	8003cf8 <HAL_GPIO_WritePin>
			EN_Pin | DB0_Pin | DB1_Pin | DB2_Pin | DB3_Pin | DB4_Pin | DB5_Pin
					| DB6_Pin | DB7_Pin | CS1_Pin | CS2_Pin | RST_Pin | RW_Pin
					| DI_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2120      	movs	r1, #32
 800258a:	4814      	ldr	r0, [pc, #80]	; (80025dc <MX_GPIO_Init+0xe8>)
 800258c:	f001 fbb4 	bl	8003cf8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : EN_Pin DB0_Pin DB1_Pin DB2_Pin
	 DB3_Pin DB4_Pin DB5_Pin DB6_Pin
	 DB7_Pin CS1_Pin CS2_Pin RST_Pin
	 RW_Pin DI_Pin */
	GPIO_InitStruct.Pin = EN_Pin | DB0_Pin | DB1_Pin | DB2_Pin | DB3_Pin
 8002590:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002594:	617b      	str	r3, [r7, #20]
			| DB4_Pin | DB5_Pin | DB6_Pin | DB7_Pin | CS1_Pin | CS2_Pin
			| RST_Pin | RW_Pin | DI_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	480b      	ldr	r0, [pc, #44]	; (80025d8 <MX_GPIO_Init+0xe4>)
 80025aa:	f001 fa21 	bl	80039f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025ae:	2320      	movs	r3, #32
 80025b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_GPIO_Init+0xe8>)
 80025c6:	f001 fa13 	bl	80039f0 <HAL_GPIO_Init>

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020000 	.word	0x40020000

080025e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025e8:	e7fe      	b.n	80025e8 <Error_Handler+0x8>

080025ea <Create_rectangular>:
uint8_t exit_2[4] = { 120, 0, 127, 0 };
uint8_t exit_3[4] = { 96, 56, 103, 56 };
uint8_t exit_4[4] = { 120, 24, 127, 24 };

void Create_rectangular(uint8_t b_p_start_col, uint8_t b_p_start_raw,
		uint8_t b_p_end_col, uint8_t b_p_end_raw) {
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4604      	mov	r4, r0
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	4603      	mov	r3, r0
 80025fe:	71bb      	strb	r3, [r7, #6]
 8002600:	460b      	mov	r3, r1
 8002602:	717b      	strb	r3, [r7, #5]
 8002604:	4613      	mov	r3, r2
 8002606:	713b      	strb	r3, [r7, #4]

	for (uint8_t i = b_p_start_col; i <= b_p_end_col; i++) {
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e012      	b.n	8002634 <Create_rectangular+0x4a>

		for (uint8_t j = b_p_start_raw; j <= b_p_end_raw; j++) {
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	73bb      	strb	r3, [r7, #14]
 8002612:	e008      	b.n	8002626 <Create_rectangular+0x3c>

			LCD_draw_dot(i, j, 1);
 8002614:	7bb9      	ldrb	r1, [r7, #14]
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2201      	movs	r2, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fde8 	bl	80011f0 <LCD_draw_dot>
		for (uint8_t j = b_p_start_raw; j <= b_p_end_raw; j++) {
 8002620:	7bbb      	ldrb	r3, [r7, #14]
 8002622:	3301      	adds	r3, #1
 8002624:	73bb      	strb	r3, [r7, #14]
 8002626:	7bba      	ldrb	r2, [r7, #14]
 8002628:	793b      	ldrb	r3, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	d9f2      	bls.n	8002614 <Create_rectangular+0x2a>
	for (uint8_t i = b_p_start_col; i <= b_p_end_col; i++) {
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3301      	adds	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	797b      	ldrb	r3, [r7, #5]
 8002638:	429a      	cmp	r2, r3
 800263a:	d9e8      	bls.n	800260e <Create_rectangular+0x24>

		}
	}
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}

08002646 <Create_exit>:

void Create_exit(uint8_t cross_1_col, uint8_t cross_1_raw, uint8_t cross_2_col,
		uint8_t cross_2_raw) {
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	4604      	mov	r4, r0
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4623      	mov	r3, r4
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	4603      	mov	r3, r0
 800265a:	71bb      	strb	r3, [r7, #6]
 800265c:	460b      	mov	r3, r1
 800265e:	717b      	strb	r3, [r7, #5]
 8002660:	4613      	mov	r3, r2
 8002662:	713b      	strb	r3, [r7, #4]

	for (int i = 0; i < 8; i++) {
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e01e      	b.n	80026a8 <Create_exit+0x62>

		LCD_draw_dot(cross_1_col + i, cross_1_raw + i, 1);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4413      	add	r3, r2
 8002672:	b2d8      	uxtb	r0, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	79bb      	ldrb	r3, [r7, #6]
 800267a:	4413      	add	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2201      	movs	r2, #1
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fdb5 	bl	80011f0 <LCD_draw_dot>

		LCD_draw_dot(cross_2_col - i, cross_2_raw + i, 1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	797a      	ldrb	r2, [r7, #5]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	793b      	ldrb	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2201      	movs	r2, #1
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fda7 	bl	80011f0 <LCD_draw_dot>
	for (int i = 0; i < 8; i++) {
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	dddd      	ble.n	800266a <Create_exit+0x24>

	}

}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}

080026b8 <map1>:

void map1(void) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0

	for (int i = 0; i < LEN(map_1); i++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	e021      	b.n	8002708 <map1+0x50>

		Create_rectangular(map_1[i][0], map_1[i][1], map_1[i][2], map_1[i][3]);
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <map1+0x60>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <map1+0x60>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	7859      	ldrb	r1, [r3, #1]
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <map1+0x60>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	789a      	ldrb	r2, [r3, #2]
 80026e0:	4c0d      	ldr	r4, [pc, #52]	; (8002718 <map1+0x60>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4423      	add	r3, r4
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	f7ff ff7e 	bl	80025ea <Create_rectangular>

		Create_exit(exit_1[0], exit_1[1], exit_1[2], exit_1[3]);
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <map1+0x64>)
 80026f0:	7818      	ldrb	r0, [r3, #0]
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <map1+0x64>)
 80026f4:	7859      	ldrb	r1, [r3, #1]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <map1+0x64>)
 80026f8:	789a      	ldrb	r2, [r3, #2]
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <map1+0x64>)
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	f7ff ffa2 	bl	8002646 <Create_exit>
	for (int i = 0; i < LEN(map_1); i++) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3301      	adds	r3, #1
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b0b      	cmp	r3, #11
 800270c:	ddda      	ble.n	80026c4 <map1+0xc>
	}

}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	20000014 	.word	0x20000014
 800271c:	200000f0 	.word	0x200000f0

08002720 <map2>:

void map2(void) {
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0

	for (int i = 0; i < LEN(map_2); i++) {
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	e021      	b.n	8002770 <map2+0x50>

		Create_rectangular(map_2[i][0], map_2[i][1], map_2[i][2], map_2[i][3]);
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <map2+0x60>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <map2+0x60>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	7859      	ldrb	r1, [r3, #1]
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <map2+0x60>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	789a      	ldrb	r2, [r3, #2]
 8002748:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <map2+0x60>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4423      	add	r3, r4
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	f7ff ff4a 	bl	80025ea <Create_rectangular>

		Create_exit(exit_2[0], exit_2[1], exit_2[2], exit_2[3]);
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <map2+0x64>)
 8002758:	7818      	ldrb	r0, [r3, #0]
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <map2+0x64>)
 800275c:	7859      	ldrb	r1, [r3, #1]
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <map2+0x64>)
 8002760:	789a      	ldrb	r2, [r3, #2]
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <map2+0x64>)
 8002764:	78db      	ldrb	r3, [r3, #3]
 8002766:	f7ff ff6e 	bl	8002646 <Create_exit>
	for (int i = 0; i < LEN(map_2); i++) {
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3301      	adds	r3, #1
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b0e      	cmp	r3, #14
 8002774:	ddda      	ble.n	800272c <map2+0xc>
	}

}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	20000044 	.word	0x20000044
 8002784:	200000f4 	.word	0x200000f4

08002788 <map3>:

void map3(void) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0

	for (int i = 0; i < LEN(map_3); i++) {
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	e021      	b.n	80027d8 <map3+0x50>

		Create_rectangular(map_3[i][0], map_3[i][1], map_3[i][2], map_3[i][3]);
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <map3+0x60>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <map3+0x60>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	7859      	ldrb	r1, [r3, #1]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <map3+0x60>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	789a      	ldrb	r2, [r3, #2]
 80027b0:	4c0d      	ldr	r4, [pc, #52]	; (80027e8 <map3+0x60>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4423      	add	r3, r4
 80027b8:	78db      	ldrb	r3, [r3, #3]
 80027ba:	f7ff ff16 	bl	80025ea <Create_rectangular>

		Create_exit(exit_3[0], exit_3[1], exit_3[2], exit_3[3]);
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <map3+0x64>)
 80027c0:	7818      	ldrb	r0, [r3, #0]
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <map3+0x64>)
 80027c4:	7859      	ldrb	r1, [r3, #1]
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <map3+0x64>)
 80027c8:	789a      	ldrb	r2, [r3, #2]
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <map3+0x64>)
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	f7ff ff3a 	bl	8002646 <Create_exit>
	for (int i = 0; i < LEN(map_3); i++) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3301      	adds	r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b0d      	cmp	r3, #13
 80027dc:	ddda      	ble.n	8002794 <map3+0xc>
	}

}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	20000080 	.word	0x20000080
 80027ec:	200000f8 	.word	0x200000f8

080027f0 <map4>:

void map4(void) {
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0

	for (int i = 0; i < LEN(map_4); i++) {
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	e021      	b.n	8002840 <map4+0x50>

		Create_rectangular(map_4[i][0], map_4[i][1], map_4[i][2], map_4[i][3]);
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <map4+0x60>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <map4+0x60>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	7859      	ldrb	r1, [r3, #1]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <map4+0x60>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	789a      	ldrb	r2, [r3, #2]
 8002818:	4c0d      	ldr	r4, [pc, #52]	; (8002850 <map4+0x60>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4423      	add	r3, r4
 8002820:	78db      	ldrb	r3, [r3, #3]
 8002822:	f7ff fee2 	bl	80025ea <Create_rectangular>

		Create_exit(exit_4[0], exit_4[1], exit_4[2], exit_4[3]);
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <map4+0x64>)
 8002828:	7818      	ldrb	r0, [r3, #0]
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <map4+0x64>)
 800282c:	7859      	ldrb	r1, [r3, #1]
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <map4+0x64>)
 8002830:	789a      	ldrb	r2, [r3, #2]
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <map4+0x64>)
 8002834:	78db      	ldrb	r3, [r3, #3]
 8002836:	f7ff ff06 	bl	8002646 <Create_exit>
	for (int i = 0; i < LEN(map_4); i++) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3301      	adds	r3, #1
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b0d      	cmp	r3, #13
 8002844:	ddda      	ble.n	80027fc <map4+0xc>
	}

}
 8002846:	bf00      	nop
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	200000b8 	.word	0x200000b8
 8002854:	200000fc 	.word	0x200000fc

08002858 <MPU6050_init>:
float TY_raw;

static int lsb_sens = 16384 / 1000;    // LSB Sensitivity
static float rad_to_deg = 180 / M_PI;  // radius to degree

int MPU6050_init(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af04      	add	r7, sp, #16

	uint8_t check; //flag of checking
	uint8_t Data;  // the new number
	uint16_t error;

	error = HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDRESS, WHO_AM_I, 1, &check,
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2301      	movs	r3, #1
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	1d7b      	adds	r3, r7, #5
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	2275      	movs	r2, #117	; 0x75
 8002870:	21d0      	movs	r1, #208	; 0xd0
 8002872:	4844      	ldr	r0, [pc, #272]	; (8002984 <MPU6050_init+0x12c>)
 8002874:	f001 fc98 	bl	80041a8 <HAL_I2C_Mem_Read>
 8002878:	4603      	mov	r3, r0
 800287a:	80fb      	strh	r3, [r7, #6]
			1, 1000);

	if (error) {
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <MPU6050_init+0x38>
		HAL_UART_Transmit(&huart2, (uint8_t*) "error0", 6, HAL_MAX_DELAY);
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	2206      	movs	r2, #6
 8002888:	493f      	ldr	r1, [pc, #252]	; (8002988 <MPU6050_init+0x130>)
 800288a:	4840      	ldr	r0, [pc, #256]	; (800298c <MPU6050_init+0x134>)
 800288c:	f003 f9c9 	bl	8005c22 <HAL_UART_Transmit>
	}

	if (check == 104) {
 8002890:	797b      	ldrb	r3, [r7, #5]
 8002892:	2b68      	cmp	r3, #104	; 0x68
 8002894:	d16a      	bne.n	800296c <MPU6050_init+0x114>

		// set the sleep mode to 0 in order to activate the device
		Data = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	713b      	strb	r3, [r7, #4]
		error = HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS, PWR_MGMT_1, 1,
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	226b      	movs	r2, #107	; 0x6b
 80028ac:	21d0      	movs	r1, #208	; 0xd0
 80028ae:	4835      	ldr	r0, [pc, #212]	; (8002984 <MPU6050_init+0x12c>)
 80028b0:	f001 fb80 	bl	8003fb4 <HAL_I2C_Mem_Write>
 80028b4:	4603      	mov	r3, r0
 80028b6:	80fb      	strh	r3, [r7, #6]
				&Data, 1, 1000);

		if (error) {
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <MPU6050_init+0x76>
			HAL_UART_Transmit(&huart2, (uint8_t*) "error1", 6, HAL_MAX_DELAY);
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	2206      	movs	r2, #6
 80028c4:	4932      	ldr	r1, [pc, #200]	; (8002990 <MPU6050_init+0x138>)
 80028c6:	4831      	ldr	r0, [pc, #196]	; (800298c <MPU6050_init+0x134>)
 80028c8:	f003 f9ab 	bl	8005c22 <HAL_UART_Transmit>
 80028cc:	e006      	b.n	80028dc <MPU6050_init+0x84>
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) "PWR", 3, HAL_MAX_DELAY);
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	2203      	movs	r2, #3
 80028d4:	492f      	ldr	r1, [pc, #188]	; (8002994 <MPU6050_init+0x13c>)
 80028d6:	482d      	ldr	r0, [pc, #180]	; (800298c <MPU6050_init+0x134>)
 80028d8:	f003 f9a3 	bl	8005c22 <HAL_UART_Transmit>
		}

		// set up the configuration of the accelerometer
		// XA_ST=0, YA_ST=0, ZA_ST=0, AFS_SEL=0(+-2g)
		Data = 0x00;
 80028dc:	2300      	movs	r3, #0
 80028de:	713b      	strb	r3, [r7, #4]
		error = HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS, ACCEL_CONFIG, 1,
 80028e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	2301      	movs	r3, #1
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	221c      	movs	r2, #28
 80028f2:	21d0      	movs	r1, #208	; 0xd0
 80028f4:	4823      	ldr	r0, [pc, #140]	; (8002984 <MPU6050_init+0x12c>)
 80028f6:	f001 fb5d 	bl	8003fb4 <HAL_I2C_Mem_Write>
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
				&Data, 1, 1000);

		if (error) {
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <MPU6050_init+0xbc>
			HAL_UART_Transmit(&huart2, (uint8_t*) "error2", 6, HAL_MAX_DELAY);
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	2206      	movs	r2, #6
 800290a:	4923      	ldr	r1, [pc, #140]	; (8002998 <MPU6050_init+0x140>)
 800290c:	481f      	ldr	r0, [pc, #124]	; (800298c <MPU6050_init+0x134>)
 800290e:	f003 f988 	bl	8005c22 <HAL_UART_Transmit>
 8002912:	e006      	b.n	8002922 <MPU6050_init+0xca>
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) "ACC", 3, HAL_MAX_DELAY);
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	2203      	movs	r2, #3
 800291a:	4920      	ldr	r1, [pc, #128]	; (800299c <MPU6050_init+0x144>)
 800291c:	481b      	ldr	r0, [pc, #108]	; (800298c <MPU6050_init+0x134>)
 800291e:	f003 f980 	bl	8005c22 <HAL_UART_Transmit>

		}

		// Sample rate divider 1kHz for DLPF_CFG : 7
		Data = 0x07;
 8002922:	2307      	movs	r3, #7
 8002924:	713b      	strb	r3, [r7, #4]
		error = HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDRESS, SMPLRT_DIV, 1,
 8002926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	2301      	movs	r3, #1
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2301      	movs	r3, #1
 8002936:	2219      	movs	r2, #25
 8002938:	21d0      	movs	r1, #208	; 0xd0
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <MPU6050_init+0x12c>)
 800293c:	f001 fb3a 	bl	8003fb4 <HAL_I2C_Mem_Write>
 8002940:	4603      	mov	r3, r0
 8002942:	80fb      	strh	r3, [r7, #6]
				&Data, 1, 1000);
		if (error) {
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <MPU6050_init+0x102>
			HAL_UART_Transmit(&huart2, (uint8_t*) "error3", 6, HAL_MAX_DELAY);
 800294a:	f04f 33ff 	mov.w	r3, #4294967295
 800294e:	2206      	movs	r2, #6
 8002950:	4913      	ldr	r1, [pc, #76]	; (80029a0 <MPU6050_init+0x148>)
 8002952:	480e      	ldr	r0, [pc, #56]	; (800298c <MPU6050_init+0x134>)
 8002954:	f003 f965 	bl	8005c22 <HAL_UART_Transmit>
 8002958:	e006      	b.n	8002968 <MPU6050_init+0x110>
		} else {
			HAL_UART_Transmit(&huart2, (uint8_t*) "spl", 3, HAL_MAX_DELAY);
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	2203      	movs	r2, #3
 8002960:	4910      	ldr	r1, [pc, #64]	; (80029a4 <MPU6050_init+0x14c>)
 8002962:	480a      	ldr	r0, [pc, #40]	; (800298c <MPU6050_init+0x134>)
 8002964:	f003 f95d 	bl	8005c22 <HAL_UART_Transmit>

		}

		return 0;
 8002968:	2300      	movs	r3, #0
 800296a:	e007      	b.n	800297c <MPU6050_init+0x124>
	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*) "error4", 6,
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	2206      	movs	r2, #6
 8002972:	490d      	ldr	r1, [pc, #52]	; (80029a8 <MPU6050_init+0x150>)
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MPU6050_init+0x134>)
 8002976:	f003 f954 	bl	8005c22 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		return 1;
 800297a:	2301      	movs	r3, #1
	}
	return 0;
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000948 	.word	0x20000948
 8002988:	08007dec 	.word	0x08007dec
 800298c:	200008bc 	.word	0x200008bc
 8002990:	08007df4 	.word	0x08007df4
 8002994:	08007dfc 	.word	0x08007dfc
 8002998:	08007e00 	.word	0x08007e00
 800299c:	08007e08 	.word	0x08007e08
 80029a0:	08007e0c 	.word	0x08007e0c
 80029a4:	08007e14 	.word	0x08007e14
 80029a8:	08007e18 	.word	0x08007e18

080029ac <MPU6050_read_accel>:

void MPU6050_read_accel(void) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af04      	add	r7, sp, #16

	uint8_t buffer[6];
	uint16_t error;

	//initialise buffer to 0
	for (int i = 0; i < sizeof(buffer); i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e007      	b.n	80029c8 <MPU6050_read_accel+0x1c>
		buffer[i] = 0;
 80029b8:	1d3a      	adds	r2, r7, #4
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(buffer); i++)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d9f4      	bls.n	80029b8 <MPU6050_read_accel+0xc>

	error = HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDRESS, ACCEL_XOUT_H,
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2306      	movs	r3, #6
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2301      	movs	r3, #1
 80029de:	223b      	movs	r2, #59	; 0x3b
 80029e0:	21d0      	movs	r1, #208	; 0xd0
 80029e2:	4827      	ldr	r0, [pc, #156]	; (8002a80 <MPU6050_read_accel+0xd4>)
 80029e4:	f001 fbe0 	bl	80041a8 <HAL_I2C_Mem_Read>
 80029e8:	4603      	mov	r3, r0
 80029ea:	817b      	strh	r3, [r7, #10]
	I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);

	if (error) {
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d006      	beq.n	8002a00 <MPU6050_read_accel+0x54>
		HAL_UART_Transmit(&huart2, (uint8_t*) "error5", 6, HAL_MAX_DELAY);
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	2206      	movs	r2, #6
 80029f8:	4922      	ldr	r1, [pc, #136]	; (8002a84 <MPU6050_read_accel+0xd8>)
 80029fa:	4823      	ldr	r0, [pc, #140]	; (8002a88 <MPU6050_read_accel+0xdc>)
 80029fc:	f003 f911 	bl	8005c22 <HAL_UART_Transmit>
	}

	AX_raw = (int16_t) (buffer[0] << 8 | buffer[1]);
 8002a00:	793b      	ldrb	r3, [r7, #4]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	797b      	ldrb	r3, [r7, #5]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <MPU6050_read_accel+0xe0>)
 8002a10:	801a      	strh	r2, [r3, #0]
	AY_raw = (int16_t) (buffer[2] << 8 | buffer[3]);
 8002a12:	79bb      	ldrb	r3, [r7, #6]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <MPU6050_read_accel+0xe4>)
 8002a22:	801a      	strh	r2, [r3, #0]
	AZ_raw = (int16_t) (buffer[4] << 8 | buffer[5]);
 8002a24:	7a3b      	ldrb	r3, [r7, #8]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b21a      	sxth	r2, r3
 8002a2a:	7a7b      	ldrb	r3, [r7, #9]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b21a      	sxth	r2, r3
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <MPU6050_read_accel+0xe8>)
 8002a34:	801a      	strh	r2, [r3, #0]

	AX = (int16_t) ((AX_raw / lsb_sens));
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <MPU6050_read_accel+0xe0>)
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <MPU6050_read_accel+0xec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MPU6050_read_accel+0xf0>)
 8002a4a:	801a      	strh	r2, [r3, #0]
	AY = (int16_t) ((AY_raw / lsb_sens));
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MPU6050_read_accel+0xe4>)
 8002a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MPU6050_read_accel+0xec>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a5c:	b21a      	sxth	r2, r3
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <MPU6050_read_accel+0xf4>)
 8002a60:	801a      	strh	r2, [r3, #0]
	AZ = (int16_t) ((AZ_raw / lsb_sens));
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MPU6050_read_accel+0xe8>)
 8002a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MPU6050_read_accel+0xec>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MPU6050_read_accel+0xf8>)
 8002a76:	801a      	strh	r2, [r3, #0]

}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20000948 	.word	0x20000948
 8002a84:	08007e20 	.word	0x08007e20
 8002a88:	200008bc 	.word	0x200008bc
 8002a8c:	2000099c 	.word	0x2000099c
 8002a90:	200009a8 	.word	0x200009a8
 8002a94:	2000099e 	.word	0x2000099e
 8002a98:	20000100 	.word	0x20000100
 8002a9c:	200009b6 	.word	0x200009b6
 8002aa0:	200009a0 	.word	0x200009a0
 8002aa4:	200009ac 	.word	0x200009ac

08002aa8 <MPU6050_tilt_angle>:

void MPU6050_tilt_angle(void) {
 8002aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aac:	af00      	add	r7, sp, #0

	TX_raw = (float) (atan(AX_raw / sqrt(pow(AY_raw, 2) + pow(AZ_raw, 2))));
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <MPU6050_tilt_angle+0x1a0>)
 8002ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd3d 	bl	8000534 <__aeabi_i2d>
 8002aba:	4604      	mov	r4, r0
 8002abc:	460d      	mov	r5, r1
 8002abe:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <MPU6050_tilt_angle+0x1a4>)
 8002ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd35 	bl	8000534 <__aeabi_i2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8002c40 <MPU6050_tilt_angle+0x198>
 8002ad2:	ec43 2b10 	vmov	d0, r2, r3
 8002ad6:	f004 f979 	bl	8006dcc <pow>
 8002ada:	ec59 8b10 	vmov	r8, r9, d0
 8002ade:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <MPU6050_tilt_angle+0x1a8>)
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fd25 	bl	8000534 <__aeabi_i2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8002c40 <MPU6050_tilt_angle+0x198>
 8002af2:	ec43 2b10 	vmov	d0, r2, r3
 8002af6:	f004 f969 	bl	8006dcc <pow>
 8002afa:	ec53 2b10 	vmov	r2, r3, d0
 8002afe:	4640      	mov	r0, r8
 8002b00:	4649      	mov	r1, r9
 8002b02:	f7fd fbcb 	bl	800029c <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	ec43 2b17 	vmov	d7, r2, r3
 8002b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b12:	eef0 0a67 	vmov.f32	s1, s15
 8002b16:	f004 fa07 	bl	8006f28 <sqrt>
 8002b1a:	ec53 2b10 	vmov	r2, r3, d0
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f7fd fe9b 	bl	800085c <__aeabi_ddiv>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	ec43 2b17 	vmov	d7, r2, r3
 8002b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b32:	eef0 0a67 	vmov.f32	s1, s15
 8002b36:	f003 ff9f 	bl	8006a78 <atan>
 8002b3a:	ec53 2b10 	vmov	r2, r3, d0
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f811 	bl	8000b68 <__aeabi_d2f>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <MPU6050_tilt_angle+0x1ac>)
 8002b4a:	6013      	str	r3, [r2, #0]
	TY_raw = (float) (atan(AY_raw / sqrt(pow(AX_raw, 2) + pow(AZ_raw, 2))));
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <MPU6050_tilt_angle+0x1a4>)
 8002b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcee 	bl	8000534 <__aeabi_i2d>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460d      	mov	r5, r1
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <MPU6050_tilt_angle+0x1a0>)
 8002b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fce6 	bl	8000534 <__aeabi_i2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8002c40 <MPU6050_tilt_angle+0x198>
 8002b70:	ec43 2b10 	vmov	d0, r2, r3
 8002b74:	f004 f92a 	bl	8006dcc <pow>
 8002b78:	ec59 8b10 	vmov	r8, r9, d0
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <MPU6050_tilt_angle+0x1a8>)
 8002b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fcd6 	bl	8000534 <__aeabi_i2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002c40 <MPU6050_tilt_angle+0x198>
 8002b90:	ec43 2b10 	vmov	d0, r2, r3
 8002b94:	f004 f91a 	bl	8006dcc <pow>
 8002b98:	ec53 2b10 	vmov	r2, r3, d0
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	f7fd fb7c 	bl	800029c <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	ec43 2b17 	vmov	d7, r2, r3
 8002bac:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb0:	eef0 0a67 	vmov.f32	s1, s15
 8002bb4:	f004 f9b8 	bl	8006f28 <sqrt>
 8002bb8:	ec53 2b10 	vmov	r2, r3, d0
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fe4c 	bl	800085c <__aeabi_ddiv>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	ec43 2b17 	vmov	d7, r2, r3
 8002bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd0:	eef0 0a67 	vmov.f32	s1, s15
 8002bd4:	f003 ff50 	bl	8006a78 <atan>
 8002bd8:	ec53 2b10 	vmov	r2, r3, d0
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fd ffc2 	bl	8000b68 <__aeabi_d2f>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <MPU6050_tilt_angle+0x1b0>)
 8002be8:	6013      	str	r3, [r2, #0]

	TX = (int) (TX_raw * rad_to_deg * 10);
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <MPU6050_tilt_angle+0x1ac>)
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MPU6050_tilt_angle+0x1b4>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c06:	ee17 3a90 	vmov	r3, s15
 8002c0a:	b21a      	sxth	r2, r3
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <MPU6050_tilt_angle+0x1b8>)
 8002c0e:	801a      	strh	r2, [r3, #0]
	TY = (int) (TY_raw * rad_to_deg * 10);
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MPU6050_tilt_angle+0x1b0>)
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MPU6050_tilt_angle+0x1b4>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2c:	ee17 3a90 	vmov	r3, s15
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <MPU6050_tilt_angle+0x1bc>)
 8002c34:	801a      	strh	r2, [r3, #0]

}
 8002c36:	bf00      	nop
 8002c38:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c3c:	f3af 8000 	nop.w
 8002c40:	00000000 	.word	0x00000000
 8002c44:	40000000 	.word	0x40000000
 8002c48:	2000099c 	.word	0x2000099c
 8002c4c:	200009a8 	.word	0x200009a8
 8002c50:	2000099e 	.word	0x2000099e
 8002c54:	200009b0 	.word	0x200009b0
 8002c58:	200009a4 	.word	0x200009a4
 8002c5c:	20000104 	.word	0x20000104
 8002c60:	200009b4 	.word	0x200009b4
 8002c64:	200009aa 	.word	0x200009aa

08002c68 <startGame>:

/**
 * start game with one of the maps.
 * By comparing the map name with the given name, and decide it.
 */
static void startGame(int name) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

	if (name == 1) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <startGame+0x14>
		map1();
 8002c76:	f7ff fd1f 	bl	80026b8 <map1>
	} else if (name == 3) {
		map3();
	} else if (name == 4) {
		map4();
	}
}
 8002c7a:	e010      	b.n	8002c9e <startGame+0x36>
	} else if (name == 2) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d102      	bne.n	8002c88 <startGame+0x20>
		map2();
 8002c82:	f7ff fd4d 	bl	8002720 <map2>
}
 8002c86:	e00a      	b.n	8002c9e <startGame+0x36>
	} else if (name == 3) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d102      	bne.n	8002c94 <startGame+0x2c>
		map3();
 8002c8e:	f7ff fd7b 	bl	8002788 <map3>
}
 8002c92:	e004      	b.n	8002c9e <startGame+0x36>
	} else if (name == 4) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d101      	bne.n	8002c9e <startGame+0x36>
		map4();
 8002c9a:	f7ff fda9 	bl	80027f0 <map4>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <counter_start>:

/**
 *  start internal clock
 */
static void counter_start(void) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	start_time = HAL_GetTick();
 8002cac:	f000 fd8a 	bl	80037c4 <HAL_GetTick>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <counter_start+0x14>)
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200008a4 	.word	0x200008a4

08002cc0 <counter_getCount>:

/**
 * minus current time and get the difference of the time
 */
static uint32_t counter_getCount(void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0

	return HAL_GetTick() - start_time;
 8002cc4:	f000 fd7e 	bl	80037c4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <counter_getCount+0x14>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1ad3      	subs	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200008a4 	.word	0x200008a4

08002cd8 <playgame>:

void playgame(int level) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	// start with the current map.
	startGame(mapsArray[level]);
 8002ce0:	4a06      	ldr	r2, [pc, #24]	; (8002cfc <playgame+0x24>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ffbd 	bl	8002c68 <startGame>

	// start counter
	counter_start();
 8002cee:	f7ff ffdb 	bl	8002ca8 <counter_start>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000010 	.word	0x20000010

08002d00 <gameRunning>:

void gameRunning() {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0

	tilting();
 8002d04:	f7fe fe24 	bl	8001950 <tilting>

	//get time millisecond in every round
	counter = counter_getCount();
 8002d08:	f7ff ffda 	bl	8002cc0 <counter_getCount>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <gameRunning+0xc4>)
 8002d10:	6013      	str	r3, [r2, #0]

	if (isTouchWall(level) == 1) {
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <gameRunning+0xc8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f84c 	bl	8001db4 <isTouchWall>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d11a      	bne.n	8002d58 <gameRunning+0x58>

		// restart from first map
		level = 0;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <gameRunning+0xc8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

		tempscore = point;
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <gameRunning+0xcc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <gameRunning+0xd0>)
 8002d2e:	6013      	str	r3, [r2, #0]
		point = tempscore + 0;
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <gameRunning+0xd0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <gameRunning+0xcc>)
 8002d36:	6013      	str	r3, [r2, #0]

		allwhite();
 8002d38:	f7ff f89d 	bl	8001e76 <allwhite>

		failureScore(point);
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <gameRunning+0xcc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 faab 	bl	800329c <failureScore>
		HAL_Delay(2000);
 8002d46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d4a:	f000 fd47 	bl	80037dc <HAL_Delay>

		// reset point to 0
		point = 0;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <gameRunning+0xcc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

		app_game();
 8002d54:	f7fe fa34 	bl	80011c0 <app_game>
	}

	if (isBallReachGoal(level) == 1) {
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <gameRunning+0xc8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fed7 	bl	8001b10 <isBallReachGoal>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d12a      	bne.n	8002dbe <gameRunning+0xbe>

		//depends on the time and decide the point player will get
		point = cal_score(counter);
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <gameRunning+0xc4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f8af 	bl	8001ed0 <cal_score>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <gameRunning+0xcc>)
 8002d76:	6013      	str	r3, [r2, #0]

		ChangingScenery();
 8002d78:	f7ff f8a2 	bl	8001ec0 <ChangingScenery>
		HAL_Delay(1000);
 8002d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d80:	f000 fd2c 	bl	80037dc <HAL_Delay>

		if (level >= 3) {
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <gameRunning+0xc8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	dd11      	ble.n	8002db0 <gameRunning+0xb0>

			//if level is the last level then clear to 0.
			level = 0;
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <gameRunning+0xc8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

			goalScore(point);
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <gameRunning+0xcc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa8f 	bl	80032ba <goalScore>
			HAL_Delay(2000);
 8002d9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002da0:	f000 fd1c 	bl	80037dc <HAL_Delay>

			// reset point to 0
			point = 0;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <gameRunning+0xcc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
			app_game();
 8002daa:	f7fe fa09 	bl	80011c0 <app_game>
			level++;

			app_game();
		}
	}
}
 8002dae:	e006      	b.n	8002dbe <gameRunning+0xbe>
			level++;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <gameRunning+0xc8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <gameRunning+0xc8>)
 8002db8:	6013      	str	r3, [r2, #0]
			app_game();
 8002dba:	f7fe fa01 	bl	80011c0 <app_game>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200009b8 	.word	0x200009b8
 8002dc8:	2000089c 	.word	0x2000089c
 8002dcc:	200008a0 	.word	0x200008a0
 8002dd0:	200008a8 	.word	0x200008a8

08002dd4 <create_V>:

static uint8_t eight[7][4] = { { 85, 36, 90, 36 }, { 85, 36, 85, 39 }, { 85, 39,
		90, 39 }, { 90, 39, 90, 42 }, { 85, 42, 90, 42 }, { 85, 39, 85, 42 }, {
		90, 36, 90, 39 } };

static void create_V(void) {
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(v); i++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	e017      	b.n	8002e10 <create_V+0x3c>
		Create_rectangular(v[i][0], v[i][1], v[i][2], v[i][3]);
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <create_V+0x88>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <create_V+0x88>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	7859      	ldrb	r1, [r3, #1]
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <create_V+0x88>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	789a      	ldrb	r2, [r3, #2]
 8002dfc:	4c17      	ldr	r4, [pc, #92]	; (8002e5c <create_V+0x88>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4423      	add	r3, r4
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	f7ff fbf0 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(v); i++) {
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	dde4      	ble.n	8002de0 <create_V+0xc>
	}

	LCD_draw_dot(80, 16, 1);
 8002e16:	2201      	movs	r2, #1
 8002e18:	2110      	movs	r1, #16
 8002e1a:	2050      	movs	r0, #80	; 0x50
 8002e1c:	f7fe f9e8 	bl	80011f0 <LCD_draw_dot>
	LCD_draw_dot(81, 17, 1);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2111      	movs	r1, #17
 8002e24:	2051      	movs	r0, #81	; 0x51
 8002e26:	f7fe f9e3 	bl	80011f0 <LCD_draw_dot>
	LCD_draw_dot(82, 18, 1);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2112      	movs	r1, #18
 8002e2e:	2052      	movs	r0, #82	; 0x52
 8002e30:	f7fe f9de 	bl	80011f0 <LCD_draw_dot>
	LCD_draw_dot(85, 16, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2110      	movs	r1, #16
 8002e38:	2055      	movs	r0, #85	; 0x55
 8002e3a:	f7fe f9d9 	bl	80011f0 <LCD_draw_dot>
	LCD_draw_dot(84, 17, 1);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2111      	movs	r1, #17
 8002e42:	2054      	movs	r0, #84	; 0x54
 8002e44:	f7fe f9d4 	bl	80011f0 <LCD_draw_dot>
	LCD_draw_dot(83, 18, 1);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2112      	movs	r1, #18
 8002e4c:	2053      	movs	r0, #83	; 0x53
 8002e4e:	f7fe f9cf 	bl	80011f0 <LCD_draw_dot>

}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000180 	.word	0x20000180

08002e60 <create_Gameover>:

static void create_Gameover(void) {
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0

	for (int i = 0; i < LEN(Gameover); i++) {
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	e017      	b.n	8002e9c <create_Gameover+0x3c>
		Create_rectangular(Gameover[i][0], Gameover[i][1], Gameover[i][2],
 8002e6c:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <create_Gameover+0x50>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002e74:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <create_Gameover+0x50>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	7859      	ldrb	r1, [r3, #1]
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <create_Gameover+0x50>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	789a      	ldrb	r2, [r3, #2]
 8002e88:	4c09      	ldr	r4, [pc, #36]	; (8002eb0 <create_Gameover+0x50>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4423      	add	r3, r4
 8002e90:	78db      	ldrb	r3, [r3, #3]
 8002e92:	f7ff fbaa 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(Gameover); i++) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b1d      	cmp	r3, #29
 8002ea0:	dde4      	ble.n	8002e6c <create_Gameover+0xc>
				Gameover[i][3]);
	}

	create_V();
 8002ea2:	f7ff ff97 	bl	8002dd4 <create_V>
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000108 	.word	0x20000108

08002eb4 <create_success>:

static void create_success(void) {
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(success); i++) {
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	e017      	b.n	8002ef0 <create_success+0x3c>
		Create_rectangular(success[i][0], success[i][1], success[i][2],
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	; (8002f00 <create_success+0x4c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <create_success+0x4c>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	7859      	ldrb	r1, [r3, #1]
 8002ed2:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <create_success+0x4c>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	789a      	ldrb	r2, [r3, #2]
 8002edc:	4c08      	ldr	r4, [pc, #32]	; (8002f00 <create_success+0x4c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4423      	add	r3, r4
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	f7ff fb80 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(success); i++) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3301      	adds	r3, #1
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b1d      	cmp	r3, #29
 8002ef4:	dde4      	ble.n	8002ec0 <create_success+0xc>
				success[i][3]);
	}
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	200001dc 	.word	0x200001dc

08002f04 <create_score_sign>:

static void create_score_sign(void) {
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(score); i++) {
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	e017      	b.n	8002f40 <create_score_sign+0x3c>
		Create_rectangular(score[i][0], score[i][1], score[i][2], score[i][3]);
 8002f10:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <create_score_sign+0x4c>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <create_score_sign+0x4c>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	7859      	ldrb	r1, [r3, #1]
 8002f22:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <create_score_sign+0x4c>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	789a      	ldrb	r2, [r3, #2]
 8002f2c:	4c08      	ldr	r4, [pc, #32]	; (8002f50 <create_score_sign+0x4c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4423      	add	r3, r4
 8002f34:	78db      	ldrb	r3, [r3, #3]
 8002f36:	f7ff fb58 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(score); i++) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b14      	cmp	r3, #20
 8002f44:	dde4      	ble.n	8002f10 <create_score_sign+0xc>
	}

}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	20000188 	.word	0x20000188

08002f54 <create_zero>:

static void create_zero() {
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(zero); i++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	e017      	b.n	8002f90 <create_zero+0x3c>
		Create_rectangular(zero[i][0], zero[i][1], zero[i][2], zero[i][3]);
 8002f60:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <create_zero+0x4c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <create_zero+0x4c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	7859      	ldrb	r1, [r3, #1]
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <create_zero+0x4c>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	789a      	ldrb	r2, [r3, #2]
 8002f7c:	4c08      	ldr	r4, [pc, #32]	; (8002fa0 <create_zero+0x4c>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4423      	add	r3, r4
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	f7ff fb30 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(zero); i++) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	dde4      	ble.n	8002f60 <create_zero+0xc>
	}
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	20000254 	.word	0x20000254

08002fa4 <create_one>:

static void create_one() {
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(one); i++) {
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	e017      	b.n	8002fe0 <create_one+0x3c>
		Create_rectangular(one[i][0], one[i][1], one[i][2], one[i][3]);
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <create_one+0x4c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <create_one+0x4c>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	7859      	ldrb	r1, [r3, #1]
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <create_one+0x4c>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	789a      	ldrb	r2, [r3, #2]
 8002fcc:	4c08      	ldr	r4, [pc, #32]	; (8002ff0 <create_one+0x4c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4423      	add	r3, r4
 8002fd4:	78db      	ldrb	r3, [r3, #3]
 8002fd6:	f7ff fb08 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(one); i++) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	dde4      	ble.n	8002fb0 <create_one+0xc>
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20000264 	.word	0x20000264

08002ff4 <create_two>:

static void create_two() {
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(two); i++) {
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	e017      	b.n	8003030 <create_two+0x3c>
		Create_rectangular(two[i][0], two[i][1], two[i][2], two[i][3]);
 8003000:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <create_two+0x4c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <create_two+0x4c>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	7859      	ldrb	r1, [r3, #1]
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <create_two+0x4c>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	789a      	ldrb	r2, [r3, #2]
 800301c:	4c08      	ldr	r4, [pc, #32]	; (8003040 <create_two+0x4c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4423      	add	r3, r4
 8003024:	78db      	ldrb	r3, [r3, #3]
 8003026:	f7ff fae0 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(two); i++) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b04      	cmp	r3, #4
 8003034:	dde4      	ble.n	8003000 <create_two+0xc>
	}
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	20000268 	.word	0x20000268

08003044 <create_three>:

static void create_three() {
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(three); i++) {
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	e017      	b.n	8003080 <create_three+0x3c>
		Create_rectangular(three[i][0], three[i][1], three[i][2], three[i][3]);
 8003050:	4a0f      	ldr	r2, [pc, #60]	; (8003090 <create_three+0x4c>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <create_three+0x4c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	7859      	ldrb	r1, [r3, #1]
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <create_three+0x4c>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	789a      	ldrb	r2, [r3, #2]
 800306c:	4c08      	ldr	r4, [pc, #32]	; (8003090 <create_three+0x4c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4423      	add	r3, r4
 8003074:	78db      	ldrb	r3, [r3, #3]
 8003076:	f7ff fab8 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(three); i++) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3301      	adds	r3, #1
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b04      	cmp	r3, #4
 8003084:	dde4      	ble.n	8003050 <create_three+0xc>
	}
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}
 8003090:	2000027c 	.word	0x2000027c

08003094 <create_four>:

static void create_four() {
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(four); i++) {
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e017      	b.n	80030d0 <create_four+0x3c>
		Create_rectangular(four[i][0], four[i][1], four[i][2], four[i][3]);
 80030a0:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <create_four+0x4c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <create_four+0x4c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	7859      	ldrb	r1, [r3, #1]
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <create_four+0x4c>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	789a      	ldrb	r2, [r3, #2]
 80030bc:	4c08      	ldr	r4, [pc, #32]	; (80030e0 <create_four+0x4c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4423      	add	r3, r4
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	f7ff fa90 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(four); i++) {
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	dde4      	ble.n	80030a0 <create_four+0xc>
	}
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	20000290 	.word	0x20000290

080030e4 <create_five>:

static void create_five() {
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(five); i++) {
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e017      	b.n	8003120 <create_five+0x3c>
		Create_rectangular(five[i][0], five[i][1], five[i][2], five[i][3]);
 80030f0:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <create_five+0x4c>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <create_five+0x4c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	7859      	ldrb	r1, [r3, #1]
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <create_five+0x4c>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	789a      	ldrb	r2, [r3, #2]
 800310c:	4c08      	ldr	r4, [pc, #32]	; (8003130 <create_five+0x4c>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4423      	add	r3, r4
 8003114:	78db      	ldrb	r3, [r3, #3]
 8003116:	f7ff fa68 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(five); i++) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3301      	adds	r3, #1
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b04      	cmp	r3, #4
 8003124:	dde4      	ble.n	80030f0 <create_five+0xc>
	}
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}
 8003130:	2000029c 	.word	0x2000029c

08003134 <create_six>:

static void create_six() {
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(six); i++) {
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	e017      	b.n	8003170 <create_six+0x3c>
		Create_rectangular(six[i][0], six[i][1], six[i][2], six[i][3]);
 8003140:	4a0f      	ldr	r2, [pc, #60]	; (8003180 <create_six+0x4c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <create_six+0x4c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	7859      	ldrb	r1, [r3, #1]
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <create_six+0x4c>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	789a      	ldrb	r2, [r3, #2]
 800315c:	4c08      	ldr	r4, [pc, #32]	; (8003180 <create_six+0x4c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4423      	add	r3, r4
 8003164:	78db      	ldrb	r3, [r3, #3]
 8003166:	f7ff fa40 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(six); i++) {
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3301      	adds	r3, #1
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b05      	cmp	r3, #5
 8003174:	dde4      	ble.n	8003140 <create_six+0xc>
	}
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}
 8003180:	200002b0 	.word	0x200002b0

08003184 <create_seven>:

static void create_seven() {
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(seven); i++) {
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e017      	b.n	80031c0 <create_seven+0x3c>
		Create_rectangular(seven[i][0], seven[i][1], seven[i][2], seven[i][3]);
 8003190:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <create_seven+0x4c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <create_seven+0x4c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	7859      	ldrb	r1, [r3, #1]
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <create_seven+0x4c>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	789a      	ldrb	r2, [r3, #2]
 80031ac:	4c08      	ldr	r4, [pc, #32]	; (80031d0 <create_seven+0x4c>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4423      	add	r3, r4
 80031b4:	78db      	ldrb	r3, [r3, #3]
 80031b6:	f7ff fa18 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(seven); i++) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	dde4      	ble.n	8003190 <create_seven+0xc>
	}
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	200002c8 	.word	0x200002c8

080031d4 <create_eight>:

static void create_eight() {
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LEN(eight); i++) {
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	e017      	b.n	8003210 <create_eight+0x3c>
		Create_rectangular(eight[i][0], eight[i][1], eight[i][2], eight[i][3]);
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <create_eight+0x4c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <create_eight+0x4c>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	7859      	ldrb	r1, [r3, #1]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <create_eight+0x4c>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	789a      	ldrb	r2, [r3, #2]
 80031fc:	4c08      	ldr	r4, [pc, #32]	; (8003220 <create_eight+0x4c>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4423      	add	r3, r4
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	f7ff f9f0 	bl	80025ea <Create_rectangular>
	for (int i = 0; i < LEN(eight); i++) {
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3301      	adds	r3, #1
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b06      	cmp	r3, #6
 8003214:	dde4      	ble.n	80031e0 <create_eight+0xc>
	}
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	200002d0 	.word	0x200002d0

08003224 <final_score>:

static void final_score(int point) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d82f      	bhi.n	8003292 <final_score+0x6e>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <final_score+0x14>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003263 	.word	0x08003263
 8003240:	08003269 	.word	0x08003269
 8003244:	0800326f 	.word	0x0800326f
 8003248:	08003275 	.word	0x08003275
 800324c:	0800327b 	.word	0x0800327b
 8003250:	08003281 	.word	0x08003281
 8003254:	08003287 	.word	0x08003287
 8003258:	0800328d 	.word	0x0800328d
	switch (point) {
	case 0:
		create_zero();
 800325c:	f7ff fe7a 	bl	8002f54 <create_zero>
		break;
 8003260:	e017      	b.n	8003292 <final_score+0x6e>
	case 1:
		create_one();
 8003262:	f7ff fe9f 	bl	8002fa4 <create_one>
		break;
 8003266:	e014      	b.n	8003292 <final_score+0x6e>
	case 2:
		create_two();
 8003268:	f7ff fec4 	bl	8002ff4 <create_two>
		break;
 800326c:	e011      	b.n	8003292 <final_score+0x6e>
	case 3:
		create_three();
 800326e:	f7ff fee9 	bl	8003044 <create_three>
		break;
 8003272:	e00e      	b.n	8003292 <final_score+0x6e>
	case 4:
		create_four();
 8003274:	f7ff ff0e 	bl	8003094 <create_four>
		break;
 8003278:	e00b      	b.n	8003292 <final_score+0x6e>
	case 5:
		create_five();
 800327a:	f7ff ff33 	bl	80030e4 <create_five>
		break;
 800327e:	e008      	b.n	8003292 <final_score+0x6e>
	case 6:
		create_six();
 8003280:	f7ff ff58 	bl	8003134 <create_six>
		break;
 8003284:	e005      	b.n	8003292 <final_score+0x6e>
	case 7:
		create_seven();
 8003286:	f7ff ff7d 	bl	8003184 <create_seven>
		break;
 800328a:	e002      	b.n	8003292 <final_score+0x6e>
	case 8:
		create_eight();
 800328c:	f7ff ffa2 	bl	80031d4 <create_eight>
		break;
 8003290:	bf00      	nop

	}
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop

0800329c <failureScore>:

void failureScore(int point) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	create_Gameover();
 80032a4:	f7ff fddc 	bl	8002e60 <create_Gameover>
	create_score_sign();
 80032a8:	f7ff fe2c 	bl	8002f04 <create_score_sign>
	final_score(point);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ffb9 	bl	8003224 <final_score>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <goalScore>:

void goalScore(int point) {
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
	create_success();
 80032c2:	f7ff fdf7 	bl	8002eb4 <create_success>
	create_score_sign();
 80032c6:	f7ff fe1d 	bl	8002f04 <create_score_sign>
	final_score(point);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffaa 	bl	8003224 <final_score>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_MspInit+0x4c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_MspInit+0x4c>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_MspInit+0x4c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_MspInit+0x4c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <HAL_MspInit+0x4c>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_MspInit+0x4c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003316:	2007      	movs	r0, #7
 8003318:	f000 fb36 	bl	8003988 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_I2C_MspInit+0x84>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12c      	bne.n	80033a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003366:	f44f 7340 	mov.w	r3, #768	; 0x300
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336c:	2312      	movs	r3, #18
 800336e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003378:	2304      	movs	r3, #4
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4619      	mov	r1, r3
 8003382:	480c      	ldr	r0, [pc, #48]	; (80033b4 <HAL_I2C_MspInit+0x8c>)
 8003384:	f000 fb34 	bl	80039f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 8003392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003396:	6413      	str	r3, [r2, #64]	; 0x40
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_I2C_MspInit+0x88>)
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020400 	.word	0x40020400

080033b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_TIM_Base_MspInit+0x3c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10d      	bne.n	80033e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_TIM_Base_MspInit+0x40>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_TIM_Base_MspInit+0x40>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_TIM_Base_MspInit+0x40>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_UART_MspInit+0x84>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d12b      	bne.n	8003476 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_UART_MspInit+0x88>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_UART_MspInit+0x88>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_UART_MspInit+0x88>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_UART_MspInit+0x88>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_UART_MspInit+0x88>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6313      	str	r3, [r2, #48]	; 0x30
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_UART_MspInit+0x88>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003456:	230c      	movs	r3, #12
 8003458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003466:	2307      	movs	r3, #7
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f107 0314 	add.w	r3, r7, #20
 800346e:	4619      	mov	r1, r3
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <HAL_UART_MspInit+0x8c>)
 8003472:	f000 fabd 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40004400 	.word	0x40004400
 8003484:	40023800 	.word	0x40023800
 8003488:	40020000 	.word	0x40020000

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003490:	e7fe      	b.n	8003490 <NMI_Handler+0x4>

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <MemManage_Handler+0x4>

0800349e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <UsageFault_Handler+0x4>

080034aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f000 f960 	bl	800379c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  timer_tick();
 80034dc:	f000 f890 	bl	8003600 <timer_tick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <_sbrk+0x5c>)
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <_sbrk+0x60>)
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <_sbrk+0x64>)
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <_sbrk+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003514:	f002 fe4e 	bl	80061b4 <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	220c      	movs	r2, #12
 800351c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e009      	b.n	8003538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <_sbrk+0x64>)
 8003534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20018000 	.word	0x20018000
 8003544:	00000400 	.word	0x00000400
 8003548:	200008ac 	.word	0x200008ac
 800354c:	20000a30 	.word	0x20000a30

08003550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <SystemInit+0x20>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <SystemInit+0x20>)
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <timer_init>:
 * Must be called before any other usage of the module.
 * All previously registered timers are deleted!
 *
 * Return: 1 for success, 0 for failure
 */
int timer_init(void) {
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0

	return 1;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <timer_register>:
 * "TICKRATE_HZ" / "div".
 * @param timerfkt Pointer to the timer function that is to be called
 * @param div Clock divider f_out = f_in / div
 * Return: 1 for success, 0 for failure
 */
int timer_register(fptimerfkt timerfkt, uint32_t div) {
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

	if (funNumber < MAX_TIMERS) {
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <timer_register+0x74>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b07      	cmp	r3, #7
 8003594:	d828      	bhi.n	80035e8 <timer_register+0x64>
		fct[funNumber].divider = div;
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <timer_register+0x74>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	4917      	ldr	r1, [pc, #92]	; (80035fc <timer_register+0x78>)
 80035a0:	4603      	mov	r3, r0
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4403      	add	r3, r0
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	601a      	str	r2, [r3, #0]
		fct[funNumber].function_pointer = timerfkt;
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <timer_register+0x74>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <timer_register+0x78>)
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3308      	adds	r3, #8
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
		fct[funNumber].counter = 0;
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <timer_register+0x74>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <timer_register+0x78>)
 80035cc:	460b      	mov	r3, r1
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	440b      	add	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3304      	adds	r3, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
		funNumber++;
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <timer_register+0x74>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <timer_register+0x74>)
 80035e6:	701a      	strb	r2, [r3, #0]

	}

	return 0;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	200008b0 	.word	0x200008b0
 80035fc:	200009bc 	.word	0x200009bc

08003600 <timer_tick>:
/*
 * Process next tick.
 * Must be called periodically with a frequency of TICKRATE_HZ
 * Return: 1 for success, 0 for failure
 */
void timer_tick(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0

	for (int i = 0; i < funNumber; i++) {
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	e03c      	b.n	8003686 <timer_tick+0x86>
		fct[i].counter++;      //timer is counting
 800360c:	4923      	ldr	r1, [pc, #140]	; (800369c <timer_tick+0x9c>)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3304      	adds	r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1c59      	adds	r1, r3, #1
 8003620:	481e      	ldr	r0, [pc, #120]	; (800369c <timer_tick+0x9c>)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4403      	add	r3, r0
 800362e:	3304      	adds	r3, #4
 8003630:	6019      	str	r1, [r3, #0]
		if (fct[i].counter == fct[i].divider) {
 8003632:	491a      	ldr	r1, [pc, #104]	; (800369c <timer_tick+0x9c>)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3304      	adds	r3, #4
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	4815      	ldr	r0, [pc, #84]	; (800369c <timer_tick+0x9c>)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4403      	add	r3, r0
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4299      	cmp	r1, r3
 8003656:	d113      	bne.n	8003680 <timer_tick+0x80>
			fct[i].counter = 0;
 8003658:	4910      	ldr	r1, [pc, #64]	; (800369c <timer_tick+0x9c>)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3304      	adds	r3, #4
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
			fct[i].function_pointer();
 800366c:	490b      	ldr	r1, [pc, #44]	; (800369c <timer_tick+0x9c>)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3308      	adds	r3, #8
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4798      	blx	r3
	for (int i = 0; i < funNumber; i++) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3301      	adds	r3, #1
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <timer_tick+0xa0>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4293      	cmp	r3, r2
 8003690:	dbbc      	blt.n	800360c <timer_tick+0xc>
		}
	}

}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	200009bc 	.word	0x200009bc
 80036a0:	200008b0 	.word	0x200008b0

080036a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036a8:	480d      	ldr	r0, [pc, #52]	; (80036e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036aa:	490e      	ldr	r1, [pc, #56]	; (80036e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036b0:	e002      	b.n	80036b8 <LoopCopyDataInit>

080036b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036b6:	3304      	adds	r3, #4

080036b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036bc:	d3f9      	bcc.n	80036b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036c0:	4c0b      	ldr	r4, [pc, #44]	; (80036f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c4:	e001      	b.n	80036ca <LoopFillZerobss>

080036c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c8:	3204      	adds	r2, #4

080036ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036cc:	d3fb      	bcc.n	80036c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ce:	f7ff ff3f 	bl	8003550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036d2:	f002 fd75 	bl	80061c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036d6:	f7fe fde1 	bl	800229c <main>
  bx  lr    
 80036da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80036e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80036e8:	08007f08 	.word	0x08007f08
  ldr r2, =_sbss
 80036ec:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80036f0:	20000a30 	.word	0x20000a30

080036f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036f4:	e7fe      	b.n	80036f4 <ADC_IRQHandler>
	...

080036f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <HAL_Init+0x40>)
 8003702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <HAL_Init+0x40>)
 800370e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a07      	ldr	r2, [pc, #28]	; (8003738 <HAL_Init+0x40>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003720:	2003      	movs	r0, #3
 8003722:	f000 f931 	bl	8003988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003726:	2000      	movs	r0, #0
 8003728:	f000 f808 	bl	800373c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800372c:	f7ff fdd4 	bl	80032d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_InitTick+0x54>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_InitTick+0x58>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003752:	fbb3 f3f1 	udiv	r3, r3, r1
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f93b 	bl	80039d6 <HAL_SYSTICK_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00e      	b.n	8003788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d80a      	bhi.n	8003786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003770:	2200      	movs	r2, #0
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f000 f911 	bl	800399e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800377c:	4a06      	ldr	r2, [pc, #24]	; (8003798 <HAL_InitTick+0x5c>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200002ec 	.word	0x200002ec
 8003794:	200002f4 	.word	0x200002f4
 8003798:	200002f0 	.word	0x200002f0

0800379c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_IncTick+0x20>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_IncTick+0x24>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_IncTick+0x24>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200002f4 	.word	0x200002f4
 80037c0:	20000a1c 	.word	0x20000a1c

080037c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return uwTick;
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_GetTick+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000a1c 	.word	0x20000a1c

080037dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff ffee 	bl	80037c4 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d005      	beq.n	8003802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_Delay+0x44>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003802:	bf00      	nop
 8003804:	f7ff ffde 	bl	80037c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d8f7      	bhi.n	8003804 <HAL_Delay+0x28>
  {
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200002f4 	.word	0x200002f4

08003824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003840:	4013      	ands	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800384c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <__NVIC_SetPriorityGrouping+0x44>)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60d3      	str	r3, [r2, #12]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <__NVIC_GetPriorityGrouping+0x18>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	0a1b      	lsrs	r3, r3, #8
 8003876:	f003 0307 	and.w	r3, r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db0a      	blt.n	80038b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <__NVIC_SetPriority+0x4c>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b0:	e00a      	b.n	80038c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4908      	ldr	r1, [pc, #32]	; (80038d8 <__NVIC_SetPriority+0x50>)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3b04      	subs	r3, #4
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	761a      	strb	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf28      	it	cs
 80038fa:	2304      	movcs	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3304      	adds	r3, #4
 8003902:	2b06      	cmp	r3, #6
 8003904:	d902      	bls.n	800390c <NVIC_EncodePriority+0x30>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3b03      	subs	r3, #3
 800390a:	e000      	b.n	800390e <NVIC_EncodePriority+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003924:	f04f 31ff 	mov.w	r1, #4294967295
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43d9      	mvns	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	4313      	orrs	r3, r2
         );
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003954:	d301      	bcc.n	800395a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <SysTick_Config+0x40>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003962:	210f      	movs	r1, #15
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f7ff ff8e 	bl	8003888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SysTick_Config+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <SysTick_Config+0x40>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000e010 	.word	0xe000e010

08003988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff47 	bl	8003824 <__NVIC_SetPriorityGrouping>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b0:	f7ff ff5c 	bl	800386c <__NVIC_GetPriorityGrouping>
 80039b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6978      	ldr	r0, [r7, #20]
 80039bc:	f7ff ff8e 	bl	80038dc <NVIC_EncodePriority>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff5d 	bl	8003888 <__NVIC_SetPriority>
}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffb0 	bl	8003944 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e159      	b.n	8003cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	f040 8148 	bne.w	8003cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d005      	beq.n	8003a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d130      	bne.n	8003aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 0201 	and.w	r2, r3, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d017      	beq.n	8003ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d123      	bne.n	8003b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3208      	adds	r2, #8
 8003af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	69b9      	ldr	r1, [r7, #24]
 8003b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a2 	beq.w	8003cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	220f      	movs	r2, #15
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a49      	ldr	r2, [pc, #292]	; (8003ce0 <HAL_GPIO_Init+0x2f0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d019      	beq.n	8003bf2 <HAL_GPIO_Init+0x202>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_GPIO_Init+0x2f4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x1fe>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a47      	ldr	r2, [pc, #284]	; (8003ce8 <HAL_GPIO_Init+0x2f8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x1fa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_GPIO_Init+0x2fc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x1f6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x1f2>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be2:	2307      	movs	r3, #7
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f aea2 	bls.w	8003a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
 8003d04:	4613      	mov	r3, r2
 8003d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d08:	787b      	ldrb	r3, [r7, #1]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d16:	887b      	ldrh	r3, [r7, #2]
 8003d18:	041a      	lsls	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	619a      	str	r2, [r3, #24]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e12b      	b.n	8003f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fae8 	bl	8003328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d90:	f001 fbd8 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8003d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a81      	ldr	r2, [pc, #516]	; (8003fa0 <HAL_I2C_Init+0x274>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d807      	bhi.n	8003db0 <HAL_I2C_Init+0x84>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a80      	ldr	r2, [pc, #512]	; (8003fa4 <HAL_I2C_Init+0x278>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bf94      	ite	ls
 8003da8:	2301      	movls	r3, #1
 8003daa:	2300      	movhi	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e006      	b.n	8003dbe <HAL_I2C_Init+0x92>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a7d      	ldr	r2, [pc, #500]	; (8003fa8 <HAL_I2C_Init+0x27c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	bf94      	ite	ls
 8003db8:	2301      	movls	r3, #1
 8003dba:	2300      	movhi	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0e7      	b.n	8003f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a78      	ldr	r2, [pc, #480]	; (8003fac <HAL_I2C_Init+0x280>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0c9b      	lsrs	r3, r3, #18
 8003dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a6a      	ldr	r2, [pc, #424]	; (8003fa0 <HAL_I2C_Init+0x274>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d802      	bhi.n	8003e00 <HAL_I2C_Init+0xd4>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	e009      	b.n	8003e14 <HAL_I2C_Init+0xe8>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	4a69      	ldr	r2, [pc, #420]	; (8003fb0 <HAL_I2C_Init+0x284>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	3301      	adds	r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	495c      	ldr	r1, [pc, #368]	; (8003fa0 <HAL_I2C_Init+0x274>)
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d819      	bhi.n	8003e68 <HAL_I2C_Init+0x13c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1e59      	subs	r1, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e48:	400b      	ands	r3, r1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_I2C_Init+0x138>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1e59      	subs	r1, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e62:	e051      	b.n	8003f08 <HAL_I2C_Init+0x1dc>
 8003e64:	2304      	movs	r3, #4
 8003e66:	e04f      	b.n	8003f08 <HAL_I2C_Init+0x1dc>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d111      	bne.n	8003e94 <HAL_I2C_Init+0x168>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1e58      	subs	r0, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6859      	ldr	r1, [r3, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	440b      	add	r3, r1
 8003e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e82:	3301      	adds	r3, #1
 8003e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e012      	b.n	8003eba <HAL_I2C_Init+0x18e>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1e58      	subs	r0, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	0099      	lsls	r1, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Init+0x196>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e022      	b.n	8003f08 <HAL_I2C_Init+0x1dc>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_I2C_Init+0x1bc>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e58      	subs	r0, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	440b      	add	r3, r1
 8003ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003edc:	3301      	adds	r3, #1
 8003ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee6:	e00f      	b.n	8003f08 <HAL_I2C_Init+0x1dc>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1e58      	subs	r0, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	0099      	lsls	r1, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	6809      	ldr	r1, [r1, #0]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6911      	ldr	r1, [r2, #16]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68d2      	ldr	r2, [r2, #12]
 8003f42:	4311      	orrs	r1, r2
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	000186a0 	.word	0x000186a0
 8003fa4:	001e847f 	.word	0x001e847f
 8003fa8:	003d08ff 	.word	0x003d08ff
 8003fac:	431bde83 	.word	0x431bde83
 8003fb0:	10624dd3 	.word	0x10624dd3

08003fb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	817b      	strh	r3, [r7, #10]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	813b      	strh	r3, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fce:	f7ff fbf9 	bl	80037c4 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	f040 80d9 	bne.w	8004194 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2319      	movs	r3, #25
 8003fe8:	2201      	movs	r2, #1
 8003fea:	496d      	ldr	r1, [pc, #436]	; (80041a0 <HAL_I2C_Mem_Write+0x1ec>)
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fc7f 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e0cc      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_I2C_Mem_Write+0x56>
 8004006:	2302      	movs	r3, #2
 8004008:	e0c5      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d007      	beq.n	8004030 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2221      	movs	r2, #33	; 0x21
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a4d      	ldr	r2, [pc, #308]	; (80041a4 <HAL_I2C_Mem_Write+0x1f0>)
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004072:	88f8      	ldrh	r0, [r7, #6]
 8004074:	893a      	ldrh	r2, [r7, #8]
 8004076:	8979      	ldrh	r1, [r7, #10]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4603      	mov	r3, r0
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fab6 	bl	80045f4 <I2C_RequestMemoryWrite>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d052      	beq.n	8004134 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e081      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fd00 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d107      	bne.n	80040ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06b      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d11b      	bne.n	8004134 <HAL_I2C_Mem_Write+0x180>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d017      	beq.n	8004134 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	781a      	ldrb	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1aa      	bne.n	8004092 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fcec 	bl	8004b1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e016      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	00100002 	.word	0x00100002
 80041a4:	ffff0000 	.word	0xffff0000

080041a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	4608      	mov	r0, r1
 80041b2:	4611      	mov	r1, r2
 80041b4:	461a      	mov	r2, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	817b      	strh	r3, [r7, #10]
 80041ba:	460b      	mov	r3, r1
 80041bc:	813b      	strh	r3, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c2:	f7ff faff 	bl	80037c4 <HAL_GetTick>
 80041c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	f040 8208 	bne.w	80045e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2319      	movs	r3, #25
 80041dc:	2201      	movs	r2, #1
 80041de:	497b      	ldr	r1, [pc, #492]	; (80043cc <HAL_I2C_Mem_Read+0x224>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb85 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	e1fb      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Mem_Read+0x56>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e1f4      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d007      	beq.n	8004224 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2222      	movs	r2, #34	; 0x22
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800424e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a5b      	ldr	r2, [pc, #364]	; (80043d0 <HAL_I2C_Mem_Read+0x228>)
 8004264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004266:	88f8      	ldrh	r0, [r7, #6]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	8979      	ldrh	r1, [r7, #10]
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	4603      	mov	r3, r0
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa52 	bl	8004720 <I2C_RequestMemoryRead>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e1b0      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d113      	bne.n	80042b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e184      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d11b      	bne.n	80042f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e164      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d11b      	bne.n	8004336 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	e144      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800434c:	e138      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b03      	cmp	r3, #3
 8004354:	f200 80f1 	bhi.w	800453a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b01      	cmp	r3, #1
 800435e:	d123      	bne.n	80043a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fc1b 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e139      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a6:	e10b      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d14e      	bne.n	800444e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	2200      	movs	r2, #0
 80043b8:	4906      	ldr	r1, [pc, #24]	; (80043d4 <HAL_I2C_Mem_Read+0x22c>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fa98 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e10e      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
 80043ca:	bf00      	nop
 80043cc:	00100002 	.word	0x00100002
 80043d0:	ffff0000 	.word	0xffff0000
 80043d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800444c:	e0b8      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2200      	movs	r2, #0
 8004456:	4966      	ldr	r1, [pc, #408]	; (80045f0 <HAL_I2C_Mem_Read+0x448>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fa49 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0bf      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2200      	movs	r2, #0
 80044b2:	494f      	ldr	r1, [pc, #316]	; (80045f0 <HAL_I2C_Mem_Read+0x448>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fa1b 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e091      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004538:	e042      	b.n	80045c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fb2e 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e04c      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d118      	bne.n	80045c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f aec2 	bne.w	800434e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3728      	adds	r7, #40	; 0x28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	00010004 	.word	0x00010004

080045f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	460b      	mov	r3, r1
 8004608:	813b      	strh	r3, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	2200      	movs	r2, #0
 8004626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f960 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004644:	d103      	bne.n	800464e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e05f      	b.n	8004712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	492d      	ldr	r1, [pc, #180]	; (800471c <I2C_RequestMemoryWrite+0x128>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f998 	bl	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04c      	b.n	8004712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	6a39      	ldr	r1, [r7, #32]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa02 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d107      	bne.n	80046b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e02b      	b.n	8004712 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046c0:	893b      	ldrh	r3, [r7, #8]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]
 80046ca:	e021      	b.n	8004710 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046cc:	893b      	ldrh	r3, [r7, #8]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	6a39      	ldr	r1, [r7, #32]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f9dc 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d107      	bne.n	8004702 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e005      	b.n	8004712 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	00010002 	.word	0x00010002

08004720 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4603      	mov	r3, r0
 8004730:	817b      	strh	r3, [r7, #10]
 8004732:	460b      	mov	r3, r1
 8004734:	813b      	strh	r3, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004748:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2200      	movs	r2, #0
 8004762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8c2 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d103      	bne.n	800478a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0aa      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800479c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	6a3a      	ldr	r2, [r7, #32]
 80047a2:	4952      	ldr	r1, [pc, #328]	; (80048ec <I2C_RequestMemoryRead+0x1cc>)
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f8fa 	bl	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e097      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	6a39      	ldr	r1, [r7, #32]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f964 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00d      	beq.n	80047f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d107      	bne.n	80047f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e076      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047fc:	893b      	ldrh	r3, [r7, #8]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
 8004806:	e021      	b.n	800484c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004808:	893b      	ldrh	r3, [r7, #8]
 800480a:	0a1b      	lsrs	r3, r3, #8
 800480c:	b29b      	uxth	r3, r3
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004818:	6a39      	ldr	r1, [r7, #32]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f93e 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b04      	cmp	r3, #4
 800482c:	d107      	bne.n	800483e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e050      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	6a39      	ldr	r1, [r7, #32]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f923 	bl	8004a9c <I2C_WaitOnTXEFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	2b04      	cmp	r3, #4
 8004862:	d107      	bne.n	8004874 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e035      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004886:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2200      	movs	r2, #0
 8004890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f82b 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00d      	beq.n	80048bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ae:	d103      	bne.n	80048b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e013      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048bc:	897b      	ldrh	r3, [r7, #10]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	4906      	ldr	r1, [pc, #24]	; (80048ec <I2C_RequestMemoryRead+0x1cc>)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f863 	bl	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	00010002 	.word	0x00010002

080048f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004900:	e025      	b.n	800494e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d021      	beq.n	800494e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490a:	f7fe ff5b 	bl	80037c4 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0220 	orr.w	r2, r3, #32
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e023      	b.n	8004996 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10d      	bne.n	8004974 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	e00c      	b.n	800498e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4013      	ands	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf0c      	ite	eq
 8004986:	2301      	moveq	r3, #1
 8004988:	2300      	movne	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	429a      	cmp	r2, r3
 8004992:	d0b6      	beq.n	8004902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ac:	e051      	b.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049bc:	d123      	bne.n	8004a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f043 0204 	orr.w	r2, r3, #4
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e046      	b.n	8004a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d021      	beq.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fe fed9 	bl	80037c4 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e020      	b.n	8004a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d10c      	bne.n	8004a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	43da      	mvns	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	e00b      	b.n	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d18d      	bne.n	80049ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa8:	e02d      	b.n	8004b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8ce 	bl	8004c4c <I2C_IsAcknowledgeFailed>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e02d      	b.n	8004b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d021      	beq.n	8004b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fe fe7f 	bl	80037c4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d116      	bne.n	8004b06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e007      	b.n	8004b16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d1ca      	bne.n	8004aaa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2a:	e02d      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f88d 	bl	8004c4c <I2C_IsAcknowledgeFailed>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e02d      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d021      	beq.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fe fe3e 	bl	80037c4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e007      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d1ca      	bne.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bac:	e042      	b.n	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d119      	bne.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e029      	b.n	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fe fde8 	bl	80037c4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e007      	b.n	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d1b5      	bne.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d11b      	bne.n	8004c9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f043 0204 	orr.w	r2, r3, #4
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e264      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d075      	beq.n	8004db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cca:	4ba3      	ldr	r3, [pc, #652]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd6:	4ba0      	ldr	r3, [pc, #640]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d112      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ce2:	4b9d      	ldr	r3, [pc, #628]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d05b      	beq.n	8004db4 <HAL_RCC_OscConfig+0x108>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d157      	bne.n	8004db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e23f      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d106      	bne.n	8004d20 <HAL_RCC_OscConfig+0x74>
 8004d12:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a90      	ldr	r2, [pc, #576]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e01d      	b.n	8004d5c <HAL_RCC_OscConfig+0xb0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x98>
 8004d2a:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a8a      	ldr	r2, [pc, #552]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a87      	ldr	r2, [pc, #540]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e00b      	b.n	8004d5c <HAL_RCC_OscConfig+0xb0>
 8004d44:	4b84      	ldr	r3, [pc, #528]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a83      	ldr	r2, [pc, #524]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a80      	ldr	r2, [pc, #512]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fe fd2e 	bl	80037c4 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fd2a 	bl	80037c4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e204      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0xc0>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fe fd1a 	bl	80037c4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fe fd16 	bl	80037c4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1f0      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da6:	4b6c      	ldr	r3, [pc, #432]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0xe8>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dce:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d11c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dda:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d116      	bne.n	8004e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_RCC_OscConfig+0x152>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d001      	beq.n	8004dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e1c4      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4952      	ldr	r1, [pc, #328]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	e03a      	b.n	8004e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <HAL_RCC_OscConfig+0x2b0>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fe fccf 	bl	80037c4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fe fccb 	bl	80037c4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1a5      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4940      	ldr	r1, [pc, #256]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	e015      	b.n	8004e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_OscConfig+0x2b0>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fe fcae 	bl	80037c4 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6c:	f7fe fcaa 	bl	80037c4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e184      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d030      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <HAL_RCC_OscConfig+0x2b4>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fe fc8e 	bl	80037c4 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fe fc8a 	bl	80037c4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e164      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	4b26      	ldr	r3, [pc, #152]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x200>
 8004eca:	e015      	b.n	8004ef8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_RCC_OscConfig+0x2b4>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed2:	f7fe fc77 	bl	80037c4 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eda:	f7fe fc73 	bl	80037c4 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e14d      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f0      	bne.n	8004eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a0 	beq.w	8005046 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6413      	str	r3, [r2, #64]	; 0x40
 8004f26:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_RCC_OscConfig+0x2b8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d121      	bne.n	8004f86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCC_OscConfig+0x2b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_RCC_OscConfig+0x2b8>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fe fc39 	bl	80037c4 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	e011      	b.n	8004f7a <HAL_RCC_OscConfig+0x2ce>
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	42470000 	.word	0x42470000
 8004f60:	42470e80 	.word	0x42470e80
 8004f64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f68:	f7fe fc2c 	bl	80037c4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e106      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	4b85      	ldr	r3, [pc, #532]	; (8005190 <HAL_RCC_OscConfig+0x4e4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d106      	bne.n	8004f9c <HAL_RCC_OscConfig+0x2f0>
 8004f8e:	4b81      	ldr	r3, [pc, #516]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a80      	ldr	r2, [pc, #512]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x32a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x312>
 8004fa4:	4b7b      	ldr	r3, [pc, #492]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a7a      	ldr	r2, [pc, #488]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	4b78      	ldr	r3, [pc, #480]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a77      	ldr	r2, [pc, #476]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x32a>
 8004fbe:	4b75      	ldr	r3, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a74      	ldr	r2, [pc, #464]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b72      	ldr	r3, [pc, #456]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a71      	ldr	r2, [pc, #452]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fe fbf1 	bl	80037c4 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fe fbed 	bl	80037c4 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0c5      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b65      	ldr	r3, [pc, #404]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x33a>
 8005008:	e014      	b.n	8005034 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500a:	f7fe fbdb 	bl	80037c4 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fe fbd7 	bl	80037c4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0af      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ee      	bne.n	8005012 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b56      	ldr	r3, [pc, #344]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a55      	ldr	r2, [pc, #340]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 809b 	beq.w	8005186 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005050:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d05c      	beq.n	8005116 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d141      	bne.n	80050e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b4c      	ldr	r3, [pc, #304]	; (8005198 <HAL_RCC_OscConfig+0x4ec>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fe fbab 	bl	80037c4 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005072:	f7fe fba7 	bl	80037c4 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e081      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005084:	4b43      	ldr	r3, [pc, #268]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	3b01      	subs	r3, #1
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	4937      	ldr	r1, [pc, #220]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ba:	4b37      	ldr	r3, [pc, #220]	; (8005198 <HAL_RCC_OscConfig+0x4ec>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe fb80 	bl	80037c4 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fe fb7c 	bl	80037c4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e056      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x41c>
 80050e6:	e04e      	b.n	8005186 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b2b      	ldr	r3, [pc, #172]	; (8005198 <HAL_RCC_OscConfig+0x4ec>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe fb69 	bl	80037c4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fe fb65 	bl	80037c4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e03f      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x44a>
 8005114:	e037      	b.n	8005186 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e032      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <HAL_RCC_OscConfig+0x4e8>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d028      	beq.n	8005182 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d121      	bne.n	8005182 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d11a      	bne.n	8005182 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005158:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515a:	4293      	cmp	r3, r2
 800515c:	d111      	bne.n	8005182 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d107      	bne.n	8005182 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d001      	beq.n	8005186 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40007000 	.word	0x40007000
 8005194:	40023800 	.word	0x40023800
 8005198:	42470060 	.word	0x42470060

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0cc      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b68      	ldr	r3, [pc, #416]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d90c      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b65      	ldr	r3, [pc, #404]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b63      	ldr	r3, [pc, #396]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0b8      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f0:	4b59      	ldr	r3, [pc, #356]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a58      	ldr	r2, [pc, #352]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005208:	4b53      	ldr	r3, [pc, #332]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a52      	ldr	r2, [pc, #328]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b50      	ldr	r3, [pc, #320]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	494d      	ldr	r1, [pc, #308]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d044      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d119      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e07f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d003      	beq.n	800525a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e067      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b37      	ldr	r3, [pc, #220]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4934      	ldr	r1, [pc, #208]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	4313      	orrs	r3, r2
 800528a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fe fa9a 	bl	80037c4 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fe fa96 	bl	80037c4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04f      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b25      	ldr	r3, [pc, #148]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d20c      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b20      	ldr	r3, [pc, #128]	; (8005354 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e032      	b.n	800534a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b19      	ldr	r3, [pc, #100]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4916      	ldr	r1, [pc, #88]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490e      	ldr	r1, [pc, #56]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005322:	f000 f821 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	490a      	ldr	r1, [pc, #40]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	5ccb      	ldrb	r3, [r1, r3]
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	4a09      	ldr	r2, [pc, #36]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe f9fa 	bl	800373c <HAL_InitTick>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023c00 	.word	0x40023c00
 8005358:	40023800 	.word	0x40023800
 800535c:	08007e28 	.word	0x08007e28
 8005360:	200002ec 	.word	0x200002ec
 8005364:	200002f0 	.word	0x200002f0

08005368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	2300      	movs	r3, #0
 800537a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005380:	4b67      	ldr	r3, [pc, #412]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d00d      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x40>
 800538c:	2b08      	cmp	r3, #8
 800538e:	f200 80bd 	bhi.w	800550c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x34>
 8005396:	2b04      	cmp	r3, #4
 8005398:	d003      	beq.n	80053a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800539a:	e0b7      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b61      	ldr	r3, [pc, #388]	; (8005524 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800539e:	60bb      	str	r3, [r7, #8]
       break;
 80053a0:	e0b7      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053a2:	4b61      	ldr	r3, [pc, #388]	; (8005528 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80053a4:	60bb      	str	r3, [r7, #8]
      break;
 80053a6:	e0b4      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a8:	4b5d      	ldr	r3, [pc, #372]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053b2:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04d      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053be:	4b58      	ldr	r3, [pc, #352]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	461a      	mov	r2, r3
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	ea02 0800 	and.w	r8, r2, r0
 80053d6:	ea03 0901 	and.w	r9, r3, r1
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	014b      	lsls	r3, r1, #5
 80053e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053ec:	0142      	lsls	r2, r0, #5
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	ebb0 0008 	subs.w	r0, r0, r8
 80053f6:	eb61 0109 	sbc.w	r1, r1, r9
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	018b      	lsls	r3, r1, #6
 8005404:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005408:	0182      	lsls	r2, r0, #6
 800540a:	1a12      	subs	r2, r2, r0
 800540c:	eb63 0301 	sbc.w	r3, r3, r1
 8005410:	f04f 0000 	mov.w	r0, #0
 8005414:	f04f 0100 	mov.w	r1, #0
 8005418:	00d9      	lsls	r1, r3, #3
 800541a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800541e:	00d0      	lsls	r0, r2, #3
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	eb12 0208 	adds.w	r2, r2, r8
 8005428:	eb43 0309 	adc.w	r3, r3, r9
 800542c:	f04f 0000 	mov.w	r0, #0
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	0259      	lsls	r1, r3, #9
 8005436:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800543a:	0250      	lsls	r0, r2, #9
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	f7fb fbdc 	bl	8000c08 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e04a      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	099b      	lsrs	r3, r3, #6
 8005460:	461a      	mov	r2, r3
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	ea02 0400 	and.w	r4, r2, r0
 8005472:	ea03 0501 	and.w	r5, r3, r1
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	014b      	lsls	r3, r1, #5
 8005484:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005488:	0142      	lsls	r2, r0, #5
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	1b00      	subs	r0, r0, r4
 8005490:	eb61 0105 	sbc.w	r1, r1, r5
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	018b      	lsls	r3, r1, #6
 800549e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054a2:	0182      	lsls	r2, r0, #6
 80054a4:	1a12      	subs	r2, r2, r0
 80054a6:	eb63 0301 	sbc.w	r3, r3, r1
 80054aa:	f04f 0000 	mov.w	r0, #0
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	00d9      	lsls	r1, r3, #3
 80054b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b8:	00d0      	lsls	r0, r2, #3
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	1912      	adds	r2, r2, r4
 80054c0:	eb45 0303 	adc.w	r3, r5, r3
 80054c4:	f04f 0000 	mov.w	r0, #0
 80054c8:	f04f 0100 	mov.w	r1, #0
 80054cc:	0299      	lsls	r1, r3, #10
 80054ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054d2:	0290      	lsls	r0, r2, #10
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	461a      	mov	r2, r3
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	f7fb fb90 	bl	8000c08 <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	60bb      	str	r3, [r7, #8]
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800550e:	60bb      	str	r3, [r7, #8]
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	68bb      	ldr	r3, [r7, #8]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	200002ec 	.word	0x200002ec

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005548:	f7ff fff0 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0a9b      	lsrs	r3, r3, #10
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	; (8005568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	08007e38 	.word	0x08007e38

0800556c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005570:	f7ff ffdc 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0b5b      	lsrs	r3, r3, #13
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	08007e38 	.word	0x08007e38

08005594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e041      	b.n	800562a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fd fefc 	bl	80033b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f000 f950 	bl	8005878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	d001      	beq.n	800564c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e03c      	b.n	80056c6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <HAL_TIM_Base_Start+0xa0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <HAL_TIM_Base_Start+0x5c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005666:	d013      	beq.n	8005690 <HAL_TIM_Base_Start+0x5c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <HAL_TIM_Base_Start+0xa4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <HAL_TIM_Base_Start+0x5c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a19      	ldr	r2, [pc, #100]	; (80056dc <HAL_TIM_Base_Start+0xa8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_TIM_Base_Start+0x5c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <HAL_TIM_Base_Start+0xac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIM_Base_Start+0x5c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <HAL_TIM_Base_Start+0xb0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d111      	bne.n	80056b4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d010      	beq.n	80056c4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	e007      	b.n	80056c4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40014000 	.word	0x40014000

080056e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIM_ConfigClockSource+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e0b4      	b.n	800586e <HAL_TIM_ConfigClockSource+0x186>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573c:	d03e      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xd4>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	f200 8087 	bhi.w	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	f000 8086 	beq.w	800585a <HAL_TIM_ConfigClockSource+0x172>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d87f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b70      	cmp	r3, #112	; 0x70
 8005756:	d01a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xa6>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d87b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b60      	cmp	r3, #96	; 0x60
 800575e:	d050      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x11a>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d877      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b50      	cmp	r3, #80	; 0x50
 8005766:	d03c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d873      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d058      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x13a>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d86f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d064      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d86b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d060      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d867      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005788:	2b10      	cmp	r3, #16
 800578a:	d05a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	e062      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f000 f965 	bl	8005a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e04f      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f000 f94e 	bl	8005a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e03c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 f8c2 	bl	8005978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2150      	movs	r1, #80	; 0x50
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f91b 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005800:	e02c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	461a      	mov	r2, r3
 8005810:	f000 f8e1 	bl	80059d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2160      	movs	r1, #96	; 0x60
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f90b 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005820:	e01c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f8a2 	bl	8005978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f8fb 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005840:	e00c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 f8f2 	bl	8005a36 <TIM_ITRx_SetConfig>
      break;
 8005852:	e003      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e000      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a34      	ldr	r2, [pc, #208]	; (800595c <TIM_Base_SetConfig+0xe4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a31      	ldr	r2, [pc, #196]	; (8005960 <TIM_Base_SetConfig+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a30      	ldr	r2, [pc, #192]	; (8005964 <TIM_Base_SetConfig+0xec>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x38>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <TIM_Base_SetConfig+0xf0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <TIM_Base_SetConfig+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01b      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d017      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a22      	ldr	r2, [pc, #136]	; (8005960 <TIM_Base_SetConfig+0xe8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a21      	ldr	r2, [pc, #132]	; (8005964 <TIM_Base_SetConfig+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00f      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a20      	ldr	r2, [pc, #128]	; (8005968 <TIM_Base_SetConfig+0xf0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <TIM_Base_SetConfig+0xf4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <TIM_Base_SetConfig+0xf8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_Base_SetConfig+0x8a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <TIM_Base_SetConfig+0xfc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <TIM_Base_SetConfig+0xe4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d103      	bne.n	8005948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	615a      	str	r2, [r3, #20]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f023 0201 	bic.w	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 030a 	bic.w	r3, r3, #10
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b087      	sub	sp, #28
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0210 	bic.w	r2, r3, #16
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	031b      	lsls	r3, r3, #12
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f043 0307 	orr.w	r3, r3, #7
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	609a      	str	r2, [r3, #8]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e050      	b.n	8005b66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d018      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d013      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d10c      	bne.n	8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40000c00 	.word	0x40000c00
 8005b84:	40014000 	.word	0x40014000

08005b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e03f      	b.n	8005c1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fd fc24 	bl	80033fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f929 	bl	8005e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b08a      	sub	sp, #40	; 0x28
 8005c26:	af02      	add	r7, sp, #8
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d17c      	bne.n	8005d3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_UART_Transmit+0x2c>
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e075      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Transmit+0x3e>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e06e      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2221      	movs	r2, #33	; 0x21
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c76:	f7fd fda5 	bl	80037c4 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	88fa      	ldrh	r2, [r7, #6]
 8005c86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d108      	bne.n	8005ca4 <HAL_UART_Transmit+0x82>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	e003      	b.n	8005cac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cb4:	e02a      	b.n	8005d0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f840 	bl	8005d46 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e036      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10b      	bne.n	8005cee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e007      	b.n	8005cfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1cf      	bne.n	8005cb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2140      	movs	r1, #64	; 0x40
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f810 	bl	8005d46 <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e006      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b090      	sub	sp, #64	; 0x40
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d56:	e050      	b.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d04c      	beq.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d66:	f7fd fd2d 	bl	80037c4 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d241      	bcs.n	8005dfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d96:	637a      	str	r2, [r7, #52]	; 0x34
 8005d98:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e5      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dca:	623a      	str	r2, [r7, #32]
 8005dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	69f9      	ldr	r1, [r7, #28]
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e00f      	b.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d09f      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3740      	adds	r7, #64	; 0x40
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	b09f      	sub	sp, #124	; 0x7c
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	68d9      	ldr	r1, [r3, #12]
 8005e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	ea40 0301 	orr.w	r3, r0, r1
 8005e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e68:	f021 010c 	bic.w	r1, r1, #12
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e72:	430b      	orrs	r3, r1
 8005e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e82:	6999      	ldr	r1, [r3, #24]
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	ea40 0301 	orr.w	r3, r0, r1
 8005e8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4bc5      	ldr	r3, [pc, #788]	; (80061a8 <UART_SetConfig+0x384>)
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d004      	beq.n	8005ea2 <UART_SetConfig+0x7e>
 8005e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4bc3      	ldr	r3, [pc, #780]	; (80061ac <UART_SetConfig+0x388>)
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d103      	bne.n	8005eaa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ea2:	f7ff fb63 	bl	800556c <HAL_RCC_GetPCLK2Freq>
 8005ea6:	6778      	str	r0, [r7, #116]	; 0x74
 8005ea8:	e002      	b.n	8005eb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eaa:	f7ff fb4b 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8005eae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb8:	f040 80b6 	bne.w	8006028 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	f04f 0500 	mov.w	r5, #0
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	462b      	mov	r3, r5
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	6439      	str	r1, [r7, #64]	; 0x40
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ed4:	1912      	adds	r2, r2, r4
 8005ed6:	eb45 0303 	adc.w	r3, r5, r3
 8005eda:	f04f 0000 	mov.w	r0, #0
 8005ede:	f04f 0100 	mov.w	r1, #0
 8005ee2:	00d9      	lsls	r1, r3, #3
 8005ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ee8:	00d0      	lsls	r0, r2, #3
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	1911      	adds	r1, r2, r4
 8005ef0:	6639      	str	r1, [r7, #96]	; 0x60
 8005ef2:	416b      	adcs	r3, r5
 8005ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	1891      	adds	r1, r2, r2
 8005f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f04:	415b      	adcs	r3, r3
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f10:	f7fa fe7a 	bl	8000c08 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4ba5      	ldr	r3, [pc, #660]	; (80061b0 <UART_SetConfig+0x38c>)
 8005f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	011e      	lsls	r6, r3, #4
 8005f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f24:	461c      	mov	r4, r3
 8005f26:	f04f 0500 	mov.w	r5, #0
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	6339      	str	r1, [r7, #48]	; 0x30
 8005f32:	415b      	adcs	r3, r3
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
 8005f36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f3a:	1912      	adds	r2, r2, r4
 8005f3c:	eb45 0303 	adc.w	r3, r5, r3
 8005f40:	f04f 0000 	mov.w	r0, #0
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	00d9      	lsls	r1, r3, #3
 8005f4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f4e:	00d0      	lsls	r0, r2, #3
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	1911      	adds	r1, r2, r4
 8005f56:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f58:	416b      	adcs	r3, r5
 8005f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	1891      	adds	r1, r2, r2
 8005f68:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f6a:	415b      	adcs	r3, r3
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f76:	f7fa fe47 	bl	8000c08 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4b8c      	ldr	r3, [pc, #560]	; (80061b0 <UART_SetConfig+0x38c>)
 8005f80:	fba3 1302 	umull	r1, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	2164      	movs	r1, #100	; 0x64
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	3332      	adds	r3, #50	; 0x32
 8005f92:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <UART_SetConfig+0x38c>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fa0:	441e      	add	r6, r3
 8005fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f04f 0100 	mov.w	r1, #0
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	1894      	adds	r4, r2, r2
 8005fb0:	623c      	str	r4, [r7, #32]
 8005fb2:	415b      	adcs	r3, r3
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fba:	1812      	adds	r2, r2, r0
 8005fbc:	eb41 0303 	adc.w	r3, r1, r3
 8005fc0:	f04f 0400 	mov.w	r4, #0
 8005fc4:	f04f 0500 	mov.w	r5, #0
 8005fc8:	00dd      	lsls	r5, r3, #3
 8005fca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fce:	00d4      	lsls	r4, r2, #3
 8005fd0:	4622      	mov	r2, r4
 8005fd2:	462b      	mov	r3, r5
 8005fd4:	1814      	adds	r4, r2, r0
 8005fd6:	653c      	str	r4, [r7, #80]	; 0x50
 8005fd8:	414b      	adcs	r3, r1
 8005fda:	657b      	str	r3, [r7, #84]	; 0x54
 8005fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	1891      	adds	r1, r2, r2
 8005fe8:	61b9      	str	r1, [r7, #24]
 8005fea:	415b      	adcs	r3, r3
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ff6:	f7fa fe07 	bl	8000c08 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <UART_SetConfig+0x38c>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	3332      	adds	r3, #50	; 0x32
 8006012:	4a67      	ldr	r2, [pc, #412]	; (80061b0 <UART_SetConfig+0x38c>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 0207 	and.w	r2, r3, #7
 800601e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4432      	add	r2, r6
 8006024:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006026:	e0b9      	b.n	800619c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602a:	461c      	mov	r4, r3
 800602c:	f04f 0500 	mov.w	r5, #0
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	1891      	adds	r1, r2, r2
 8006036:	6139      	str	r1, [r7, #16]
 8006038:	415b      	adcs	r3, r3
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006040:	1912      	adds	r2, r2, r4
 8006042:	eb45 0303 	adc.w	r3, r5, r3
 8006046:	f04f 0000 	mov.w	r0, #0
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	00d9      	lsls	r1, r3, #3
 8006050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006054:	00d0      	lsls	r0, r2, #3
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	eb12 0804 	adds.w	r8, r2, r4
 800605e:	eb43 0905 	adc.w	r9, r3, r5
 8006062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	008b      	lsls	r3, r1, #2
 8006076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800607a:	0082      	lsls	r2, r0, #2
 800607c:	4640      	mov	r0, r8
 800607e:	4649      	mov	r1, r9
 8006080:	f7fa fdc2 	bl	8000c08 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <UART_SetConfig+0x38c>)
 800608a:	fba3 2302 	umull	r2, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	011e      	lsls	r6, r3, #4
 8006092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006094:	4618      	mov	r0, r3
 8006096:	f04f 0100 	mov.w	r1, #0
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	1894      	adds	r4, r2, r2
 80060a0:	60bc      	str	r4, [r7, #8]
 80060a2:	415b      	adcs	r3, r3
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060aa:	1812      	adds	r2, r2, r0
 80060ac:	eb41 0303 	adc.w	r3, r1, r3
 80060b0:	f04f 0400 	mov.w	r4, #0
 80060b4:	f04f 0500 	mov.w	r5, #0
 80060b8:	00dd      	lsls	r5, r3, #3
 80060ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060be:	00d4      	lsls	r4, r2, #3
 80060c0:	4622      	mov	r2, r4
 80060c2:	462b      	mov	r3, r5
 80060c4:	1814      	adds	r4, r2, r0
 80060c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80060c8:	414b      	adcs	r3, r1
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f04f 0100 	mov.w	r1, #0
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060e4:	0082      	lsls	r2, r0, #2
 80060e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060ea:	f7fa fd8d 	bl	8000c08 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <UART_SetConfig+0x38c>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	; 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	3332      	adds	r3, #50	; 0x32
 8006106:	4a2a      	ldr	r2, [pc, #168]	; (80061b0 <UART_SetConfig+0x38c>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006112:	441e      	add	r6, r3
 8006114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006116:	4618      	mov	r0, r3
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	1894      	adds	r4, r2, r2
 8006122:	603c      	str	r4, [r7, #0]
 8006124:	415b      	adcs	r3, r3
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612c:	1812      	adds	r2, r2, r0
 800612e:	eb41 0303 	adc.w	r3, r1, r3
 8006132:	f04f 0400 	mov.w	r4, #0
 8006136:	f04f 0500 	mov.w	r5, #0
 800613a:	00dd      	lsls	r5, r3, #3
 800613c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006140:	00d4      	lsls	r4, r2, #3
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	eb12 0a00 	adds.w	sl, r2, r0
 800614a:	eb43 0b01 	adc.w	fp, r3, r1
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4618      	mov	r0, r3
 8006154:	f04f 0100 	mov.w	r1, #0
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	008b      	lsls	r3, r1, #2
 8006162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006166:	0082      	lsls	r2, r0, #2
 8006168:	4650      	mov	r0, sl
 800616a:	4659      	mov	r1, fp
 800616c:	f7fa fd4c 	bl	8000c08 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <UART_SetConfig+0x38c>)
 8006176:	fba3 1302 	umull	r1, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2164      	movs	r1, #100	; 0x64
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	3332      	adds	r3, #50	; 0x32
 8006188:	4a09      	ldr	r2, [pc, #36]	; (80061b0 <UART_SetConfig+0x38c>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 020f 	and.w	r2, r3, #15
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4432      	add	r2, r6
 800619a:	609a      	str	r2, [r3, #8]
}
 800619c:	bf00      	nop
 800619e:	377c      	adds	r7, #124	; 0x7c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	bf00      	nop
 80061a8:	40011000 	.word	0x40011000
 80061ac:	40011400 	.word	0x40011400
 80061b0:	51eb851f 	.word	0x51eb851f

080061b4 <__errno>:
 80061b4:	4b01      	ldr	r3, [pc, #4]	; (80061bc <__errno+0x8>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	200002f8 	.word	0x200002f8

080061c0 <__libc_init_array>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	4d0d      	ldr	r5, [pc, #52]	; (80061f8 <__libc_init_array+0x38>)
 80061c4:	4c0d      	ldr	r4, [pc, #52]	; (80061fc <__libc_init_array+0x3c>)
 80061c6:	1b64      	subs	r4, r4, r5
 80061c8:	10a4      	asrs	r4, r4, #2
 80061ca:	2600      	movs	r6, #0
 80061cc:	42a6      	cmp	r6, r4
 80061ce:	d109      	bne.n	80061e4 <__libc_init_array+0x24>
 80061d0:	4d0b      	ldr	r5, [pc, #44]	; (8006200 <__libc_init_array+0x40>)
 80061d2:	4c0c      	ldr	r4, [pc, #48]	; (8006204 <__libc_init_array+0x44>)
 80061d4:	f001 fdda 	bl	8007d8c <_init>
 80061d8:	1b64      	subs	r4, r4, r5
 80061da:	10a4      	asrs	r4, r4, #2
 80061dc:	2600      	movs	r6, #0
 80061de:	42a6      	cmp	r6, r4
 80061e0:	d105      	bne.n	80061ee <__libc_init_array+0x2e>
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e8:	4798      	blx	r3
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7ee      	b.n	80061cc <__libc_init_array+0xc>
 80061ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f2:	4798      	blx	r3
 80061f4:	3601      	adds	r6, #1
 80061f6:	e7f2      	b.n	80061de <__libc_init_array+0x1e>
 80061f8:	08007f00 	.word	0x08007f00
 80061fc:	08007f00 	.word	0x08007f00
 8006200:	08007f00 	.word	0x08007f00
 8006204:	08007f04 	.word	0x08007f04

08006208 <memset>:
 8006208:	4402      	add	r2, r0
 800620a:	4603      	mov	r3, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	d100      	bne.n	8006212 <memset+0xa>
 8006210:	4770      	bx	lr
 8006212:	f803 1b01 	strb.w	r1, [r3], #1
 8006216:	e7f9      	b.n	800620c <memset+0x4>

08006218 <siprintf>:
 8006218:	b40e      	push	{r1, r2, r3}
 800621a:	b500      	push	{lr}
 800621c:	b09c      	sub	sp, #112	; 0x70
 800621e:	ab1d      	add	r3, sp, #116	; 0x74
 8006220:	9002      	str	r0, [sp, #8]
 8006222:	9006      	str	r0, [sp, #24]
 8006224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006228:	4809      	ldr	r0, [pc, #36]	; (8006250 <siprintf+0x38>)
 800622a:	9107      	str	r1, [sp, #28]
 800622c:	9104      	str	r1, [sp, #16]
 800622e:	4909      	ldr	r1, [pc, #36]	; (8006254 <siprintf+0x3c>)
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
 8006234:	9105      	str	r1, [sp, #20]
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	a902      	add	r1, sp, #8
 800623c:	f000 f868 	bl	8006310 <_svfiprintf_r>
 8006240:	9b02      	ldr	r3, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	b01c      	add	sp, #112	; 0x70
 8006248:	f85d eb04 	ldr.w	lr, [sp], #4
 800624c:	b003      	add	sp, #12
 800624e:	4770      	bx	lr
 8006250:	200002f8 	.word	0x200002f8
 8006254:	ffff0208 	.word	0xffff0208

08006258 <__ssputs_r>:
 8006258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800625c:	688e      	ldr	r6, [r1, #8]
 800625e:	429e      	cmp	r6, r3
 8006260:	4682      	mov	sl, r0
 8006262:	460c      	mov	r4, r1
 8006264:	4690      	mov	r8, r2
 8006266:	461f      	mov	r7, r3
 8006268:	d838      	bhi.n	80062dc <__ssputs_r+0x84>
 800626a:	898a      	ldrh	r2, [r1, #12]
 800626c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006270:	d032      	beq.n	80062d8 <__ssputs_r+0x80>
 8006272:	6825      	ldr	r5, [r4, #0]
 8006274:	6909      	ldr	r1, [r1, #16]
 8006276:	eba5 0901 	sub.w	r9, r5, r1
 800627a:	6965      	ldr	r5, [r4, #20]
 800627c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006284:	3301      	adds	r3, #1
 8006286:	444b      	add	r3, r9
 8006288:	106d      	asrs	r5, r5, #1
 800628a:	429d      	cmp	r5, r3
 800628c:	bf38      	it	cc
 800628e:	461d      	movcc	r5, r3
 8006290:	0553      	lsls	r3, r2, #21
 8006292:	d531      	bpl.n	80062f8 <__ssputs_r+0xa0>
 8006294:	4629      	mov	r1, r5
 8006296:	f000 fb47 	bl	8006928 <_malloc_r>
 800629a:	4606      	mov	r6, r0
 800629c:	b950      	cbnz	r0, 80062b4 <__ssputs_r+0x5c>
 800629e:	230c      	movs	r3, #12
 80062a0:	f8ca 3000 	str.w	r3, [sl]
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	6921      	ldr	r1, [r4, #16]
 80062b6:	464a      	mov	r2, r9
 80062b8:	f000 fabe 	bl	8006838 <memcpy>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c6:	81a3      	strh	r3, [r4, #12]
 80062c8:	6126      	str	r6, [r4, #16]
 80062ca:	6165      	str	r5, [r4, #20]
 80062cc:	444e      	add	r6, r9
 80062ce:	eba5 0509 	sub.w	r5, r5, r9
 80062d2:	6026      	str	r6, [r4, #0]
 80062d4:	60a5      	str	r5, [r4, #8]
 80062d6:	463e      	mov	r6, r7
 80062d8:	42be      	cmp	r6, r7
 80062da:	d900      	bls.n	80062de <__ssputs_r+0x86>
 80062dc:	463e      	mov	r6, r7
 80062de:	4632      	mov	r2, r6
 80062e0:	6820      	ldr	r0, [r4, #0]
 80062e2:	4641      	mov	r1, r8
 80062e4:	f000 fab6 	bl	8006854 <memmove>
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	1b9b      	subs	r3, r3, r6
 80062ee:	4432      	add	r2, r6
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	2000      	movs	r0, #0
 80062f6:	e7db      	b.n	80062b0 <__ssputs_r+0x58>
 80062f8:	462a      	mov	r2, r5
 80062fa:	f000 fb6f 	bl	80069dc <_realloc_r>
 80062fe:	4606      	mov	r6, r0
 8006300:	2800      	cmp	r0, #0
 8006302:	d1e1      	bne.n	80062c8 <__ssputs_r+0x70>
 8006304:	6921      	ldr	r1, [r4, #16]
 8006306:	4650      	mov	r0, sl
 8006308:	f000 fabe 	bl	8006888 <_free_r>
 800630c:	e7c7      	b.n	800629e <__ssputs_r+0x46>
	...

08006310 <_svfiprintf_r>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	4698      	mov	r8, r3
 8006316:	898b      	ldrh	r3, [r1, #12]
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	b09d      	sub	sp, #116	; 0x74
 800631c:	4607      	mov	r7, r0
 800631e:	460d      	mov	r5, r1
 8006320:	4614      	mov	r4, r2
 8006322:	d50e      	bpl.n	8006342 <_svfiprintf_r+0x32>
 8006324:	690b      	ldr	r3, [r1, #16]
 8006326:	b963      	cbnz	r3, 8006342 <_svfiprintf_r+0x32>
 8006328:	2140      	movs	r1, #64	; 0x40
 800632a:	f000 fafd 	bl	8006928 <_malloc_r>
 800632e:	6028      	str	r0, [r5, #0]
 8006330:	6128      	str	r0, [r5, #16]
 8006332:	b920      	cbnz	r0, 800633e <_svfiprintf_r+0x2e>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	f04f 30ff 	mov.w	r0, #4294967295
 800633c:	e0d1      	b.n	80064e2 <_svfiprintf_r+0x1d2>
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	616b      	str	r3, [r5, #20]
 8006342:	2300      	movs	r3, #0
 8006344:	9309      	str	r3, [sp, #36]	; 0x24
 8006346:	2320      	movs	r3, #32
 8006348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800634c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006350:	2330      	movs	r3, #48	; 0x30
 8006352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064fc <_svfiprintf_r+0x1ec>
 8006356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800635a:	f04f 0901 	mov.w	r9, #1
 800635e:	4623      	mov	r3, r4
 8006360:	469a      	mov	sl, r3
 8006362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006366:	b10a      	cbz	r2, 800636c <_svfiprintf_r+0x5c>
 8006368:	2a25      	cmp	r2, #37	; 0x25
 800636a:	d1f9      	bne.n	8006360 <_svfiprintf_r+0x50>
 800636c:	ebba 0b04 	subs.w	fp, sl, r4
 8006370:	d00b      	beq.n	800638a <_svfiprintf_r+0x7a>
 8006372:	465b      	mov	r3, fp
 8006374:	4622      	mov	r2, r4
 8006376:	4629      	mov	r1, r5
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff ff6d 	bl	8006258 <__ssputs_r>
 800637e:	3001      	adds	r0, #1
 8006380:	f000 80aa 	beq.w	80064d8 <_svfiprintf_r+0x1c8>
 8006384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006386:	445a      	add	r2, fp
 8006388:	9209      	str	r2, [sp, #36]	; 0x24
 800638a:	f89a 3000 	ldrb.w	r3, [sl]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80a2 	beq.w	80064d8 <_svfiprintf_r+0x1c8>
 8006394:	2300      	movs	r3, #0
 8006396:	f04f 32ff 	mov.w	r2, #4294967295
 800639a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800639e:	f10a 0a01 	add.w	sl, sl, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	9307      	str	r3, [sp, #28]
 80063a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063aa:	931a      	str	r3, [sp, #104]	; 0x68
 80063ac:	4654      	mov	r4, sl
 80063ae:	2205      	movs	r2, #5
 80063b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b4:	4851      	ldr	r0, [pc, #324]	; (80064fc <_svfiprintf_r+0x1ec>)
 80063b6:	f7f9 ff1b 	bl	80001f0 <memchr>
 80063ba:	9a04      	ldr	r2, [sp, #16]
 80063bc:	b9d8      	cbnz	r0, 80063f6 <_svfiprintf_r+0xe6>
 80063be:	06d0      	lsls	r0, r2, #27
 80063c0:	bf44      	itt	mi
 80063c2:	2320      	movmi	r3, #32
 80063c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c8:	0711      	lsls	r1, r2, #28
 80063ca:	bf44      	itt	mi
 80063cc:	232b      	movmi	r3, #43	; 0x2b
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d2:	f89a 3000 	ldrb.w	r3, [sl]
 80063d6:	2b2a      	cmp	r3, #42	; 0x2a
 80063d8:	d015      	beq.n	8006406 <_svfiprintf_r+0xf6>
 80063da:	9a07      	ldr	r2, [sp, #28]
 80063dc:	4654      	mov	r4, sl
 80063de:	2000      	movs	r0, #0
 80063e0:	f04f 0c0a 	mov.w	ip, #10
 80063e4:	4621      	mov	r1, r4
 80063e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ea:	3b30      	subs	r3, #48	; 0x30
 80063ec:	2b09      	cmp	r3, #9
 80063ee:	d94e      	bls.n	800648e <_svfiprintf_r+0x17e>
 80063f0:	b1b0      	cbz	r0, 8006420 <_svfiprintf_r+0x110>
 80063f2:	9207      	str	r2, [sp, #28]
 80063f4:	e014      	b.n	8006420 <_svfiprintf_r+0x110>
 80063f6:	eba0 0308 	sub.w	r3, r0, r8
 80063fa:	fa09 f303 	lsl.w	r3, r9, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	46a2      	mov	sl, r4
 8006404:	e7d2      	b.n	80063ac <_svfiprintf_r+0x9c>
 8006406:	9b03      	ldr	r3, [sp, #12]
 8006408:	1d19      	adds	r1, r3, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	9103      	str	r1, [sp, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfbb      	ittet	lt
 8006412:	425b      	neglt	r3, r3
 8006414:	f042 0202 	orrlt.w	r2, r2, #2
 8006418:	9307      	strge	r3, [sp, #28]
 800641a:	9307      	strlt	r3, [sp, #28]
 800641c:	bfb8      	it	lt
 800641e:	9204      	strlt	r2, [sp, #16]
 8006420:	7823      	ldrb	r3, [r4, #0]
 8006422:	2b2e      	cmp	r3, #46	; 0x2e
 8006424:	d10c      	bne.n	8006440 <_svfiprintf_r+0x130>
 8006426:	7863      	ldrb	r3, [r4, #1]
 8006428:	2b2a      	cmp	r3, #42	; 0x2a
 800642a:	d135      	bne.n	8006498 <_svfiprintf_r+0x188>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	9203      	str	r2, [sp, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	bfb8      	it	lt
 8006438:	f04f 33ff 	movlt.w	r3, #4294967295
 800643c:	3402      	adds	r4, #2
 800643e:	9305      	str	r3, [sp, #20]
 8006440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800650c <_svfiprintf_r+0x1fc>
 8006444:	7821      	ldrb	r1, [r4, #0]
 8006446:	2203      	movs	r2, #3
 8006448:	4650      	mov	r0, sl
 800644a:	f7f9 fed1 	bl	80001f0 <memchr>
 800644e:	b140      	cbz	r0, 8006462 <_svfiprintf_r+0x152>
 8006450:	2340      	movs	r3, #64	; 0x40
 8006452:	eba0 000a 	sub.w	r0, r0, sl
 8006456:	fa03 f000 	lsl.w	r0, r3, r0
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	4303      	orrs	r3, r0
 800645e:	3401      	adds	r4, #1
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006466:	4826      	ldr	r0, [pc, #152]	; (8006500 <_svfiprintf_r+0x1f0>)
 8006468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800646c:	2206      	movs	r2, #6
 800646e:	f7f9 febf 	bl	80001f0 <memchr>
 8006472:	2800      	cmp	r0, #0
 8006474:	d038      	beq.n	80064e8 <_svfiprintf_r+0x1d8>
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <_svfiprintf_r+0x1f4>)
 8006478:	bb1b      	cbnz	r3, 80064c2 <_svfiprintf_r+0x1b2>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	3307      	adds	r3, #7
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	3308      	adds	r3, #8
 8006484:	9303      	str	r3, [sp, #12]
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	4433      	add	r3, r6
 800648a:	9309      	str	r3, [sp, #36]	; 0x24
 800648c:	e767      	b.n	800635e <_svfiprintf_r+0x4e>
 800648e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006492:	460c      	mov	r4, r1
 8006494:	2001      	movs	r0, #1
 8006496:	e7a5      	b.n	80063e4 <_svfiprintf_r+0xd4>
 8006498:	2300      	movs	r3, #0
 800649a:	3401      	adds	r4, #1
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	4619      	mov	r1, r3
 80064a0:	f04f 0c0a 	mov.w	ip, #10
 80064a4:	4620      	mov	r0, r4
 80064a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064aa:	3a30      	subs	r2, #48	; 0x30
 80064ac:	2a09      	cmp	r2, #9
 80064ae:	d903      	bls.n	80064b8 <_svfiprintf_r+0x1a8>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0c5      	beq.n	8006440 <_svfiprintf_r+0x130>
 80064b4:	9105      	str	r1, [sp, #20]
 80064b6:	e7c3      	b.n	8006440 <_svfiprintf_r+0x130>
 80064b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80064bc:	4604      	mov	r4, r0
 80064be:	2301      	movs	r3, #1
 80064c0:	e7f0      	b.n	80064a4 <_svfiprintf_r+0x194>
 80064c2:	ab03      	add	r3, sp, #12
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	462a      	mov	r2, r5
 80064c8:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <_svfiprintf_r+0x1f8>)
 80064ca:	a904      	add	r1, sp, #16
 80064cc:	4638      	mov	r0, r7
 80064ce:	f3af 8000 	nop.w
 80064d2:	1c42      	adds	r2, r0, #1
 80064d4:	4606      	mov	r6, r0
 80064d6:	d1d6      	bne.n	8006486 <_svfiprintf_r+0x176>
 80064d8:	89ab      	ldrh	r3, [r5, #12]
 80064da:	065b      	lsls	r3, r3, #25
 80064dc:	f53f af2c 	bmi.w	8006338 <_svfiprintf_r+0x28>
 80064e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064e2:	b01d      	add	sp, #116	; 0x74
 80064e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e8:	ab03      	add	r3, sp, #12
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	462a      	mov	r2, r5
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <_svfiprintf_r+0x1f8>)
 80064f0:	a904      	add	r1, sp, #16
 80064f2:	4638      	mov	r0, r7
 80064f4:	f000 f87a 	bl	80065ec <_printf_i>
 80064f8:	e7eb      	b.n	80064d2 <_svfiprintf_r+0x1c2>
 80064fa:	bf00      	nop
 80064fc:	08007e40 	.word	0x08007e40
 8006500:	08007e4a 	.word	0x08007e4a
 8006504:	00000000 	.word	0x00000000
 8006508:	08006259 	.word	0x08006259
 800650c:	08007e46 	.word	0x08007e46

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4699      	mov	r9, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800655c:	1e13      	subs	r3, r2, #0
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656c:	4649      	mov	r1, r9
 800656e:	4638      	mov	r0, r7
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	68e5      	ldr	r5, [r4, #12]
 800657a:	6832      	ldr	r2, [r6, #0]
 800657c:	f003 0306 	and.w	r3, r3, #6
 8006580:	2b04      	cmp	r3, #4
 8006582:	bf08      	it	eq
 8006584:	1aad      	subeq	r5, r5, r2
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	6922      	ldr	r2, [r4, #16]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4649      	mov	r1, r9
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c0      	blx	r8
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	; 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4649      	mov	r1, r9
 80065de:	4638      	mov	r0, r7
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	460c      	mov	r4, r1
 80065f2:	4691      	mov	r9, r2
 80065f4:	7e27      	ldrb	r7, [r4, #24]
 80065f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065f8:	2f78      	cmp	r7, #120	; 0x78
 80065fa:	4680      	mov	r8, r0
 80065fc:	469a      	mov	sl, r3
 80065fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	; 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d8 	beq.w	80067be <_printf_i+0x1d2>
 800660e:	2f58      	cmp	r7, #88	; 0x58
 8006610:	f000 80a3 	beq.w	800675a <_printf_i+0x16e>
 8006614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a001      	add	r0, pc, #4	; (adr r0, 800662c <_printf_i+0x40>)
 8006628:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	080067a5 	.word	0x080067a5
 800665c:	080066c9 	.word	0x080066c9
 8006660:	08006787 	.word	0x08006787
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067c7 	.word	0x080067c7
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c9 	.word	0x080066c9
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800678f 	.word	0x0800678f
 8006684:	680b      	ldr	r3, [r1, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	600a      	str	r2, [r1, #0]
 800668c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e0a3      	b.n	80067e0 <_printf_i+0x1f4>
 8006698:	6825      	ldr	r5, [r4, #0]
 800669a:	6808      	ldr	r0, [r1, #0]
 800669c:	062e      	lsls	r6, r5, #24
 800669e:	f100 0304 	add.w	r3, r0, #4
 80066a2:	d50a      	bpl.n	80066ba <_printf_i+0xce>
 80066a4:	6805      	ldr	r5, [r0, #0]
 80066a6:	600b      	str	r3, [r1, #0]
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	da03      	bge.n	80066b4 <_printf_i+0xc8>
 80066ac:	232d      	movs	r3, #45	; 0x2d
 80066ae:	426d      	negs	r5, r5
 80066b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b4:	485e      	ldr	r0, [pc, #376]	; (8006830 <_printf_i+0x244>)
 80066b6:	230a      	movs	r3, #10
 80066b8:	e019      	b.n	80066ee <_printf_i+0x102>
 80066ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066be:	6805      	ldr	r5, [r0, #0]
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	bf18      	it	ne
 80066c4:	b22d      	sxthne	r5, r5
 80066c6:	e7ef      	b.n	80066a8 <_printf_i+0xbc>
 80066c8:	680b      	ldr	r3, [r1, #0]
 80066ca:	6825      	ldr	r5, [r4, #0]
 80066cc:	1d18      	adds	r0, r3, #4
 80066ce:	6008      	str	r0, [r1, #0]
 80066d0:	0628      	lsls	r0, r5, #24
 80066d2:	d501      	bpl.n	80066d8 <_printf_i+0xec>
 80066d4:	681d      	ldr	r5, [r3, #0]
 80066d6:	e002      	b.n	80066de <_printf_i+0xf2>
 80066d8:	0669      	lsls	r1, r5, #25
 80066da:	d5fb      	bpl.n	80066d4 <_printf_i+0xe8>
 80066dc:	881d      	ldrh	r5, [r3, #0]
 80066de:	4854      	ldr	r0, [pc, #336]	; (8006830 <_printf_i+0x244>)
 80066e0:	2f6f      	cmp	r7, #111	; 0x6f
 80066e2:	bf0c      	ite	eq
 80066e4:	2308      	moveq	r3, #8
 80066e6:	230a      	movne	r3, #10
 80066e8:	2100      	movs	r1, #0
 80066ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066ee:	6866      	ldr	r6, [r4, #4]
 80066f0:	60a6      	str	r6, [r4, #8]
 80066f2:	2e00      	cmp	r6, #0
 80066f4:	bfa2      	ittt	ge
 80066f6:	6821      	ldrge	r1, [r4, #0]
 80066f8:	f021 0104 	bicge.w	r1, r1, #4
 80066fc:	6021      	strge	r1, [r4, #0]
 80066fe:	b90d      	cbnz	r5, 8006704 <_printf_i+0x118>
 8006700:	2e00      	cmp	r6, #0
 8006702:	d04d      	beq.n	80067a0 <_printf_i+0x1b4>
 8006704:	4616      	mov	r6, r2
 8006706:	fbb5 f1f3 	udiv	r1, r5, r3
 800670a:	fb03 5711 	mls	r7, r3, r1, r5
 800670e:	5dc7      	ldrb	r7, [r0, r7]
 8006710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006714:	462f      	mov	r7, r5
 8006716:	42bb      	cmp	r3, r7
 8006718:	460d      	mov	r5, r1
 800671a:	d9f4      	bls.n	8006706 <_printf_i+0x11a>
 800671c:	2b08      	cmp	r3, #8
 800671e:	d10b      	bne.n	8006738 <_printf_i+0x14c>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07df      	lsls	r7, r3, #31
 8006724:	d508      	bpl.n	8006738 <_printf_i+0x14c>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4299      	cmp	r1, r3
 800672c:	bfde      	ittt	le
 800672e:	2330      	movle	r3, #48	; 0x30
 8006730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006738:	1b92      	subs	r2, r2, r6
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	f8cd a000 	str.w	sl, [sp]
 8006740:	464b      	mov	r3, r9
 8006742:	aa03      	add	r2, sp, #12
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fee2 	bl	8006510 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	d14c      	bne.n	80067ea <_printf_i+0x1fe>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	b004      	add	sp, #16
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	4835      	ldr	r0, [pc, #212]	; (8006830 <_printf_i+0x244>)
 800675c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	680e      	ldr	r6, [r1, #0]
 8006764:	061f      	lsls	r7, r3, #24
 8006766:	f856 5b04 	ldr.w	r5, [r6], #4
 800676a:	600e      	str	r6, [r1, #0]
 800676c:	d514      	bpl.n	8006798 <_printf_i+0x1ac>
 800676e:	07d9      	lsls	r1, r3, #31
 8006770:	bf44      	itt	mi
 8006772:	f043 0320 	orrmi.w	r3, r3, #32
 8006776:	6023      	strmi	r3, [r4, #0]
 8006778:	b91d      	cbnz	r5, 8006782 <_printf_i+0x196>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2310      	movs	r3, #16
 8006784:	e7b0      	b.n	80066e8 <_printf_i+0xfc>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f043 0320 	orr.w	r3, r3, #32
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	2378      	movs	r3, #120	; 0x78
 8006790:	4828      	ldr	r0, [pc, #160]	; (8006834 <_printf_i+0x248>)
 8006792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006796:	e7e3      	b.n	8006760 <_printf_i+0x174>
 8006798:	065e      	lsls	r6, r3, #25
 800679a:	bf48      	it	mi
 800679c:	b2ad      	uxthmi	r5, r5
 800679e:	e7e6      	b.n	800676e <_printf_i+0x182>
 80067a0:	4616      	mov	r6, r2
 80067a2:	e7bb      	b.n	800671c <_printf_i+0x130>
 80067a4:	680b      	ldr	r3, [r1, #0]
 80067a6:	6826      	ldr	r6, [r4, #0]
 80067a8:	6960      	ldr	r0, [r4, #20]
 80067aa:	1d1d      	adds	r5, r3, #4
 80067ac:	600d      	str	r5, [r1, #0]
 80067ae:	0635      	lsls	r5, r6, #24
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	d501      	bpl.n	80067b8 <_printf_i+0x1cc>
 80067b4:	6018      	str	r0, [r3, #0]
 80067b6:	e002      	b.n	80067be <_printf_i+0x1d2>
 80067b8:	0671      	lsls	r1, r6, #25
 80067ba:	d5fb      	bpl.n	80067b4 <_printf_i+0x1c8>
 80067bc:	8018      	strh	r0, [r3, #0]
 80067be:	2300      	movs	r3, #0
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	4616      	mov	r6, r2
 80067c4:	e7ba      	b.n	800673c <_printf_i+0x150>
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	600a      	str	r2, [r1, #0]
 80067cc:	681e      	ldr	r6, [r3, #0]
 80067ce:	6862      	ldr	r2, [r4, #4]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7f9 fd0c 	bl	80001f0 <memchr>
 80067d8:	b108      	cbz	r0, 80067de <_printf_i+0x1f2>
 80067da:	1b80      	subs	r0, r0, r6
 80067dc:	6060      	str	r0, [r4, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	2300      	movs	r3, #0
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067e8:	e7a8      	b.n	800673c <_printf_i+0x150>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	4632      	mov	r2, r6
 80067ee:	4649      	mov	r1, r9
 80067f0:	4640      	mov	r0, r8
 80067f2:	47d0      	blx	sl
 80067f4:	3001      	adds	r0, #1
 80067f6:	d0ab      	beq.n	8006750 <_printf_i+0x164>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	079b      	lsls	r3, r3, #30
 80067fc:	d413      	bmi.n	8006826 <_printf_i+0x23a>
 80067fe:	68e0      	ldr	r0, [r4, #12]
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	4298      	cmp	r0, r3
 8006804:	bfb8      	it	lt
 8006806:	4618      	movlt	r0, r3
 8006808:	e7a4      	b.n	8006754 <_printf_i+0x168>
 800680a:	2301      	movs	r3, #1
 800680c:	4632      	mov	r2, r6
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d09b      	beq.n	8006750 <_printf_i+0x164>
 8006818:	3501      	adds	r5, #1
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	9903      	ldr	r1, [sp, #12]
 800681e:	1a5b      	subs	r3, r3, r1
 8006820:	42ab      	cmp	r3, r5
 8006822:	dcf2      	bgt.n	800680a <_printf_i+0x21e>
 8006824:	e7eb      	b.n	80067fe <_printf_i+0x212>
 8006826:	2500      	movs	r5, #0
 8006828:	f104 0619 	add.w	r6, r4, #25
 800682c:	e7f5      	b.n	800681a <_printf_i+0x22e>
 800682e:	bf00      	nop
 8006830:	08007e51 	.word	0x08007e51
 8006834:	08007e62 	.word	0x08007e62

08006838 <memcpy>:
 8006838:	440a      	add	r2, r1
 800683a:	4291      	cmp	r1, r2
 800683c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006840:	d100      	bne.n	8006844 <memcpy+0xc>
 8006842:	4770      	bx	lr
 8006844:	b510      	push	{r4, lr}
 8006846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800684a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800684e:	4291      	cmp	r1, r2
 8006850:	d1f9      	bne.n	8006846 <memcpy+0xe>
 8006852:	bd10      	pop	{r4, pc}

08006854 <memmove>:
 8006854:	4288      	cmp	r0, r1
 8006856:	b510      	push	{r4, lr}
 8006858:	eb01 0402 	add.w	r4, r1, r2
 800685c:	d902      	bls.n	8006864 <memmove+0x10>
 800685e:	4284      	cmp	r4, r0
 8006860:	4623      	mov	r3, r4
 8006862:	d807      	bhi.n	8006874 <memmove+0x20>
 8006864:	1e43      	subs	r3, r0, #1
 8006866:	42a1      	cmp	r1, r4
 8006868:	d008      	beq.n	800687c <memmove+0x28>
 800686a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800686e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006872:	e7f8      	b.n	8006866 <memmove+0x12>
 8006874:	4402      	add	r2, r0
 8006876:	4601      	mov	r1, r0
 8006878:	428a      	cmp	r2, r1
 800687a:	d100      	bne.n	800687e <memmove+0x2a>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006886:	e7f7      	b.n	8006878 <memmove+0x24>

08006888 <_free_r>:
 8006888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688a:	2900      	cmp	r1, #0
 800688c:	d048      	beq.n	8006920 <_free_r+0x98>
 800688e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006892:	9001      	str	r0, [sp, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f1a1 0404 	sub.w	r4, r1, #4
 800689a:	bfb8      	it	lt
 800689c:	18e4      	addlt	r4, r4, r3
 800689e:	f000 f8d3 	bl	8006a48 <__malloc_lock>
 80068a2:	4a20      	ldr	r2, [pc, #128]	; (8006924 <_free_r+0x9c>)
 80068a4:	9801      	ldr	r0, [sp, #4]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	4615      	mov	r5, r2
 80068aa:	b933      	cbnz	r3, 80068ba <_free_r+0x32>
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	6014      	str	r4, [r2, #0]
 80068b0:	b003      	add	sp, #12
 80068b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b6:	f000 b8cd 	b.w	8006a54 <__malloc_unlock>
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	d90b      	bls.n	80068d6 <_free_r+0x4e>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	1862      	adds	r2, r4, r1
 80068c2:	4293      	cmp	r3, r2
 80068c4:	bf04      	itt	eq
 80068c6:	681a      	ldreq	r2, [r3, #0]
 80068c8:	685b      	ldreq	r3, [r3, #4]
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	bf04      	itt	eq
 80068ce:	1852      	addeq	r2, r2, r1
 80068d0:	6022      	streq	r2, [r4, #0]
 80068d2:	602c      	str	r4, [r5, #0]
 80068d4:	e7ec      	b.n	80068b0 <_free_r+0x28>
 80068d6:	461a      	mov	r2, r3
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	b10b      	cbz	r3, 80068e0 <_free_r+0x58>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d9fa      	bls.n	80068d6 <_free_r+0x4e>
 80068e0:	6811      	ldr	r1, [r2, #0]
 80068e2:	1855      	adds	r5, r2, r1
 80068e4:	42a5      	cmp	r5, r4
 80068e6:	d10b      	bne.n	8006900 <_free_r+0x78>
 80068e8:	6824      	ldr	r4, [r4, #0]
 80068ea:	4421      	add	r1, r4
 80068ec:	1854      	adds	r4, r2, r1
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	6011      	str	r1, [r2, #0]
 80068f2:	d1dd      	bne.n	80068b0 <_free_r+0x28>
 80068f4:	681c      	ldr	r4, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	6053      	str	r3, [r2, #4]
 80068fa:	4421      	add	r1, r4
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	e7d7      	b.n	80068b0 <_free_r+0x28>
 8006900:	d902      	bls.n	8006908 <_free_r+0x80>
 8006902:	230c      	movs	r3, #12
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	e7d3      	b.n	80068b0 <_free_r+0x28>
 8006908:	6825      	ldr	r5, [r4, #0]
 800690a:	1961      	adds	r1, r4, r5
 800690c:	428b      	cmp	r3, r1
 800690e:	bf04      	itt	eq
 8006910:	6819      	ldreq	r1, [r3, #0]
 8006912:	685b      	ldreq	r3, [r3, #4]
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	bf04      	itt	eq
 8006918:	1949      	addeq	r1, r1, r5
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6054      	str	r4, [r2, #4]
 800691e:	e7c7      	b.n	80068b0 <_free_r+0x28>
 8006920:	b003      	add	sp, #12
 8006922:	bd30      	pop	{r4, r5, pc}
 8006924:	200008b4 	.word	0x200008b4

08006928 <_malloc_r>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	1ccd      	adds	r5, r1, #3
 800692c:	f025 0503 	bic.w	r5, r5, #3
 8006930:	3508      	adds	r5, #8
 8006932:	2d0c      	cmp	r5, #12
 8006934:	bf38      	it	cc
 8006936:	250c      	movcc	r5, #12
 8006938:	2d00      	cmp	r5, #0
 800693a:	4606      	mov	r6, r0
 800693c:	db01      	blt.n	8006942 <_malloc_r+0x1a>
 800693e:	42a9      	cmp	r1, r5
 8006940:	d903      	bls.n	800694a <_malloc_r+0x22>
 8006942:	230c      	movs	r3, #12
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	2000      	movs	r0, #0
 8006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694a:	f000 f87d 	bl	8006a48 <__malloc_lock>
 800694e:	4921      	ldr	r1, [pc, #132]	; (80069d4 <_malloc_r+0xac>)
 8006950:	680a      	ldr	r2, [r1, #0]
 8006952:	4614      	mov	r4, r2
 8006954:	b99c      	cbnz	r4, 800697e <_malloc_r+0x56>
 8006956:	4f20      	ldr	r7, [pc, #128]	; (80069d8 <_malloc_r+0xb0>)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	b923      	cbnz	r3, 8006966 <_malloc_r+0x3e>
 800695c:	4621      	mov	r1, r4
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f862 	bl	8006a28 <_sbrk_r>
 8006964:	6038      	str	r0, [r7, #0]
 8006966:	4629      	mov	r1, r5
 8006968:	4630      	mov	r0, r6
 800696a:	f000 f85d 	bl	8006a28 <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d123      	bne.n	80069ba <_malloc_r+0x92>
 8006972:	230c      	movs	r3, #12
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	4630      	mov	r0, r6
 8006978:	f000 f86c 	bl	8006a54 <__malloc_unlock>
 800697c:	e7e3      	b.n	8006946 <_malloc_r+0x1e>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	1b5b      	subs	r3, r3, r5
 8006982:	d417      	bmi.n	80069b4 <_malloc_r+0x8c>
 8006984:	2b0b      	cmp	r3, #11
 8006986:	d903      	bls.n	8006990 <_malloc_r+0x68>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	441c      	add	r4, r3
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	e004      	b.n	800699a <_malloc_r+0x72>
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	42a2      	cmp	r2, r4
 8006994:	bf0c      	ite	eq
 8006996:	600b      	streq	r3, [r1, #0]
 8006998:	6053      	strne	r3, [r2, #4]
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f85a 	bl	8006a54 <__malloc_unlock>
 80069a0:	f104 000b 	add.w	r0, r4, #11
 80069a4:	1d23      	adds	r3, r4, #4
 80069a6:	f020 0007 	bic.w	r0, r0, #7
 80069aa:	1ac2      	subs	r2, r0, r3
 80069ac:	d0cc      	beq.n	8006948 <_malloc_r+0x20>
 80069ae:	1a1b      	subs	r3, r3, r0
 80069b0:	50a3      	str	r3, [r4, r2]
 80069b2:	e7c9      	b.n	8006948 <_malloc_r+0x20>
 80069b4:	4622      	mov	r2, r4
 80069b6:	6864      	ldr	r4, [r4, #4]
 80069b8:	e7cc      	b.n	8006954 <_malloc_r+0x2c>
 80069ba:	1cc4      	adds	r4, r0, #3
 80069bc:	f024 0403 	bic.w	r4, r4, #3
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d0e3      	beq.n	800698c <_malloc_r+0x64>
 80069c4:	1a21      	subs	r1, r4, r0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 f82e 	bl	8006a28 <_sbrk_r>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d1dd      	bne.n	800698c <_malloc_r+0x64>
 80069d0:	e7cf      	b.n	8006972 <_malloc_r+0x4a>
 80069d2:	bf00      	nop
 80069d4:	200008b4 	.word	0x200008b4
 80069d8:	200008b8 	.word	0x200008b8

080069dc <_realloc_r>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	4607      	mov	r7, r0
 80069e0:	4614      	mov	r4, r2
 80069e2:	460e      	mov	r6, r1
 80069e4:	b921      	cbnz	r1, 80069f0 <_realloc_r+0x14>
 80069e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069ea:	4611      	mov	r1, r2
 80069ec:	f7ff bf9c 	b.w	8006928 <_malloc_r>
 80069f0:	b922      	cbnz	r2, 80069fc <_realloc_r+0x20>
 80069f2:	f7ff ff49 	bl	8006888 <_free_r>
 80069f6:	4625      	mov	r5, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fc:	f000 f830 	bl	8006a60 <_malloc_usable_size_r>
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d20f      	bcs.n	8006a24 <_realloc_r+0x48>
 8006a04:	4621      	mov	r1, r4
 8006a06:	4638      	mov	r0, r7
 8006a08:	f7ff ff8e 	bl	8006928 <_malloc_r>
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d0f2      	beq.n	80069f8 <_realloc_r+0x1c>
 8006a12:	4631      	mov	r1, r6
 8006a14:	4622      	mov	r2, r4
 8006a16:	f7ff ff0f 	bl	8006838 <memcpy>
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff ff33 	bl	8006888 <_free_r>
 8006a22:	e7e9      	b.n	80069f8 <_realloc_r+0x1c>
 8006a24:	4635      	mov	r5, r6
 8006a26:	e7e7      	b.n	80069f8 <_realloc_r+0x1c>

08006a28 <_sbrk_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_sbrk_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fc fd56 	bl	80034e4 <_sbrk>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_sbrk_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_sbrk_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20000a20 	.word	0x20000a20

08006a48 <__malloc_lock>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__malloc_lock+0x8>)
 8006a4a:	f000 b811 	b.w	8006a70 <__retarget_lock_acquire_recursive>
 8006a4e:	bf00      	nop
 8006a50:	20000a28 	.word	0x20000a28

08006a54 <__malloc_unlock>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__malloc_unlock+0x8>)
 8006a56:	f000 b80c 	b.w	8006a72 <__retarget_lock_release_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20000a28 	.word	0x20000a28

08006a60 <_malloc_usable_size_r>:
 8006a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a64:	1f18      	subs	r0, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfbc      	itt	lt
 8006a6a:	580b      	ldrlt	r3, [r1, r0]
 8006a6c:	18c0      	addlt	r0, r0, r3
 8006a6e:	4770      	bx	lr

08006a70 <__retarget_lock_acquire_recursive>:
 8006a70:	4770      	bx	lr

08006a72 <__retarget_lock_release_recursive>:
 8006a72:	4770      	bx	lr
 8006a74:	0000      	movs	r0, r0
	...

08006a78 <atan>:
 8006a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	ec55 4b10 	vmov	r4, r5, d0
 8006a80:	4bc3      	ldr	r3, [pc, #780]	; (8006d90 <atan+0x318>)
 8006a82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a86:	429e      	cmp	r6, r3
 8006a88:	46ab      	mov	fp, r5
 8006a8a:	dd18      	ble.n	8006abe <atan+0x46>
 8006a8c:	4bc1      	ldr	r3, [pc, #772]	; (8006d94 <atan+0x31c>)
 8006a8e:	429e      	cmp	r6, r3
 8006a90:	dc01      	bgt.n	8006a96 <atan+0x1e>
 8006a92:	d109      	bne.n	8006aa8 <atan+0x30>
 8006a94:	b144      	cbz	r4, 8006aa8 <atan+0x30>
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7f9 fbfd 	bl	800029c <__adddf3>
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	e006      	b.n	8006ab6 <atan+0x3e>
 8006aa8:	f1bb 0f00 	cmp.w	fp, #0
 8006aac:	f300 8131 	bgt.w	8006d12 <atan+0x29a>
 8006ab0:	a59b      	add	r5, pc, #620	; (adr r5, 8006d20 <atan+0x2a8>)
 8006ab2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ab6:	ec45 4b10 	vmov	d0, r4, r5
 8006aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	4bb6      	ldr	r3, [pc, #728]	; (8006d98 <atan+0x320>)
 8006ac0:	429e      	cmp	r6, r3
 8006ac2:	dc14      	bgt.n	8006aee <atan+0x76>
 8006ac4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006ac8:	429e      	cmp	r6, r3
 8006aca:	dc0d      	bgt.n	8006ae8 <atan+0x70>
 8006acc:	a396      	add	r3, pc, #600	; (adr r3, 8006d28 <atan+0x2b0>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	ee10 0a10 	vmov	r0, s0
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7f9 fbe0 	bl	800029c <__adddf3>
 8006adc:	4baf      	ldr	r3, [pc, #700]	; (8006d9c <atan+0x324>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f7fa f822 	bl	8000b28 <__aeabi_dcmpgt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1e6      	bne.n	8006ab6 <atan+0x3e>
 8006ae8:	f04f 3aff 	mov.w	sl, #4294967295
 8006aec:	e02b      	b.n	8006b46 <atan+0xce>
 8006aee:	f000 f963 	bl	8006db8 <fabs>
 8006af2:	4bab      	ldr	r3, [pc, #684]	; (8006da0 <atan+0x328>)
 8006af4:	429e      	cmp	r6, r3
 8006af6:	ec55 4b10 	vmov	r4, r5, d0
 8006afa:	f300 80bf 	bgt.w	8006c7c <atan+0x204>
 8006afe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b02:	429e      	cmp	r6, r3
 8006b04:	f300 80a0 	bgt.w	8006c48 <atan+0x1d0>
 8006b08:	ee10 2a10 	vmov	r2, s0
 8006b0c:	ee10 0a10 	vmov	r0, s0
 8006b10:	462b      	mov	r3, r5
 8006b12:	4629      	mov	r1, r5
 8006b14:	f7f9 fbc2 	bl	800029c <__adddf3>
 8006b18:	4ba0      	ldr	r3, [pc, #640]	; (8006d9c <atan+0x324>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f7f9 fbbc 	bl	8000298 <__aeabi_dsub>
 8006b20:	2200      	movs	r2, #0
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fbb5 	bl	800029c <__adddf3>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fe8f 	bl	800085c <__aeabi_ddiv>
 8006b3e:	f04f 0a00 	mov.w	sl, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	4622      	mov	r2, r4
 8006b48:	462b      	mov	r3, r5
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7f9 fd5b 	bl	8000608 <__aeabi_dmul>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4680      	mov	r8, r0
 8006b58:	4689      	mov	r9, r1
 8006b5a:	f7f9 fd55 	bl	8000608 <__aeabi_dmul>
 8006b5e:	a374      	add	r3, pc, #464	; (adr r3, 8006d30 <atan+0x2b8>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	4606      	mov	r6, r0
 8006b66:	460f      	mov	r7, r1
 8006b68:	f7f9 fd4e 	bl	8000608 <__aeabi_dmul>
 8006b6c:	a372      	add	r3, pc, #456	; (adr r3, 8006d38 <atan+0x2c0>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fb93 	bl	800029c <__adddf3>
 8006b76:	4632      	mov	r2, r6
 8006b78:	463b      	mov	r3, r7
 8006b7a:	f7f9 fd45 	bl	8000608 <__aeabi_dmul>
 8006b7e:	a370      	add	r3, pc, #448	; (adr r3, 8006d40 <atan+0x2c8>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fb8a 	bl	800029c <__adddf3>
 8006b88:	4632      	mov	r2, r6
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	f7f9 fd3c 	bl	8000608 <__aeabi_dmul>
 8006b90:	a36d      	add	r3, pc, #436	; (adr r3, 8006d48 <atan+0x2d0>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fb81 	bl	800029c <__adddf3>
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	f7f9 fd33 	bl	8000608 <__aeabi_dmul>
 8006ba2:	a36b      	add	r3, pc, #428	; (adr r3, 8006d50 <atan+0x2d8>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb78 	bl	800029c <__adddf3>
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	f7f9 fd2a 	bl	8000608 <__aeabi_dmul>
 8006bb4:	a368      	add	r3, pc, #416	; (adr r3, 8006d58 <atan+0x2e0>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fb6f 	bl	800029c <__adddf3>
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	464b      	mov	r3, r9
 8006bc2:	f7f9 fd21 	bl	8000608 <__aeabi_dmul>
 8006bc6:	a366      	add	r3, pc, #408	; (adr r3, 8006d60 <atan+0x2e8>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4689      	mov	r9, r1
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 fd18 	bl	8000608 <__aeabi_dmul>
 8006bd8:	a363      	add	r3, pc, #396	; (adr r3, 8006d68 <atan+0x2f0>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fb5b 	bl	8000298 <__aeabi_dsub>
 8006be2:	4632      	mov	r2, r6
 8006be4:	463b      	mov	r3, r7
 8006be6:	f7f9 fd0f 	bl	8000608 <__aeabi_dmul>
 8006bea:	a361      	add	r3, pc, #388	; (adr r3, 8006d70 <atan+0x2f8>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fb52 	bl	8000298 <__aeabi_dsub>
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	f7f9 fd06 	bl	8000608 <__aeabi_dmul>
 8006bfc:	a35e      	add	r3, pc, #376	; (adr r3, 8006d78 <atan+0x300>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 fb49 	bl	8000298 <__aeabi_dsub>
 8006c06:	4632      	mov	r2, r6
 8006c08:	463b      	mov	r3, r7
 8006c0a:	f7f9 fcfd 	bl	8000608 <__aeabi_dmul>
 8006c0e:	a35c      	add	r3, pc, #368	; (adr r3, 8006d80 <atan+0x308>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fb40 	bl	8000298 <__aeabi_dsub>
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	f7f9 fcf4 	bl	8000608 <__aeabi_dmul>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 fb38 	bl	800029c <__adddf3>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	462b      	mov	r3, r5
 8006c30:	f7f9 fcea 	bl	8000608 <__aeabi_dmul>
 8006c34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	d14b      	bne.n	8006cd6 <atan+0x25e>
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fb29 	bl	8000298 <__aeabi_dsub>
 8006c46:	e72c      	b.n	8006aa2 <atan+0x2a>
 8006c48:	ee10 0a10 	vmov	r0, s0
 8006c4c:	4b53      	ldr	r3, [pc, #332]	; (8006d9c <atan+0x324>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 fb21 	bl	8000298 <__aeabi_dsub>
 8006c56:	4b51      	ldr	r3, [pc, #324]	; (8006d9c <atan+0x324>)
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 fb1b 	bl	800029c <__adddf3>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fdf5 	bl	800085c <__aeabi_ddiv>
 8006c72:	f04f 0a01 	mov.w	sl, #1
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	e764      	b.n	8006b46 <atan+0xce>
 8006c7c:	4b49      	ldr	r3, [pc, #292]	; (8006da4 <atan+0x32c>)
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	da1d      	bge.n	8006cbe <atan+0x246>
 8006c82:	ee10 0a10 	vmov	r0, s0
 8006c86:	4b48      	ldr	r3, [pc, #288]	; (8006da8 <atan+0x330>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7f9 fb04 	bl	8000298 <__aeabi_dsub>
 8006c90:	4b45      	ldr	r3, [pc, #276]	; (8006da8 <atan+0x330>)
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	2200      	movs	r2, #0
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7f9 fcb4 	bl	8000608 <__aeabi_dmul>
 8006ca0:	4b3e      	ldr	r3, [pc, #248]	; (8006d9c <atan+0x324>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fafa 	bl	800029c <__adddf3>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4630      	mov	r0, r6
 8006cae:	4639      	mov	r1, r7
 8006cb0:	f7f9 fdd4 	bl	800085c <__aeabi_ddiv>
 8006cb4:	f04f 0a02 	mov.w	sl, #2
 8006cb8:	4604      	mov	r4, r0
 8006cba:	460d      	mov	r5, r1
 8006cbc:	e743      	b.n	8006b46 <atan+0xce>
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	ee10 2a10 	vmov	r2, s0
 8006cc4:	4939      	ldr	r1, [pc, #228]	; (8006dac <atan+0x334>)
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f7f9 fdc8 	bl	800085c <__aeabi_ddiv>
 8006ccc:	f04f 0a03 	mov.w	sl, #3
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	e737      	b.n	8006b46 <atan+0xce>
 8006cd6:	4b36      	ldr	r3, [pc, #216]	; (8006db0 <atan+0x338>)
 8006cd8:	4e36      	ldr	r6, [pc, #216]	; (8006db4 <atan+0x33c>)
 8006cda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006cde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006ce2:	e9da 2300 	ldrd	r2, r3, [sl]
 8006ce6:	f7f9 fad7 	bl	8000298 <__aeabi_dsub>
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	f7f9 fad3 	bl	8000298 <__aeabi_dsub>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006cfa:	f7f9 facd 	bl	8000298 <__aeabi_dsub>
 8006cfe:	f1bb 0f00 	cmp.w	fp, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	f6bf aed6 	bge.w	8006ab6 <atan+0x3e>
 8006d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d0e:	461d      	mov	r5, r3
 8006d10:	e6d1      	b.n	8006ab6 <atan+0x3e>
 8006d12:	a51d      	add	r5, pc, #116	; (adr r5, 8006d88 <atan+0x310>)
 8006d14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d18:	e6cd      	b.n	8006ab6 <atan+0x3e>
 8006d1a:	bf00      	nop
 8006d1c:	f3af 8000 	nop.w
 8006d20:	54442d18 	.word	0x54442d18
 8006d24:	bff921fb 	.word	0xbff921fb
 8006d28:	8800759c 	.word	0x8800759c
 8006d2c:	7e37e43c 	.word	0x7e37e43c
 8006d30:	e322da11 	.word	0xe322da11
 8006d34:	3f90ad3a 	.word	0x3f90ad3a
 8006d38:	24760deb 	.word	0x24760deb
 8006d3c:	3fa97b4b 	.word	0x3fa97b4b
 8006d40:	a0d03d51 	.word	0xa0d03d51
 8006d44:	3fb10d66 	.word	0x3fb10d66
 8006d48:	c54c206e 	.word	0xc54c206e
 8006d4c:	3fb745cd 	.word	0x3fb745cd
 8006d50:	920083ff 	.word	0x920083ff
 8006d54:	3fc24924 	.word	0x3fc24924
 8006d58:	5555550d 	.word	0x5555550d
 8006d5c:	3fd55555 	.word	0x3fd55555
 8006d60:	2c6a6c2f 	.word	0x2c6a6c2f
 8006d64:	bfa2b444 	.word	0xbfa2b444
 8006d68:	52defd9a 	.word	0x52defd9a
 8006d6c:	3fadde2d 	.word	0x3fadde2d
 8006d70:	af749a6d 	.word	0xaf749a6d
 8006d74:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d78:	fe231671 	.word	0xfe231671
 8006d7c:	3fbc71c6 	.word	0x3fbc71c6
 8006d80:	9998ebc4 	.word	0x9998ebc4
 8006d84:	3fc99999 	.word	0x3fc99999
 8006d88:	54442d18 	.word	0x54442d18
 8006d8c:	3ff921fb 	.word	0x3ff921fb
 8006d90:	440fffff 	.word	0x440fffff
 8006d94:	7ff00000 	.word	0x7ff00000
 8006d98:	3fdbffff 	.word	0x3fdbffff
 8006d9c:	3ff00000 	.word	0x3ff00000
 8006da0:	3ff2ffff 	.word	0x3ff2ffff
 8006da4:	40038000 	.word	0x40038000
 8006da8:	3ff80000 	.word	0x3ff80000
 8006dac:	bff00000 	.word	0xbff00000
 8006db0:	08007e98 	.word	0x08007e98
 8006db4:	08007e78 	.word	0x08007e78

08006db8 <fabs>:
 8006db8:	ec51 0b10 	vmov	r0, r1, d0
 8006dbc:	ee10 2a10 	vmov	r2, s0
 8006dc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dc4:	ec43 2b10 	vmov	d0, r2, r3
 8006dc8:	4770      	bx	lr
	...

08006dcc <pow>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	ec59 8b10 	vmov	r8, r9, d0
 8006dd4:	ec57 6b11 	vmov	r6, r7, d1
 8006dd8:	f000 f8da 	bl	8006f90 <__ieee754_pow>
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <pow+0x14c>)
 8006dde:	f993 3000 	ldrsb.w	r3, [r3]
 8006de2:	3301      	adds	r3, #1
 8006de4:	ec55 4b10 	vmov	r4, r5, d0
 8006de8:	d015      	beq.n	8006e16 <pow+0x4a>
 8006dea:	4632      	mov	r2, r6
 8006dec:	463b      	mov	r3, r7
 8006dee:	4630      	mov	r0, r6
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 fea3 	bl	8000b3c <__aeabi_dcmpun>
 8006df6:	b970      	cbnz	r0, 8006e16 <pow+0x4a>
 8006df8:	4642      	mov	r2, r8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4649      	mov	r1, r9
 8006e00:	f7f9 fe9c 	bl	8000b3c <__aeabi_dcmpun>
 8006e04:	2200      	movs	r2, #0
 8006e06:	2300      	movs	r3, #0
 8006e08:	b148      	cbz	r0, 8006e1e <pow+0x52>
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	f7f9 fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d17d      	bne.n	8006f12 <pow+0x146>
 8006e16:	ec45 4b10 	vmov	d0, r4, r5
 8006e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e26:	b1e0      	cbz	r0, 8006e62 <pow+0x96>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d16c      	bne.n	8006f12 <pow+0x146>
 8006e38:	ec47 6b10 	vmov	d0, r6, r7
 8006e3c:	f000 fe7e 	bl	8007b3c <finite>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d0e8      	beq.n	8006e16 <pow+0x4a>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe4e 	bl	8000aec <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d0e0      	beq.n	8006e16 <pow+0x4a>
 8006e54:	f7ff f9ae 	bl	80061b4 <__errno>
 8006e58:	2321      	movs	r3, #33	; 0x21
 8006e5a:	6003      	str	r3, [r0, #0]
 8006e5c:	2400      	movs	r4, #0
 8006e5e:	4d2f      	ldr	r5, [pc, #188]	; (8006f1c <pow+0x150>)
 8006e60:	e7d9      	b.n	8006e16 <pow+0x4a>
 8006e62:	ec45 4b10 	vmov	d0, r4, r5
 8006e66:	f000 fe69 	bl	8007b3c <finite>
 8006e6a:	bbb8      	cbnz	r0, 8006edc <pow+0x110>
 8006e6c:	ec49 8b10 	vmov	d0, r8, r9
 8006e70:	f000 fe64 	bl	8007b3c <finite>
 8006e74:	b390      	cbz	r0, 8006edc <pow+0x110>
 8006e76:	ec47 6b10 	vmov	d0, r6, r7
 8006e7a:	f000 fe5f 	bl	8007b3c <finite>
 8006e7e:	b368      	cbz	r0, 8006edc <pow+0x110>
 8006e80:	4622      	mov	r2, r4
 8006e82:	462b      	mov	r3, r5
 8006e84:	4620      	mov	r0, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 fe58 	bl	8000b3c <__aeabi_dcmpun>
 8006e8c:	b160      	cbz	r0, 8006ea8 <pow+0xdc>
 8006e8e:	f7ff f991 	bl	80061b4 <__errno>
 8006e92:	2321      	movs	r3, #33	; 0x21
 8006e94:	6003      	str	r3, [r0, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f7f9 fcdd 	bl	800085c <__aeabi_ddiv>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	e7b6      	b.n	8006e16 <pow+0x4a>
 8006ea8:	f7ff f984 	bl	80061b4 <__errno>
 8006eac:	2322      	movs	r3, #34	; 0x22
 8006eae:	6003      	str	r3, [r0, #0]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fe18 	bl	8000aec <__aeabi_dcmplt>
 8006ebc:	2400      	movs	r4, #0
 8006ebe:	b158      	cbz	r0, 8006ed8 <pow+0x10c>
 8006ec0:	ec47 6b10 	vmov	d0, r6, r7
 8006ec4:	f000 fe50 	bl	8007b68 <rint>
 8006ec8:	4632      	mov	r2, r6
 8006eca:	ec51 0b10 	vmov	r0, r1, d0
 8006ece:	463b      	mov	r3, r7
 8006ed0:	f7f9 fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d0c2      	beq.n	8006e5e <pow+0x92>
 8006ed8:	4d11      	ldr	r5, [pc, #68]	; (8006f20 <pow+0x154>)
 8006eda:	e79c      	b.n	8006e16 <pow+0x4a>
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d094      	beq.n	8006e16 <pow+0x4a>
 8006eec:	ec49 8b10 	vmov	d0, r8, r9
 8006ef0:	f000 fe24 	bl	8007b3c <finite>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d08e      	beq.n	8006e16 <pow+0x4a>
 8006ef8:	ec47 6b10 	vmov	d0, r6, r7
 8006efc:	f000 fe1e 	bl	8007b3c <finite>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d088      	beq.n	8006e16 <pow+0x4a>
 8006f04:	f7ff f956 	bl	80061b4 <__errno>
 8006f08:	2322      	movs	r3, #34	; 0x22
 8006f0a:	6003      	str	r3, [r0, #0]
 8006f0c:	2400      	movs	r4, #0
 8006f0e:	2500      	movs	r5, #0
 8006f10:	e781      	b.n	8006e16 <pow+0x4a>
 8006f12:	4d04      	ldr	r5, [pc, #16]	; (8006f24 <pow+0x158>)
 8006f14:	2400      	movs	r4, #0
 8006f16:	e77e      	b.n	8006e16 <pow+0x4a>
 8006f18:	2000035c 	.word	0x2000035c
 8006f1c:	fff00000 	.word	0xfff00000
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	3ff00000 	.word	0x3ff00000

08006f28 <sqrt>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	ed2d 8b02 	vpush	{d8}
 8006f2e:	ec55 4b10 	vmov	r4, r5, d0
 8006f32:	f000 fd4f 	bl	80079d4 <__ieee754_sqrt>
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <sqrt+0x64>)
 8006f38:	eeb0 8a40 	vmov.f32	s16, s0
 8006f3c:	eef0 8a60 	vmov.f32	s17, s1
 8006f40:	f993 3000 	ldrsb.w	r3, [r3]
 8006f44:	3301      	adds	r3, #1
 8006f46:	d019      	beq.n	8006f7c <sqrt+0x54>
 8006f48:	4622      	mov	r2, r4
 8006f4a:	462b      	mov	r3, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fdf4 	bl	8000b3c <__aeabi_dcmpun>
 8006f54:	b990      	cbnz	r0, 8006f7c <sqrt+0x54>
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 fdc5 	bl	8000aec <__aeabi_dcmplt>
 8006f62:	b158      	cbz	r0, 8006f7c <sqrt+0x54>
 8006f64:	f7ff f926 	bl	80061b4 <__errno>
 8006f68:	2321      	movs	r3, #33	; 0x21
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2300      	movs	r3, #0
 8006f70:	4610      	mov	r0, r2
 8006f72:	4619      	mov	r1, r3
 8006f74:	f7f9 fc72 	bl	800085c <__aeabi_ddiv>
 8006f78:	ec41 0b18 	vmov	d8, r0, r1
 8006f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8006f80:	eef0 0a68 	vmov.f32	s1, s17
 8006f84:	ecbd 8b02 	vpop	{d8}
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
 8006f8a:	bf00      	nop
 8006f8c:	2000035c 	.word	0x2000035c

08006f90 <__ieee754_pow>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b06 	vpush	{d8-d10}
 8006f98:	b08d      	sub	sp, #52	; 0x34
 8006f9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006f9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006fa2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006fa6:	ea56 0100 	orrs.w	r1, r6, r0
 8006faa:	ec53 2b10 	vmov	r2, r3, d0
 8006fae:	f000 84d1 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8006fb2:	497f      	ldr	r1, [pc, #508]	; (80071b0 <__ieee754_pow+0x220>)
 8006fb4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006fb8:	428c      	cmp	r4, r1
 8006fba:	ee10 8a10 	vmov	r8, s0
 8006fbe:	4699      	mov	r9, r3
 8006fc0:	dc09      	bgt.n	8006fd6 <__ieee754_pow+0x46>
 8006fc2:	d103      	bne.n	8006fcc <__ieee754_pow+0x3c>
 8006fc4:	b97a      	cbnz	r2, 8006fe6 <__ieee754_pow+0x56>
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	dd02      	ble.n	8006fd0 <__ieee754_pow+0x40>
 8006fca:	e00c      	b.n	8006fe6 <__ieee754_pow+0x56>
 8006fcc:	428e      	cmp	r6, r1
 8006fce:	dc02      	bgt.n	8006fd6 <__ieee754_pow+0x46>
 8006fd0:	428e      	cmp	r6, r1
 8006fd2:	d110      	bne.n	8006ff6 <__ieee754_pow+0x66>
 8006fd4:	b178      	cbz	r0, 8006ff6 <__ieee754_pow+0x66>
 8006fd6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006fda:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006fde:	ea54 0308 	orrs.w	r3, r4, r8
 8006fe2:	f000 84b7 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8006fe6:	4873      	ldr	r0, [pc, #460]	; (80071b4 <__ieee754_pow+0x224>)
 8006fe8:	b00d      	add	sp, #52	; 0x34
 8006fea:	ecbd 8b06 	vpop	{d8-d10}
 8006fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff2:	f000 bdb1 	b.w	8007b58 <nan>
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	da36      	bge.n	800706a <__ieee754_pow+0xda>
 8006ffc:	496e      	ldr	r1, [pc, #440]	; (80071b8 <__ieee754_pow+0x228>)
 8006ffe:	428e      	cmp	r6, r1
 8007000:	dc51      	bgt.n	80070a6 <__ieee754_pow+0x116>
 8007002:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007006:	428e      	cmp	r6, r1
 8007008:	f340 84af 	ble.w	800796a <__ieee754_pow+0x9da>
 800700c:	1531      	asrs	r1, r6, #20
 800700e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007012:	2914      	cmp	r1, #20
 8007014:	dd0f      	ble.n	8007036 <__ieee754_pow+0xa6>
 8007016:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800701a:	fa20 fc01 	lsr.w	ip, r0, r1
 800701e:	fa0c f101 	lsl.w	r1, ip, r1
 8007022:	4281      	cmp	r1, r0
 8007024:	f040 84a1 	bne.w	800796a <__ieee754_pow+0x9da>
 8007028:	f00c 0c01 	and.w	ip, ip, #1
 800702c:	f1cc 0102 	rsb	r1, ip, #2
 8007030:	9100      	str	r1, [sp, #0]
 8007032:	b180      	cbz	r0, 8007056 <__ieee754_pow+0xc6>
 8007034:	e059      	b.n	80070ea <__ieee754_pow+0x15a>
 8007036:	2800      	cmp	r0, #0
 8007038:	d155      	bne.n	80070e6 <__ieee754_pow+0x156>
 800703a:	f1c1 0114 	rsb	r1, r1, #20
 800703e:	fa46 fc01 	asr.w	ip, r6, r1
 8007042:	fa0c f101 	lsl.w	r1, ip, r1
 8007046:	42b1      	cmp	r1, r6
 8007048:	f040 848c 	bne.w	8007964 <__ieee754_pow+0x9d4>
 800704c:	f00c 0c01 	and.w	ip, ip, #1
 8007050:	f1cc 0102 	rsb	r1, ip, #2
 8007054:	9100      	str	r1, [sp, #0]
 8007056:	4959      	ldr	r1, [pc, #356]	; (80071bc <__ieee754_pow+0x22c>)
 8007058:	428e      	cmp	r6, r1
 800705a:	d12d      	bne.n	80070b8 <__ieee754_pow+0x128>
 800705c:	2f00      	cmp	r7, #0
 800705e:	da79      	bge.n	8007154 <__ieee754_pow+0x1c4>
 8007060:	4956      	ldr	r1, [pc, #344]	; (80071bc <__ieee754_pow+0x22c>)
 8007062:	2000      	movs	r0, #0
 8007064:	f7f9 fbfa 	bl	800085c <__aeabi_ddiv>
 8007068:	e016      	b.n	8007098 <__ieee754_pow+0x108>
 800706a:	2100      	movs	r1, #0
 800706c:	9100      	str	r1, [sp, #0]
 800706e:	2800      	cmp	r0, #0
 8007070:	d13b      	bne.n	80070ea <__ieee754_pow+0x15a>
 8007072:	494f      	ldr	r1, [pc, #316]	; (80071b0 <__ieee754_pow+0x220>)
 8007074:	428e      	cmp	r6, r1
 8007076:	d1ee      	bne.n	8007056 <__ieee754_pow+0xc6>
 8007078:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800707c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007080:	ea53 0308 	orrs.w	r3, r3, r8
 8007084:	f000 8466 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8007088:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <__ieee754_pow+0x230>)
 800708a:	429c      	cmp	r4, r3
 800708c:	dd0d      	ble.n	80070aa <__ieee754_pow+0x11a>
 800708e:	2f00      	cmp	r7, #0
 8007090:	f280 8464 	bge.w	800795c <__ieee754_pow+0x9cc>
 8007094:	2000      	movs	r0, #0
 8007096:	2100      	movs	r1, #0
 8007098:	ec41 0b10 	vmov	d0, r0, r1
 800709c:	b00d      	add	sp, #52	; 0x34
 800709e:	ecbd 8b06 	vpop	{d8-d10}
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	2102      	movs	r1, #2
 80070a8:	e7e0      	b.n	800706c <__ieee754_pow+0xdc>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	daf2      	bge.n	8007094 <__ieee754_pow+0x104>
 80070ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80070b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070b6:	e7ef      	b.n	8007098 <__ieee754_pow+0x108>
 80070b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070bc:	d104      	bne.n	80070c8 <__ieee754_pow+0x138>
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7f9 faa1 	bl	8000608 <__aeabi_dmul>
 80070c6:	e7e7      	b.n	8007098 <__ieee754_pow+0x108>
 80070c8:	493e      	ldr	r1, [pc, #248]	; (80071c4 <__ieee754_pow+0x234>)
 80070ca:	428f      	cmp	r7, r1
 80070cc:	d10d      	bne.n	80070ea <__ieee754_pow+0x15a>
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	db0a      	blt.n	80070ea <__ieee754_pow+0x15a>
 80070d4:	ec43 2b10 	vmov	d0, r2, r3
 80070d8:	b00d      	add	sp, #52	; 0x34
 80070da:	ecbd 8b06 	vpop	{d8-d10}
 80070de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e2:	f000 bc77 	b.w	80079d4 <__ieee754_sqrt>
 80070e6:	2100      	movs	r1, #0
 80070e8:	9100      	str	r1, [sp, #0]
 80070ea:	ec43 2b10 	vmov	d0, r2, r3
 80070ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070f2:	f7ff fe61 	bl	8006db8 <fabs>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	ec51 0b10 	vmov	r0, r1, d0
 80070fe:	f1b8 0f00 	cmp.w	r8, #0
 8007102:	d12a      	bne.n	800715a <__ieee754_pow+0x1ca>
 8007104:	b12c      	cbz	r4, 8007112 <__ieee754_pow+0x182>
 8007106:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80071bc <__ieee754_pow+0x22c>
 800710a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800710e:	45e6      	cmp	lr, ip
 8007110:	d123      	bne.n	800715a <__ieee754_pow+0x1ca>
 8007112:	2f00      	cmp	r7, #0
 8007114:	da05      	bge.n	8007122 <__ieee754_pow+0x192>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	2000      	movs	r0, #0
 800711c:	4927      	ldr	r1, [pc, #156]	; (80071bc <__ieee754_pow+0x22c>)
 800711e:	f7f9 fb9d 	bl	800085c <__aeabi_ddiv>
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	dab7      	bge.n	8007098 <__ieee754_pow+0x108>
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800712e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007132:	4323      	orrs	r3, r4
 8007134:	d108      	bne.n	8007148 <__ieee754_pow+0x1b8>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	f7f9 f8ab 	bl	8000298 <__aeabi_dsub>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e78d      	b.n	8007064 <__ieee754_pow+0xd4>
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d1a4      	bne.n	8007098 <__ieee754_pow+0x108>
 800714e:	4602      	mov	r2, r0
 8007150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	e79e      	b.n	8007098 <__ieee754_pow+0x108>
 800715a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800715e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007162:	950a      	str	r5, [sp, #40]	; 0x28
 8007164:	9d00      	ldr	r5, [sp, #0]
 8007166:	46ac      	mov	ip, r5
 8007168:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800716a:	ea5c 0505 	orrs.w	r5, ip, r5
 800716e:	d0e4      	beq.n	800713a <__ieee754_pow+0x1aa>
 8007170:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <__ieee754_pow+0x238>)
 8007172:	429e      	cmp	r6, r3
 8007174:	f340 80fc 	ble.w	8007370 <__ieee754_pow+0x3e0>
 8007178:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800717c:	429e      	cmp	r6, r3
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <__ieee754_pow+0x230>)
 8007180:	dd07      	ble.n	8007192 <__ieee754_pow+0x202>
 8007182:	429c      	cmp	r4, r3
 8007184:	dc0a      	bgt.n	800719c <__ieee754_pow+0x20c>
 8007186:	2f00      	cmp	r7, #0
 8007188:	da84      	bge.n	8007094 <__ieee754_pow+0x104>
 800718a:	a307      	add	r3, pc, #28	; (adr r3, 80071a8 <__ieee754_pow+0x218>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	e795      	b.n	80070be <__ieee754_pow+0x12e>
 8007192:	429c      	cmp	r4, r3
 8007194:	dbf7      	blt.n	8007186 <__ieee754_pow+0x1f6>
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <__ieee754_pow+0x22c>)
 8007198:	429c      	cmp	r4, r3
 800719a:	dd17      	ble.n	80071cc <__ieee754_pow+0x23c>
 800719c:	2f00      	cmp	r7, #0
 800719e:	dcf4      	bgt.n	800718a <__ieee754_pow+0x1fa>
 80071a0:	e778      	b.n	8007094 <__ieee754_pow+0x104>
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	8800759c 	.word	0x8800759c
 80071ac:	7e37e43c 	.word	0x7e37e43c
 80071b0:	7ff00000 	.word	0x7ff00000
 80071b4:	08007e45 	.word	0x08007e45
 80071b8:	433fffff 	.word	0x433fffff
 80071bc:	3ff00000 	.word	0x3ff00000
 80071c0:	3fefffff 	.word	0x3fefffff
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	41e00000 	.word	0x41e00000
 80071cc:	4b64      	ldr	r3, [pc, #400]	; (8007360 <__ieee754_pow+0x3d0>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	f7f9 f862 	bl	8000298 <__aeabi_dsub>
 80071d4:	a356      	add	r3, pc, #344	; (adr r3, 8007330 <__ieee754_pow+0x3a0>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	4604      	mov	r4, r0
 80071dc:	460d      	mov	r5, r1
 80071de:	f7f9 fa13 	bl	8000608 <__aeabi_dmul>
 80071e2:	a355      	add	r3, pc, #340	; (adr r3, 8007338 <__ieee754_pow+0x3a8>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	4606      	mov	r6, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fa0a 	bl	8000608 <__aeabi_dmul>
 80071f4:	4b5b      	ldr	r3, [pc, #364]	; (8007364 <__ieee754_pow+0x3d4>)
 80071f6:	4682      	mov	sl, r0
 80071f8:	468b      	mov	fp, r1
 80071fa:	2200      	movs	r2, #0
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 fa02 	bl	8000608 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	a14d      	add	r1, pc, #308	; (adr r1, 8007340 <__ieee754_pow+0x3b0>)
 800720a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800720e:	f7f9 f843 	bl	8000298 <__aeabi_dsub>
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	f7f9 f9f7 	bl	8000608 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	2000      	movs	r0, #0
 8007220:	4951      	ldr	r1, [pc, #324]	; (8007368 <__ieee754_pow+0x3d8>)
 8007222:	f7f9 f839 	bl	8000298 <__aeabi_dsub>
 8007226:	4622      	mov	r2, r4
 8007228:	4680      	mov	r8, r0
 800722a:	4689      	mov	r9, r1
 800722c:	462b      	mov	r3, r5
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 f9e9 	bl	8000608 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f9e3 	bl	8000608 <__aeabi_dmul>
 8007242:	a341      	add	r3, pc, #260	; (adr r3, 8007348 <__ieee754_pow+0x3b8>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f9de 	bl	8000608 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f9 f820 	bl	8000298 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f9 f81a 	bl	800029c <__adddf3>
 8007268:	2400      	movs	r4, #0
 800726a:	4632      	mov	r2, r6
 800726c:	463b      	mov	r3, r7
 800726e:	4620      	mov	r0, r4
 8007270:	460d      	mov	r5, r1
 8007272:	f7f9 f811 	bl	8000298 <__aeabi_dsub>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f9 f80b 	bl	8000298 <__aeabi_dsub>
 8007282:	9b00      	ldr	r3, [sp, #0]
 8007284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	4313      	orrs	r3, r2
 800728a:	4682      	mov	sl, r0
 800728c:	468b      	mov	fp, r1
 800728e:	f040 81f1 	bne.w	8007674 <__ieee754_pow+0x6e4>
 8007292:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007350 <__ieee754_pow+0x3c0>
 8007296:	eeb0 8a47 	vmov.f32	s16, s14
 800729a:	eef0 8a67 	vmov.f32	s17, s15
 800729e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072a2:	2600      	movs	r6, #0
 80072a4:	4632      	mov	r2, r6
 80072a6:	463b      	mov	r3, r7
 80072a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ac:	f7f8 fff4 	bl	8000298 <__aeabi_dsub>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	f7f9 f9a8 	bl	8000608 <__aeabi_dmul>
 80072b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072bc:	4680      	mov	r8, r0
 80072be:	4689      	mov	r9, r1
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 f9a0 	bl	8000608 <__aeabi_dmul>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4640      	mov	r0, r8
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7f8 ffe4 	bl	800029c <__adddf3>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	4680      	mov	r8, r0
 80072da:	4689      	mov	r9, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 f992 	bl	8000608 <__aeabi_dmul>
 80072e4:	460b      	mov	r3, r1
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	4602      	mov	r2, r0
 80072ec:	4649      	mov	r1, r9
 80072ee:	4640      	mov	r0, r8
 80072f0:	f7f8 ffd4 	bl	800029c <__adddf3>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <__ieee754_pow+0x3dc>)
 80072f6:	4299      	cmp	r1, r3
 80072f8:	ec45 4b19 	vmov	d9, r4, r5
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	468b      	mov	fp, r1
 8007302:	f340 82fe 	ble.w	8007902 <__ieee754_pow+0x972>
 8007306:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800730a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800730e:	4303      	orrs	r3, r0
 8007310:	f000 81f0 	beq.w	80076f4 <__ieee754_pow+0x764>
 8007314:	a310      	add	r3, pc, #64	; (adr r3, 8007358 <__ieee754_pow+0x3c8>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	ec51 0b18 	vmov	r0, r1, d8
 800731e:	f7f9 f973 	bl	8000608 <__aeabi_dmul>
 8007322:	a30d      	add	r3, pc, #52	; (adr r3, 8007358 <__ieee754_pow+0x3c8>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	e6cb      	b.n	80070c2 <__ieee754_pow+0x132>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	60000000 	.word	0x60000000
 8007334:	3ff71547 	.word	0x3ff71547
 8007338:	f85ddf44 	.word	0xf85ddf44
 800733c:	3e54ae0b 	.word	0x3e54ae0b
 8007340:	55555555 	.word	0x55555555
 8007344:	3fd55555 	.word	0x3fd55555
 8007348:	652b82fe 	.word	0x652b82fe
 800734c:	3ff71547 	.word	0x3ff71547
 8007350:	00000000 	.word	0x00000000
 8007354:	bff00000 	.word	0xbff00000
 8007358:	8800759c 	.word	0x8800759c
 800735c:	7e37e43c 	.word	0x7e37e43c
 8007360:	3ff00000 	.word	0x3ff00000
 8007364:	3fd00000 	.word	0x3fd00000
 8007368:	3fe00000 	.word	0x3fe00000
 800736c:	408fffff 	.word	0x408fffff
 8007370:	4bd7      	ldr	r3, [pc, #860]	; (80076d0 <__ieee754_pow+0x740>)
 8007372:	ea03 0309 	and.w	r3, r3, r9
 8007376:	2200      	movs	r2, #0
 8007378:	b92b      	cbnz	r3, 8007386 <__ieee754_pow+0x3f6>
 800737a:	4bd6      	ldr	r3, [pc, #856]	; (80076d4 <__ieee754_pow+0x744>)
 800737c:	f7f9 f944 	bl	8000608 <__aeabi_dmul>
 8007380:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007384:	460c      	mov	r4, r1
 8007386:	1523      	asrs	r3, r4, #20
 8007388:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800738c:	4413      	add	r3, r2
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	4bd1      	ldr	r3, [pc, #836]	; (80076d8 <__ieee754_pow+0x748>)
 8007392:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007396:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800739a:	429c      	cmp	r4, r3
 800739c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073a0:	dd08      	ble.n	80073b4 <__ieee754_pow+0x424>
 80073a2:	4bce      	ldr	r3, [pc, #824]	; (80076dc <__ieee754_pow+0x74c>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	f340 8163 	ble.w	8007670 <__ieee754_pow+0x6e0>
 80073aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ac:	3301      	adds	r3, #1
 80073ae:	9309      	str	r3, [sp, #36]	; 0x24
 80073b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073b4:	2400      	movs	r4, #0
 80073b6:	00e3      	lsls	r3, r4, #3
 80073b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ba:	4bc9      	ldr	r3, [pc, #804]	; (80076e0 <__ieee754_pow+0x750>)
 80073bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073c0:	ed93 7b00 	vldr	d7, [r3]
 80073c4:	4629      	mov	r1, r5
 80073c6:	ec53 2b17 	vmov	r2, r3, d7
 80073ca:	eeb0 8a47 	vmov.f32	s16, s14
 80073ce:	eef0 8a67 	vmov.f32	s17, s15
 80073d2:	4682      	mov	sl, r0
 80073d4:	f7f8 ff60 	bl	8000298 <__aeabi_dsub>
 80073d8:	4652      	mov	r2, sl
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	462b      	mov	r3, r5
 80073e0:	ec51 0b18 	vmov	r0, r1, d8
 80073e4:	f7f8 ff5a 	bl	800029c <__adddf3>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	2000      	movs	r0, #0
 80073ee:	49bd      	ldr	r1, [pc, #756]	; (80076e4 <__ieee754_pow+0x754>)
 80073f0:	f7f9 fa34 	bl	800085c <__aeabi_ddiv>
 80073f4:	ec41 0b19 	vmov	d9, r0, r1
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f9 f902 	bl	8000608 <__aeabi_dmul>
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800740c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007418:	46ab      	mov	fp, r5
 800741a:	106d      	asrs	r5, r5, #1
 800741c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007420:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007424:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007428:	2200      	movs	r2, #0
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	f7f9 f8e9 	bl	8000608 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	f7f8 ff2b 	bl	8000298 <__aeabi_dsub>
 8007442:	ec53 2b18 	vmov	r2, r3, d8
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	f7f8 ff23 	bl	8000298 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4650      	mov	r0, sl
 8007458:	4659      	mov	r1, fp
 800745a:	f7f8 ff1d 	bl	8000298 <__aeabi_dsub>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	f7f9 f8d1 	bl	8000608 <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 ff13 	bl	8000298 <__aeabi_dsub>
 8007472:	ec53 2b19 	vmov	r2, r3, d9
 8007476:	f7f9 f8c7 	bl	8000608 <__aeabi_dmul>
 800747a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747e:	ec41 0b18 	vmov	d8, r0, r1
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	f7f9 f8bf 	bl	8000608 <__aeabi_dmul>
 800748a:	a37d      	add	r3, pc, #500	; (adr r3, 8007680 <__ieee754_pow+0x6f0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	f7f9 f8b8 	bl	8000608 <__aeabi_dmul>
 8007498:	a37b      	add	r3, pc, #492	; (adr r3, 8007688 <__ieee754_pow+0x6f8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 fefd 	bl	800029c <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	f7f9 f8af 	bl	8000608 <__aeabi_dmul>
 80074aa:	a379      	add	r3, pc, #484	; (adr r3, 8007690 <__ieee754_pow+0x700>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f8 fef4 	bl	800029c <__adddf3>
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	a376      	add	r3, pc, #472	; (adr r3, 8007698 <__ieee754_pow+0x708>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f8 feeb 	bl	800029c <__adddf3>
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f7f9 f89d 	bl	8000608 <__aeabi_dmul>
 80074ce:	a374      	add	r3, pc, #464	; (adr r3, 80076a0 <__ieee754_pow+0x710>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f8 fee2 	bl	800029c <__adddf3>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	a371      	add	r3, pc, #452	; (adr r3, 80076a8 <__ieee754_pow+0x718>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f7f8 fed9 	bl	800029c <__adddf3>
 80074ea:	4622      	mov	r2, r4
 80074ec:	4606      	mov	r6, r0
 80074ee:	460f      	mov	r7, r1
 80074f0:	462b      	mov	r3, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 f887 	bl	8000608 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 f881 	bl	8000608 <__aeabi_dmul>
 8007506:	4642      	mov	r2, r8
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	464b      	mov	r3, r9
 800750e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007512:	f7f8 fec3 	bl	800029c <__adddf3>
 8007516:	ec53 2b18 	vmov	r2, r3, d8
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	f7f8 febb 	bl	800029c <__adddf3>
 8007526:	4642      	mov	r2, r8
 8007528:	4682      	mov	sl, r0
 800752a:	468b      	mov	fp, r1
 800752c:	464b      	mov	r3, r9
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 f869 	bl	8000608 <__aeabi_dmul>
 8007536:	4b6c      	ldr	r3, [pc, #432]	; (80076e8 <__ieee754_pow+0x758>)
 8007538:	2200      	movs	r2, #0
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	f7f8 fead 	bl	800029c <__adddf3>
 8007542:	4652      	mov	r2, sl
 8007544:	465b      	mov	r3, fp
 8007546:	f7f8 fea9 	bl	800029c <__adddf3>
 800754a:	9c04      	ldr	r4, [sp, #16]
 800754c:	460d      	mov	r5, r1
 800754e:	4622      	mov	r2, r4
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f9 f857 	bl	8000608 <__aeabi_dmul>
 800755a:	4b63      	ldr	r3, [pc, #396]	; (80076e8 <__ieee754_pow+0x758>)
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	2200      	movs	r2, #0
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 fe97 	bl	8000298 <__aeabi_dsub>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	f7f8 fe93 	bl	8000298 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4650      	mov	r0, sl
 8007578:	4659      	mov	r1, fp
 800757a:	f7f8 fe8d 	bl	8000298 <__aeabi_dsub>
 800757e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007582:	f7f9 f841 	bl	8000608 <__aeabi_dmul>
 8007586:	4622      	mov	r2, r4
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	462b      	mov	r3, r5
 800758e:	ec51 0b18 	vmov	r0, r1, d8
 8007592:	f7f9 f839 	bl	8000608 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe7d 	bl	800029c <__adddf3>
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f8 fe75 	bl	800029c <__adddf3>
 80075b2:	9c04      	ldr	r4, [sp, #16]
 80075b4:	a33e      	add	r3, pc, #248	; (adr r3, 80076b0 <__ieee754_pow+0x720>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4620      	mov	r0, r4
 80075bc:	460d      	mov	r5, r1
 80075be:	f7f9 f823 	bl	8000608 <__aeabi_dmul>
 80075c2:	4642      	mov	r2, r8
 80075c4:	ec41 0b18 	vmov	d8, r0, r1
 80075c8:	464b      	mov	r3, r9
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f8 fe63 	bl	8000298 <__aeabi_dsub>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f8 fe5d 	bl	8000298 <__aeabi_dsub>
 80075de:	a336      	add	r3, pc, #216	; (adr r3, 80076b8 <__ieee754_pow+0x728>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	a335      	add	r3, pc, #212	; (adr r3, 80076c0 <__ieee754_pow+0x730>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f9 f807 	bl	8000608 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f8 fe4b 	bl	800029c <__adddf3>
 8007606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007608:	4b38      	ldr	r3, [pc, #224]	; (80076ec <__ieee754_pow+0x75c>)
 800760a:	4413      	add	r3, r2
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fe44 	bl	800029c <__adddf3>
 8007614:	4682      	mov	sl, r0
 8007616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007618:	468b      	mov	fp, r1
 800761a:	f7f8 ff8b 	bl	8000534 <__aeabi_i2d>
 800761e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <__ieee754_pow+0x760>)
 8007622:	4413      	add	r3, r2
 8007624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007628:	4606      	mov	r6, r0
 800762a:	460f      	mov	r7, r1
 800762c:	4652      	mov	r2, sl
 800762e:	465b      	mov	r3, fp
 8007630:	ec51 0b18 	vmov	r0, r1, d8
 8007634:	f7f8 fe32 	bl	800029c <__adddf3>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	f7f8 fe2e 	bl	800029c <__adddf3>
 8007640:	4632      	mov	r2, r6
 8007642:	463b      	mov	r3, r7
 8007644:	f7f8 fe2a 	bl	800029c <__adddf3>
 8007648:	9c04      	ldr	r4, [sp, #16]
 800764a:	4632      	mov	r2, r6
 800764c:	463b      	mov	r3, r7
 800764e:	4620      	mov	r0, r4
 8007650:	460d      	mov	r5, r1
 8007652:	f7f8 fe21 	bl	8000298 <__aeabi_dsub>
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	f7f8 fe1d 	bl	8000298 <__aeabi_dsub>
 800765e:	ec53 2b18 	vmov	r2, r3, d8
 8007662:	f7f8 fe19 	bl	8000298 <__aeabi_dsub>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4650      	mov	r0, sl
 800766c:	4659      	mov	r1, fp
 800766e:	e606      	b.n	800727e <__ieee754_pow+0x2ee>
 8007670:	2401      	movs	r4, #1
 8007672:	e6a0      	b.n	80073b6 <__ieee754_pow+0x426>
 8007674:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80076c8 <__ieee754_pow+0x738>
 8007678:	e60d      	b.n	8007296 <__ieee754_pow+0x306>
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w
 8007680:	4a454eef 	.word	0x4a454eef
 8007684:	3fca7e28 	.word	0x3fca7e28
 8007688:	93c9db65 	.word	0x93c9db65
 800768c:	3fcd864a 	.word	0x3fcd864a
 8007690:	a91d4101 	.word	0xa91d4101
 8007694:	3fd17460 	.word	0x3fd17460
 8007698:	518f264d 	.word	0x518f264d
 800769c:	3fd55555 	.word	0x3fd55555
 80076a0:	db6fabff 	.word	0xdb6fabff
 80076a4:	3fdb6db6 	.word	0x3fdb6db6
 80076a8:	33333303 	.word	0x33333303
 80076ac:	3fe33333 	.word	0x3fe33333
 80076b0:	e0000000 	.word	0xe0000000
 80076b4:	3feec709 	.word	0x3feec709
 80076b8:	dc3a03fd 	.word	0xdc3a03fd
 80076bc:	3feec709 	.word	0x3feec709
 80076c0:	145b01f5 	.word	0x145b01f5
 80076c4:	be3e2fe0 	.word	0xbe3e2fe0
 80076c8:	00000000 	.word	0x00000000
 80076cc:	3ff00000 	.word	0x3ff00000
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	43400000 	.word	0x43400000
 80076d8:	0003988e 	.word	0x0003988e
 80076dc:	000bb679 	.word	0x000bb679
 80076e0:	08007eb8 	.word	0x08007eb8
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	40080000 	.word	0x40080000
 80076ec:	08007ed8 	.word	0x08007ed8
 80076f0:	08007ec8 	.word	0x08007ec8
 80076f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80079cc <__ieee754_pow+0xa3c>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 fdcd 	bl	800029c <__adddf3>
 8007702:	4622      	mov	r2, r4
 8007704:	ec41 0b1a 	vmov	d10, r0, r1
 8007708:	462b      	mov	r3, r5
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f8 fdc3 	bl	8000298 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	ec51 0b1a 	vmov	r0, r1, d10
 800771a:	f7f9 fa05 	bl	8000b28 <__aeabi_dcmpgt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f47f adf8 	bne.w	8007314 <__ieee754_pow+0x384>
 8007724:	4aa4      	ldr	r2, [pc, #656]	; (80079b8 <__ieee754_pow+0xa28>)
 8007726:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800772a:	4293      	cmp	r3, r2
 800772c:	f340 810b 	ble.w	8007946 <__ieee754_pow+0x9b6>
 8007730:	151b      	asrs	r3, r3, #20
 8007732:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007736:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800773a:	fa4a f303 	asr.w	r3, sl, r3
 800773e:	445b      	add	r3, fp
 8007740:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007744:	4e9d      	ldr	r6, [pc, #628]	; (80079bc <__ieee754_pow+0xa2c>)
 8007746:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800774a:	4116      	asrs	r6, r2
 800774c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007750:	2000      	movs	r0, #0
 8007752:	ea23 0106 	bic.w	r1, r3, r6
 8007756:	f1c2 0214 	rsb	r2, r2, #20
 800775a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800775e:	fa4a fa02 	asr.w	sl, sl, r2
 8007762:	f1bb 0f00 	cmp.w	fp, #0
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	bfb8      	it	lt
 8007770:	f1ca 0a00 	rsblt	sl, sl, #0
 8007774:	f7f8 fd90 	bl	8000298 <__aeabi_dsub>
 8007778:	ec41 0b19 	vmov	d9, r0, r1
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	ec51 0b19 	vmov	r0, r1, d9
 8007784:	f7f8 fd8a 	bl	800029c <__adddf3>
 8007788:	2400      	movs	r4, #0
 800778a:	a379      	add	r3, pc, #484	; (adr r3, 8007970 <__ieee754_pow+0x9e0>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	4620      	mov	r0, r4
 8007792:	460d      	mov	r5, r1
 8007794:	f7f8 ff38 	bl	8000608 <__aeabi_dmul>
 8007798:	ec53 2b19 	vmov	r2, r3, d9
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	4620      	mov	r0, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	f7f8 fd78 	bl	8000298 <__aeabi_dsub>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4640      	mov	r0, r8
 80077ae:	4649      	mov	r1, r9
 80077b0:	f7f8 fd72 	bl	8000298 <__aeabi_dsub>
 80077b4:	a370      	add	r3, pc, #448	; (adr r3, 8007978 <__ieee754_pow+0x9e8>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 ff25 	bl	8000608 <__aeabi_dmul>
 80077be:	a370      	add	r3, pc, #448	; (adr r3, 8007980 <__ieee754_pow+0x9f0>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	4620      	mov	r0, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7f8 ff1c 	bl	8000608 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f8 fd60 	bl	800029c <__adddf3>
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fd58 	bl	800029c <__adddf3>
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	4680      	mov	r8, r0
 80077f2:	4689      	mov	r9, r1
 80077f4:	f7f8 fd50 	bl	8000298 <__aeabi_dsub>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fd4a 	bl	8000298 <__aeabi_dsub>
 8007804:	4642      	mov	r2, r8
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	464b      	mov	r3, r9
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f8 fefa 	bl	8000608 <__aeabi_dmul>
 8007814:	a35c      	add	r3, pc, #368	; (adr r3, 8007988 <__ieee754_pow+0x9f8>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	4604      	mov	r4, r0
 800781c:	460d      	mov	r5, r1
 800781e:	f7f8 fef3 	bl	8000608 <__aeabi_dmul>
 8007822:	a35b      	add	r3, pc, #364	; (adr r3, 8007990 <__ieee754_pow+0xa00>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd36 	bl	8000298 <__aeabi_dsub>
 800782c:	4622      	mov	r2, r4
 800782e:	462b      	mov	r3, r5
 8007830:	f7f8 feea 	bl	8000608 <__aeabi_dmul>
 8007834:	a358      	add	r3, pc, #352	; (adr r3, 8007998 <__ieee754_pow+0xa08>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fd2f 	bl	800029c <__adddf3>
 800783e:	4622      	mov	r2, r4
 8007840:	462b      	mov	r3, r5
 8007842:	f7f8 fee1 	bl	8000608 <__aeabi_dmul>
 8007846:	a356      	add	r3, pc, #344	; (adr r3, 80079a0 <__ieee754_pow+0xa10>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fd24 	bl	8000298 <__aeabi_dsub>
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	f7f8 fed8 	bl	8000608 <__aeabi_dmul>
 8007858:	a353      	add	r3, pc, #332	; (adr r3, 80079a8 <__ieee754_pow+0xa18>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fd1d 	bl	800029c <__adddf3>
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	f7f8 fecf 	bl	8000608 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f8 fd11 	bl	8000298 <__aeabi_dsub>
 8007876:	4604      	mov	r4, r0
 8007878:	460d      	mov	r5, r1
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f8 fec1 	bl	8000608 <__aeabi_dmul>
 8007886:	2200      	movs	r2, #0
 8007888:	ec41 0b19 	vmov	d9, r0, r1
 800788c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fd00 	bl	8000298 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	ec51 0b19 	vmov	r0, r1, d9
 80078a0:	f7f8 ffdc 	bl	800085c <__aeabi_ddiv>
 80078a4:	4632      	mov	r2, r6
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	463b      	mov	r3, r7
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	f7f8 fcf0 	bl	800029c <__adddf3>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f8 fce8 	bl	8000298 <__aeabi_dsub>
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	f7f8 fce4 	bl	8000298 <__aeabi_dsub>
 80078d0:	460b      	mov	r3, r1
 80078d2:	4602      	mov	r2, r0
 80078d4:	493a      	ldr	r1, [pc, #232]	; (80079c0 <__ieee754_pow+0xa30>)
 80078d6:	2000      	movs	r0, #0
 80078d8:	f7f8 fcde 	bl	8000298 <__aeabi_dsub>
 80078dc:	e9cd 0100 	strd	r0, r1, [sp]
 80078e0:	9b01      	ldr	r3, [sp, #4]
 80078e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80078e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ea:	da2f      	bge.n	800794c <__ieee754_pow+0x9bc>
 80078ec:	4650      	mov	r0, sl
 80078ee:	ed9d 0b00 	vldr	d0, [sp]
 80078f2:	f000 f9c5 	bl	8007c80 <scalbn>
 80078f6:	ec51 0b10 	vmov	r0, r1, d0
 80078fa:	ec53 2b18 	vmov	r2, r3, d8
 80078fe:	f7ff bbe0 	b.w	80070c2 <__ieee754_pow+0x132>
 8007902:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <__ieee754_pow+0xa34>)
 8007904:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007908:	429e      	cmp	r6, r3
 800790a:	f77f af0b 	ble.w	8007724 <__ieee754_pow+0x794>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <__ieee754_pow+0xa38>)
 8007910:	440b      	add	r3, r1
 8007912:	4303      	orrs	r3, r0
 8007914:	d00b      	beq.n	800792e <__ieee754_pow+0x99e>
 8007916:	a326      	add	r3, pc, #152	; (adr r3, 80079b0 <__ieee754_pow+0xa20>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	ec51 0b18 	vmov	r0, r1, d8
 8007920:	f7f8 fe72 	bl	8000608 <__aeabi_dmul>
 8007924:	a322      	add	r3, pc, #136	; (adr r3, 80079b0 <__ieee754_pow+0xa20>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7ff bbca 	b.w	80070c2 <__ieee754_pow+0x132>
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	f7f8 fcb1 	bl	8000298 <__aeabi_dsub>
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	f7f9 f8eb 	bl	8000b14 <__aeabi_dcmpge>
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f aef0 	beq.w	8007724 <__ieee754_pow+0x794>
 8007944:	e7e7      	b.n	8007916 <__ieee754_pow+0x986>
 8007946:	f04f 0a00 	mov.w	sl, #0
 800794a:	e717      	b.n	800777c <__ieee754_pow+0x7ec>
 800794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007950:	4619      	mov	r1, r3
 8007952:	e7d2      	b.n	80078fa <__ieee754_pow+0x96a>
 8007954:	491a      	ldr	r1, [pc, #104]	; (80079c0 <__ieee754_pow+0xa30>)
 8007956:	2000      	movs	r0, #0
 8007958:	f7ff bb9e 	b.w	8007098 <__ieee754_pow+0x108>
 800795c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007960:	f7ff bb9a 	b.w	8007098 <__ieee754_pow+0x108>
 8007964:	9000      	str	r0, [sp, #0]
 8007966:	f7ff bb76 	b.w	8007056 <__ieee754_pow+0xc6>
 800796a:	2100      	movs	r1, #0
 800796c:	f7ff bb60 	b.w	8007030 <__ieee754_pow+0xa0>
 8007970:	00000000 	.word	0x00000000
 8007974:	3fe62e43 	.word	0x3fe62e43
 8007978:	fefa39ef 	.word	0xfefa39ef
 800797c:	3fe62e42 	.word	0x3fe62e42
 8007980:	0ca86c39 	.word	0x0ca86c39
 8007984:	be205c61 	.word	0xbe205c61
 8007988:	72bea4d0 	.word	0x72bea4d0
 800798c:	3e663769 	.word	0x3e663769
 8007990:	c5d26bf1 	.word	0xc5d26bf1
 8007994:	3ebbbd41 	.word	0x3ebbbd41
 8007998:	af25de2c 	.word	0xaf25de2c
 800799c:	3f11566a 	.word	0x3f11566a
 80079a0:	16bebd93 	.word	0x16bebd93
 80079a4:	3f66c16c 	.word	0x3f66c16c
 80079a8:	5555553e 	.word	0x5555553e
 80079ac:	3fc55555 	.word	0x3fc55555
 80079b0:	c2f8f359 	.word	0xc2f8f359
 80079b4:	01a56e1f 	.word	0x01a56e1f
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	000fffff 	.word	0x000fffff
 80079c0:	3ff00000 	.word	0x3ff00000
 80079c4:	4090cbff 	.word	0x4090cbff
 80079c8:	3f6f3400 	.word	0x3f6f3400
 80079cc:	652b82fe 	.word	0x652b82fe
 80079d0:	3c971547 	.word	0x3c971547

080079d4 <__ieee754_sqrt>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	ec55 4b10 	vmov	r4, r5, d0
 80079dc:	4e56      	ldr	r6, [pc, #344]	; (8007b38 <__ieee754_sqrt+0x164>)
 80079de:	43ae      	bics	r6, r5
 80079e0:	ee10 0a10 	vmov	r0, s0
 80079e4:	ee10 3a10 	vmov	r3, s0
 80079e8:	4629      	mov	r1, r5
 80079ea:	462a      	mov	r2, r5
 80079ec:	d110      	bne.n	8007a10 <__ieee754_sqrt+0x3c>
 80079ee:	ee10 2a10 	vmov	r2, s0
 80079f2:	462b      	mov	r3, r5
 80079f4:	f7f8 fe08 	bl	8000608 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fc4c 	bl	800029c <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	ec45 4b10 	vmov	d0, r4, r5
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	dc10      	bgt.n	8007a36 <__ieee754_sqrt+0x62>
 8007a14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a18:	4330      	orrs	r0, r6
 8007a1a:	d0f5      	beq.n	8007a08 <__ieee754_sqrt+0x34>
 8007a1c:	b15d      	cbz	r5, 8007a36 <__ieee754_sqrt+0x62>
 8007a1e:	ee10 2a10 	vmov	r2, s0
 8007a22:	462b      	mov	r3, r5
 8007a24:	ee10 0a10 	vmov	r0, s0
 8007a28:	f7f8 fc36 	bl	8000298 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	f7f8 ff14 	bl	800085c <__aeabi_ddiv>
 8007a34:	e7e6      	b.n	8007a04 <__ieee754_sqrt+0x30>
 8007a36:	1509      	asrs	r1, r1, #20
 8007a38:	d076      	beq.n	8007b28 <__ieee754_sqrt+0x154>
 8007a3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a3e:	07ce      	lsls	r6, r1, #31
 8007a40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a44:	bf5e      	ittt	pl
 8007a46:	0fda      	lsrpl	r2, r3, #31
 8007a48:	005b      	lslpl	r3, r3, #1
 8007a4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a4e:	0fda      	lsrs	r2, r3, #31
 8007a50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007a54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	106d      	asrs	r5, r5, #1
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	f04f 0e16 	mov.w	lr, #22
 8007a62:	4684      	mov	ip, r0
 8007a64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a68:	eb0c 0401 	add.w	r4, ip, r1
 8007a6c:	4294      	cmp	r4, r2
 8007a6e:	bfde      	ittt	le
 8007a70:	1b12      	suble	r2, r2, r4
 8007a72:	eb04 0c01 	addle.w	ip, r4, r1
 8007a76:	1840      	addle	r0, r0, r1
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	f1be 0e01 	subs.w	lr, lr, #1
 8007a7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007a82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a8a:	d1ed      	bne.n	8007a68 <__ieee754_sqrt+0x94>
 8007a8c:	4671      	mov	r1, lr
 8007a8e:	2720      	movs	r7, #32
 8007a90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007a94:	4562      	cmp	r2, ip
 8007a96:	eb04 060e 	add.w	r6, r4, lr
 8007a9a:	dc02      	bgt.n	8007aa2 <__ieee754_sqrt+0xce>
 8007a9c:	d113      	bne.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007a9e:	429e      	cmp	r6, r3
 8007aa0:	d811      	bhi.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	eb06 0e04 	add.w	lr, r6, r4
 8007aa8:	da43      	bge.n	8007b32 <__ieee754_sqrt+0x15e>
 8007aaa:	f1be 0f00 	cmp.w	lr, #0
 8007aae:	db40      	blt.n	8007b32 <__ieee754_sqrt+0x15e>
 8007ab0:	f10c 0801 	add.w	r8, ip, #1
 8007ab4:	eba2 020c 	sub.w	r2, r2, ip
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	bf88      	it	hi
 8007abc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	4421      	add	r1, r4
 8007ac4:	46c4      	mov	ip, r8
 8007ac6:	0052      	lsls	r2, r2, #1
 8007ac8:	3f01      	subs	r7, #1
 8007aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ace:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ad6:	d1dd      	bne.n	8007a94 <__ieee754_sqrt+0xc0>
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d006      	beq.n	8007aea <__ieee754_sqrt+0x116>
 8007adc:	1c4c      	adds	r4, r1, #1
 8007ade:	bf13      	iteet	ne
 8007ae0:	3101      	addne	r1, #1
 8007ae2:	3001      	addeq	r0, #1
 8007ae4:	4639      	moveq	r1, r7
 8007ae6:	f021 0101 	bicne.w	r1, r1, #1
 8007aea:	1043      	asrs	r3, r0, #1
 8007aec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007af0:	0849      	lsrs	r1, r1, #1
 8007af2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007af6:	07c2      	lsls	r2, r0, #31
 8007af8:	bf48      	it	mi
 8007afa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007afe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b02:	460c      	mov	r4, r1
 8007b04:	463d      	mov	r5, r7
 8007b06:	e77f      	b.n	8007a08 <__ieee754_sqrt+0x34>
 8007b08:	0ada      	lsrs	r2, r3, #11
 8007b0a:	3815      	subs	r0, #21
 8007b0c:	055b      	lsls	r3, r3, #21
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d0fa      	beq.n	8007b08 <__ieee754_sqrt+0x134>
 8007b12:	02d7      	lsls	r7, r2, #11
 8007b14:	d50a      	bpl.n	8007b2c <__ieee754_sqrt+0x158>
 8007b16:	f1c1 0420 	rsb	r4, r1, #32
 8007b1a:	fa23 f404 	lsr.w	r4, r3, r4
 8007b1e:	1e4d      	subs	r5, r1, #1
 8007b20:	408b      	lsls	r3, r1
 8007b22:	4322      	orrs	r2, r4
 8007b24:	1b41      	subs	r1, r0, r5
 8007b26:	e788      	b.n	8007a3a <__ieee754_sqrt+0x66>
 8007b28:	4608      	mov	r0, r1
 8007b2a:	e7f0      	b.n	8007b0e <__ieee754_sqrt+0x13a>
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	3101      	adds	r1, #1
 8007b30:	e7ef      	b.n	8007b12 <__ieee754_sqrt+0x13e>
 8007b32:	46e0      	mov	r8, ip
 8007b34:	e7be      	b.n	8007ab4 <__ieee754_sqrt+0xe0>
 8007b36:	bf00      	nop
 8007b38:	7ff00000 	.word	0x7ff00000

08007b3c <finite>:
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	ed8d 0b00 	vstr	d0, [sp]
 8007b42:	9801      	ldr	r0, [sp, #4]
 8007b44:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b48:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b4c:	0fc0      	lsrs	r0, r0, #31
 8007b4e:	b002      	add	sp, #8
 8007b50:	4770      	bx	lr
 8007b52:	0000      	movs	r0, r0
 8007b54:	0000      	movs	r0, r0
	...

08007b58 <nan>:
 8007b58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b60 <nan+0x8>
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	00000000 	.word	0x00000000
 8007b64:	7ff80000 	.word	0x7ff80000

08007b68 <rint>:
 8007b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b6a:	ec51 0b10 	vmov	r0, r1, d0
 8007b6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b76:	2e13      	cmp	r6, #19
 8007b78:	ee10 4a10 	vmov	r4, s0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007b82:	dc58      	bgt.n	8007c36 <rint+0xce>
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	da2b      	bge.n	8007be0 <rint+0x78>
 8007b88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b8c:	4302      	orrs	r2, r0
 8007b8e:	d023      	beq.n	8007bd8 <rint+0x70>
 8007b90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007b94:	4302      	orrs	r2, r0
 8007b96:	4254      	negs	r4, r2
 8007b98:	4314      	orrs	r4, r2
 8007b9a:	0c4b      	lsrs	r3, r1, #17
 8007b9c:	0b24      	lsrs	r4, r4, #12
 8007b9e:	045b      	lsls	r3, r3, #17
 8007ba0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ba4:	ea44 0103 	orr.w	r1, r4, r3
 8007ba8:	4b32      	ldr	r3, [pc, #200]	; (8007c74 <rint+0x10c>)
 8007baa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 fb6f 	bl	800029c <__adddf3>
 8007bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	f7f8 fb65 	bl	8000298 <__aeabi_dsub>
 8007bce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bd2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	ec41 0b10 	vmov	d0, r0, r1
 8007bdc:	b003      	add	sp, #12
 8007bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be0:	4a25      	ldr	r2, [pc, #148]	; (8007c78 <rint+0x110>)
 8007be2:	4132      	asrs	r2, r6
 8007be4:	ea01 0702 	and.w	r7, r1, r2
 8007be8:	4307      	orrs	r7, r0
 8007bea:	d0f5      	beq.n	8007bd8 <rint+0x70>
 8007bec:	0851      	lsrs	r1, r2, #1
 8007bee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007bf2:	4314      	orrs	r4, r2
 8007bf4:	d00c      	beq.n	8007c10 <rint+0xa8>
 8007bf6:	ea23 0201 	bic.w	r2, r3, r1
 8007bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bfe:	2e13      	cmp	r6, #19
 8007c00:	fa43 f606 	asr.w	r6, r3, r6
 8007c04:	bf0c      	ite	eq
 8007c06:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007c0a:	2400      	movne	r4, #0
 8007c0c:	ea42 0306 	orr.w	r3, r2, r6
 8007c10:	4918      	ldr	r1, [pc, #96]	; (8007c74 <rint+0x10c>)
 8007c12:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007c16:	4622      	mov	r2, r4
 8007c18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 fb3c 	bl	800029c <__adddf3>
 8007c24:	e9cd 0100 	strd	r0, r1, [sp]
 8007c28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	462b      	mov	r3, r5
 8007c30:	f7f8 fb32 	bl	8000298 <__aeabi_dsub>
 8007c34:	e7d0      	b.n	8007bd8 <rint+0x70>
 8007c36:	2e33      	cmp	r6, #51	; 0x33
 8007c38:	dd07      	ble.n	8007c4a <rint+0xe2>
 8007c3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c3e:	d1cb      	bne.n	8007bd8 <rint+0x70>
 8007c40:	ee10 2a10 	vmov	r2, s0
 8007c44:	f7f8 fb2a 	bl	800029c <__adddf3>
 8007c48:	e7c6      	b.n	8007bd8 <rint+0x70>
 8007c4a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007c4e:	f04f 36ff 	mov.w	r6, #4294967295
 8007c52:	40d6      	lsrs	r6, r2
 8007c54:	4230      	tst	r0, r6
 8007c56:	d0bf      	beq.n	8007bd8 <rint+0x70>
 8007c58:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007c5c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007c60:	bf1f      	itttt	ne
 8007c62:	ea24 0101 	bicne.w	r1, r4, r1
 8007c66:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007c6a:	fa44 f202 	asrne.w	r2, r4, r2
 8007c6e:	ea41 0402 	orrne.w	r4, r1, r2
 8007c72:	e7cd      	b.n	8007c10 <rint+0xa8>
 8007c74:	08007ee8 	.word	0x08007ee8
 8007c78:	000fffff 	.word	0x000fffff
 8007c7c:	00000000 	.word	0x00000000

08007c80 <scalbn>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	ec55 4b10 	vmov	r4, r5, d0
 8007c86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	b99a      	cbnz	r2, 8007cb8 <scalbn+0x38>
 8007c90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c94:	4323      	orrs	r3, r4
 8007c96:	d036      	beq.n	8007d06 <scalbn+0x86>
 8007c98:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <scalbn+0x100>)
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	ee10 0a10 	vmov	r0, s0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f7f8 fcb1 	bl	8000608 <__aeabi_dmul>
 8007ca6:	4b37      	ldr	r3, [pc, #220]	; (8007d84 <scalbn+0x104>)
 8007ca8:	429e      	cmp	r6, r3
 8007caa:	4604      	mov	r4, r0
 8007cac:	460d      	mov	r5, r1
 8007cae:	da10      	bge.n	8007cd2 <scalbn+0x52>
 8007cb0:	a32b      	add	r3, pc, #172	; (adr r3, 8007d60 <scalbn+0xe0>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	e03a      	b.n	8007d2e <scalbn+0xae>
 8007cb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007cbc:	428a      	cmp	r2, r1
 8007cbe:	d10c      	bne.n	8007cda <scalbn+0x5a>
 8007cc0:	ee10 2a10 	vmov	r2, s0
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 fae8 	bl	800029c <__adddf3>
 8007ccc:	4604      	mov	r4, r0
 8007cce:	460d      	mov	r5, r1
 8007cd0:	e019      	b.n	8007d06 <scalbn+0x86>
 8007cd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	3a36      	subs	r2, #54	; 0x36
 8007cda:	4432      	add	r2, r6
 8007cdc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	dd08      	ble.n	8007cf6 <scalbn+0x76>
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	a120      	add	r1, pc, #128	; (adr r1, 8007d68 <scalbn+0xe8>)
 8007ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cec:	da1c      	bge.n	8007d28 <scalbn+0xa8>
 8007cee:	a120      	add	r1, pc, #128	; (adr r1, 8007d70 <scalbn+0xf0>)
 8007cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cf4:	e018      	b.n	8007d28 <scalbn+0xa8>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dd08      	ble.n	8007d0c <scalbn+0x8c>
 8007cfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d06:	ec45 4b10 	vmov	d0, r4, r5
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d10:	da19      	bge.n	8007d46 <scalbn+0xc6>
 8007d12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d16:	429e      	cmp	r6, r3
 8007d18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d1c:	dd0a      	ble.n	8007d34 <scalbn+0xb4>
 8007d1e:	a112      	add	r1, pc, #72	; (adr r1, 8007d68 <scalbn+0xe8>)
 8007d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e2      	bne.n	8007cee <scalbn+0x6e>
 8007d28:	a30f      	add	r3, pc, #60	; (adr r3, 8007d68 <scalbn+0xe8>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fc6b 	bl	8000608 <__aeabi_dmul>
 8007d32:	e7cb      	b.n	8007ccc <scalbn+0x4c>
 8007d34:	a10a      	add	r1, pc, #40	; (adr r1, 8007d60 <scalbn+0xe0>)
 8007d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0b8      	beq.n	8007cb0 <scalbn+0x30>
 8007d3e:	a10e      	add	r1, pc, #56	; (adr r1, 8007d78 <scalbn+0xf8>)
 8007d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d44:	e7b4      	b.n	8007cb0 <scalbn+0x30>
 8007d46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d4a:	3236      	adds	r2, #54	; 0x36
 8007d4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d54:	4620      	mov	r0, r4
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <scalbn+0x108>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	e7e8      	b.n	8007d2e <scalbn+0xae>
 8007d5c:	f3af 8000 	nop.w
 8007d60:	c2f8f359 	.word	0xc2f8f359
 8007d64:	01a56e1f 	.word	0x01a56e1f
 8007d68:	8800759c 	.word	0x8800759c
 8007d6c:	7e37e43c 	.word	0x7e37e43c
 8007d70:	8800759c 	.word	0x8800759c
 8007d74:	fe37e43c 	.word	0xfe37e43c
 8007d78:	c2f8f359 	.word	0xc2f8f359
 8007d7c:	81a56e1f 	.word	0x81a56e1f
 8007d80:	43500000 	.word	0x43500000
 8007d84:	ffff3cb0 	.word	0xffff3cb0
 8007d88:	3c900000 	.word	0x3c900000

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
